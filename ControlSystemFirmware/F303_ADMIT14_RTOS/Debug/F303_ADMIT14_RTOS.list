
F303_ADMIT14_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800ab50  0800ab50  0000bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac78  0800ac78  0000c078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800ac78  0800ac78  0000c078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800ac78  0800ac78  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac78  0800ac78  0000bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac7c  0800ac7c  0000bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800ac80  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          00001480  20000078  20000078  0000c078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014f8  200014f8  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3e5  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004429  00000000  00000000  0002648d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012de  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1e9  00000000  00000000  0002d41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208dd  00000000  00000000  0004c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5002  00000000  00000000  0006cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121ee6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b80  00000000  00000000  00121f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00128aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab34 	.word	0x0800ab34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800ab34 	.word	0x0800ab34

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b0a:	4b43      	ldr	r3, [pc, #268]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b12:	4b41      	ldr	r3, [pc, #260]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b18:	4b3f      	ldr	r3, [pc, #252]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b24:	4b3c      	ldr	r3, [pc, #240]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b37      	ldr	r3, [pc, #220]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000b44:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b54:	2208      	movs	r2, #8
 8000b56:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b64:	482c      	ldr	r0, [pc, #176]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b66:	f002 f96f 	bl	8002e48 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f001 feb9 	bl	80028e6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4826      	ldr	r0, [pc, #152]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000b80:	f002 fe8c 	bl	800389c <HAL_ADCEx_MultiModeConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b8a:	f001 feac 	bl	80028e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481b      	ldr	r0, [pc, #108]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000bac:	f002 fbb8 	bl	8003320 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000bb6:	f001 fe96 	bl	80028e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000bc8:	f002 fbaa 	bl	8003320 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000bd2:	f001 fe88 	bl	80028e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000be4:	f002 fb9c 	bl	8003320 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000bee:	f001 fe7a 	bl	80028e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_ADC1_Init+0x130>)
 8000c00:	f002 fb8e 	bl	8003320 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000c0a:	f001 fe6c 	bl	80028e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000094 	.word	0x20000094

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c3c:	d14c      	bne.n	8000cd8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <HAL_ADC_MspInit+0xc4>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_RearSens_Pin|ADC_RightSens_Pin|ADC_FrontSens_Pin|ADC_LeftSens_Pin;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f004 f8ca 	bl	8004e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <HAL_ADC_MspInit+0xcc>)
 8000c8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000ca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000cbe:	f003 ff15 	bl	8004aec <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000cc8:	f001 fe0d 	bl	80028e6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_ADC_MspInit+0xc8>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	@ 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	200000e4 	.word	0x200000e4
 8000ce8:	40020008 	.word	0x40020008

08000cec <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000cf4:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <MX_CAN_Init+0xa0>)
 8000cf6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d0c:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000d10:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d14:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000d18:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d40:	f002 ffa2 	bl	8003c88 <HAL_CAN_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d4a:	f001 fdcc 	bl	80028e6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation= CAN_FILTER_ENABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0x65<<5;
 8000d5a:	f44f 634a 	mov.w	r3, #3232	@ 0xca0
 8000d5e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0x65<<5;
 8000d60:	f44f 634a 	mov.w	r3, #3232	@ 0xca0
 8000d64:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode= CAN_FILTERMODE_IDLIST;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <MX_CAN_Init+0x9c>)
 8000d7c:	f003 f87f 	bl	8003e7e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	@ 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000128 	.word	0x20000128
 8000d8c:	40006400 	.word	0x40006400

08000d90 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <HAL_CAN_MspInit+0xb4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d143      	bne.n	8000e3a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_CAN_MspInit+0xb8>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000de2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000df4:	2309      	movs	r3, #9
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f004 f80b 	bl	8004e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e18:	2309      	movs	r3, #9
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e26:	f003 fff9 	bl	8004e1c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	2014      	movs	r0, #20
 8000e30:	f003 fe32 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000e34:	2014      	movs	r0, #20
 8000e36:	f003 fe4b 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40006400 	.word	0x40006400
 8000e48:	40021000 	.word	0x40021000

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_DMA_Init+0x38>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <MX_DMA_Init+0x38>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_DMA_Init+0x38>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	200b      	movs	r0, #11
 8000e70:	f003 fe12 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e74:	200b      	movs	r0, #11
 8000e76:	f003 fe2b 	bl	8004ad0 <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000228 	.word	0x20000228
 8000eb8:	2000027c 	.word	0x2000027c

08000ebc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b09c      	sub	sp, #112	@ 0x70
 8000ec0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <MX_FREERTOS_Init+0xa4>)
 8000ec4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000ec8:	461d      	mov	r5, r3
 8000eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ece:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ed6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f007 fc62 	bl	80087a6 <osThreadCreate>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f64 <MX_FREERTOS_Init+0xa8>)
 8000ee6:	6013      	str	r3, [r2, #0]

  /* definition and creation of PWMControl */
  osThreadDef(PWMControl, StartPWMTask, osPriorityNormal, 0, 128);
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_FREERTOS_Init+0xac>)
 8000eea:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PWMControlHandle = osThreadCreate(osThread(PWMControl), NULL);
 8000efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f007 fc4f 	bl	80087a6 <osThreadCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <MX_FREERTOS_Init+0xb0>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistSensProcess */
  osThreadDef(DistSensProcess, StartDistSensTask, osPriorityIdle, 0, 128);
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_FREERTOS_Init+0xb4>)
 8000f10:	f107 041c 	add.w	r4, r7, #28
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistSensProcessHandle = osThreadCreate(osThread(DistSensProcess), NULL);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fc3c 	bl	80087a6 <osThreadCreate>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <MX_FREERTOS_Init+0xb8>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* definition and creation of IMUProcess */
  osThreadDef(IMUProcess, StartIMUTask, osPriorityIdle, 0, 128);
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_FREERTOS_Init+0xbc>)
 8000f36:	463c      	mov	r4, r7
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUProcessHandle = osThreadCreate(osThread(IMUProcess), NULL);
 8000f46:	463b      	mov	r3, r7
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fc2b 	bl	80087a6 <osThreadCreate>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <MX_FREERTOS_Init+0xc0>)
 8000f54:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f56:	bf00      	nop
 8000f58:	3770      	adds	r7, #112	@ 0x70
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800ab5c 	.word	0x0800ab5c
 8000f64:	20000218 	.word	0x20000218
 8000f68:	0800ab84 	.word	0x0800ab84
 8000f6c:	2000021c 	.word	0x2000021c
 8000f70:	0800abb0 	.word	0x0800abb0
 8000f74:	20000220 	.word	0x20000220
 8000f78:	0800abd8 	.word	0x0800abd8
 8000f7c:	20000224 	.word	0x20000224

08000f80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GetTick() - last_check_time >= 700) {  //check after how many ms
 8000f88:	f001 ff3e 	bl	8002e08 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <StartDefaultTask+0x54>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000f98:	d318      	bcc.n	8000fcc <StartDefaultTask+0x4c>
		        if (prev_var == receiveFlag) {
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <StartDefaultTask+0x58>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <StartDefaultTask+0x5c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d106      	bne.n	8000fb8 <StartDefaultTask+0x38>
		            // Variable has not changed for 700ms
		            // Take desired action here
		        	//Reset RxData buffer
		        	RxData[0]=100;				//Set to Neutral value for Throttle
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <StartDefaultTask+0x60>)
 8000fac:	2264      	movs	r2, #100	@ 0x64
 8000fae:	701a      	strb	r2, [r3, #0]
		        	RxData[1]=100;				//Set to Neutral value for Steering Servo
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <StartDefaultTask+0x60>)
 8000fb2:	2264      	movs	r2, #100	@ 0x64
 8000fb4:	705a      	strb	r2, [r3, #1]
 8000fb6:	e004      	b.n	8000fc2 <StartDefaultTask+0x42>

		        } else {
		            // Variable changed, reset check
		        	//Do nothing, passed check
		            prev_var = receiveFlag;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <StartDefaultTask+0x5c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <StartDefaultTask+0x58>)
 8000fc0:	701a      	strb	r2, [r3, #0]
		        }
		        last_check_time = HAL_GetTick();  // Reset timer
 8000fc2:	f001 ff21 	bl	8002e08 <HAL_GetTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a02      	ldr	r2, [pc, #8]	@ (8000fd4 <StartDefaultTask+0x54>)
 8000fca:	6013      	str	r3, [r2, #0]
		    }

    osDelay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f007 fc36 	bl	800883e <osDelay>
	  if (HAL_GetTick() - last_check_time >= 700) {  //check after how many ms
 8000fd2:	e7d9      	b.n	8000f88 <StartDefaultTask+0x8>
 8000fd4:	200005d4 	.word	0x200005d4
 8000fd8:	200005d0 	.word	0x200005d0
 8000fdc:	200005d1 	.word	0x200005d1
 8000fe0:	200005c4 	.word	0x200005c4

08000fe4 <StartPWMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPWMTask */
void StartPWMTask(void const * argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPWMTask */
  /* Infinite loop */
  for(;;)
  {
	  TIM1->CCR1=ConvertToPWM_Signal(RxData[0], 0, 200, 103, 204);		//Assign 1st PWM signal, for Throttle
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <StartPWMTask+0x48>)
 8000fee:	7818      	ldrb	r0, [r3, #0]
 8000ff0:	23cc      	movs	r3, #204	@ 0xcc
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2367      	movs	r3, #103	@ 0x67
 8000ff6:	22c8      	movs	r2, #200	@ 0xc8
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f001 fbcf 	bl	800279c <ConvertToPWM_Signal>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <StartPWMTask+0x4c>)
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2=ConvertToPWM_Signal(RxData[1], 0, 200, 103, 223);		//Assign 2nd PWM signal, for Steering
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <StartPWMTask+0x48>)
 8001008:	7858      	ldrb	r0, [r3, #1]
 800100a:	23df      	movs	r3, #223	@ 0xdf
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2367      	movs	r3, #103	@ 0x67
 8001010:	22c8      	movs	r2, #200	@ 0xc8
 8001012:	2100      	movs	r1, #0
 8001014:	f001 fbc2 	bl	800279c <ConvertToPWM_Signal>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <StartPWMTask+0x4c>)
 800101e:	639a      	str	r2, [r3, #56]	@ 0x38
    osDelay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f007 fc0c 	bl	800883e <osDelay>
	  TIM1->CCR1=ConvertToPWM_Signal(RxData[0], 0, 200, 103, 204);		//Assign 1st PWM signal, for Throttle
 8001026:	bf00      	nop
 8001028:	e7e0      	b.n	8000fec <StartPWMTask+0x8>
 800102a:	bf00      	nop
 800102c:	200005c4 	.word	0x200005c4
 8001030:	40012c00 	.word	0x40012c00

08001034 <StartDistSensTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDistSensTask */
void StartDistSensTask(void const * argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDistSensTask */
  /* Infinite loop */
  for(;;)
  {
	  //Calc Dist, send to CAN MSG 102
	HAL_ADC_Start_DMA(&hadc1, &ADC_input, 4);   //Start sampling at the beginning of task, auto stop after complete sampling of 4 channels
 800103c:	2204      	movs	r2, #4
 800103e:	491b      	ldr	r1, [pc, #108]	@ (80010ac <StartDistSensTask+0x78>)
 8001040:	481b      	ldr	r0, [pc, #108]	@ (80010b0 <StartDistSensTask+0x7c>)
 8001042:	f002 f893 	bl	800316c <HAL_ADC_Start_DMA>

	Dist[0]=CalcDist(ADC_Value_Front_Filtered);
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <StartDistSensTask+0x80>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fac4 	bl	80025d8 <CalcDist>
 8001050:	4603      	mov	r3, r0
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <StartDistSensTask+0x84>)
 8001056:	701a      	strb	r2, [r3, #0]
	Dist[1]=CalcDist(ADC_Value_Rear_Filtered);
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <StartDistSensTask+0x88>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fabb 	bl	80025d8 <CalcDist>
 8001062:	4603      	mov	r3, r0
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <StartDistSensTask+0x84>)
 8001068:	705a      	strb	r2, [r3, #1]
	Dist[2]=CalcDist(ADC_Value_Left_Filtered);
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <StartDistSensTask+0x8c>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fab2 	bl	80025d8 <CalcDist>
 8001074:	4603      	mov	r3, r0
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <StartDistSensTask+0x84>)
 800107a:	709a      	strb	r2, [r3, #2]
	Dist[3]=CalcDist(ADC_Value_Right_Filtered);
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <StartDistSensTask+0x90>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 faa9 	bl	80025d8 <CalcDist>
 8001086:	4603      	mov	r3, r0
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <StartDistSensTask+0x84>)
 800108c:	70da      	strb	r2, [r3, #3]

	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader_Sensor, Dist, &TxMailbox)!= HAL_OK){
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <StartDistSensTask+0x94>)
 8001090:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <StartDistSensTask+0x84>)
 8001092:	490e      	ldr	r1, [pc, #56]	@ (80010cc <StartDistSensTask+0x98>)
 8001094:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <StartDistSensTask+0x9c>)
 8001096:	f003 f800 	bl	800409a <HAL_CAN_AddTxMessage>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <StartDistSensTask+0x70>
		  Error_Handler();																//Transmit CAN Message, if not succeed then error handle
 80010a0:	f001 fc21 	bl	80028e6 <Error_Handler>
	  }				//Transmit CAN Message, if not succeed, the nerror handle
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f007 fbca 	bl	800883e <osDelay>
	HAL_ADC_Start_DMA(&hadc1, &ADC_input, 4);   //Start sampling at the beginning of task, auto stop after complete sampling of 4 channels
 80010aa:	e7c7      	b.n	800103c <StartDistSensTask+0x8>
 80010ac:	2000050c 	.word	0x2000050c
 80010b0:	20000094 	.word	0x20000094
 80010b4:	20000150 	.word	0x20000150
 80010b8:	20000514 	.word	0x20000514
 80010bc:	20000152 	.word	0x20000152
 80010c0:	20000154 	.word	0x20000154
 80010c4:	20000156 	.word	0x20000156
 80010c8:	200005cc 	.word	0x200005cc
 80010cc:	20000564 	.word	0x20000564
 80010d0:	20000128 	.word	0x20000128

080010d4 <StartIMUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMUTask */
void StartIMUTask(void const * argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMUTask */
  /* Infinite loop */
  for(;;)
  {
	readAccel(&ax, &ay, &az);
 80010dc:	4a7c      	ldr	r2, [pc, #496]	@ (80012d0 <StartIMUTask+0x1fc>)
 80010de:	497d      	ldr	r1, [pc, #500]	@ (80012d4 <StartIMUTask+0x200>)
 80010e0:	487d      	ldr	r0, [pc, #500]	@ (80012d8 <StartIMUTask+0x204>)
 80010e2:	f000 fd21 	bl	8001b28 <readAccel>
	Accel[0]=(ax+4)*30;	Accel[1]=(ay+4)*30;	Accel[2]=(az+4)*30;
 80010e6:	4b7c      	ldr	r3, [pc, #496]	@ (80012d8 <StartIMUTask+0x204>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80010f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001100:	edc7 7a00 	vstr	s15, [r7]
 8001104:	783b      	ldrb	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b74      	ldr	r3, [pc, #464]	@ (80012dc <StartIMUTask+0x208>)
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	4b71      	ldr	r3, [pc, #452]	@ (80012d4 <StartIMUTask+0x200>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800111e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	edc7 7a00 	vstr	s15, [r7]
 800112a:	783b      	ldrb	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b6b      	ldr	r3, [pc, #428]	@ (80012dc <StartIMUTask+0x208>)
 8001130:	705a      	strb	r2, [r3, #1]
 8001132:	4b67      	ldr	r3, [pc, #412]	@ (80012d0 <StartIMUTask+0x1fc>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800113c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001140:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114c:	edc7 7a00 	vstr	s15, [r7]
 8001150:	783b      	ldrb	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b61      	ldr	r3, [pc, #388]	@ (80012dc <StartIMUTask+0x208>)
 8001156:	709a      	strb	r2, [r3, #2]

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader_IMU_Accel, Accel, &TxMailbox)!= HAL_OK){
 8001158:	4b61      	ldr	r3, [pc, #388]	@ (80012e0 <StartIMUTask+0x20c>)
 800115a:	4a60      	ldr	r2, [pc, #384]	@ (80012dc <StartIMUTask+0x208>)
 800115c:	4961      	ldr	r1, [pc, #388]	@ (80012e4 <StartIMUTask+0x210>)
 800115e:	4862      	ldr	r0, [pc, #392]	@ (80012e8 <StartIMUTask+0x214>)
 8001160:	f002 ff9b 	bl	800409a <HAL_CAN_AddTxMessage>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <StartIMUTask+0x9a>
			  Error_Handler();																//Transmit CAN Message, if not succeed then error handle
 800116a:	f001 fbbc 	bl	80028e6 <Error_Handler>
	}

    osDelay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f007 fb65 	bl	800883e <osDelay>

	readGyro(&gx, &gy, &gz);
 8001174:	4a5d      	ldr	r2, [pc, #372]	@ (80012ec <StartIMUTask+0x218>)
 8001176:	495e      	ldr	r1, [pc, #376]	@ (80012f0 <StartIMUTask+0x21c>)
 8001178:	485e      	ldr	r0, [pc, #376]	@ (80012f4 <StartIMUTask+0x220>)
 800117a:	f000 fd87 	bl	8001c8c <readGyro>
	Gyro[0]=(gx+245)*0.5 ;	Gyro[1]=(gy+245)*0.5 ;		Gyro[2]=(gz+245)*0.5 ;
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <StartIMUTask+0x220>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80012f8 <StartIMUTask+0x224>
 8001188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f982 	bl	8000498 <__aeabi_f2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b58      	ldr	r3, [pc, #352]	@ (80012fc <StartIMUTask+0x228>)
 800119a:	f7ff f9d5 	bl	8000548 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fc7f 	bl	8000aa8 <__aeabi_d2uiz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b54      	ldr	r3, [pc, #336]	@ (8001300 <StartIMUTask+0x22c>)
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	4b4f      	ldr	r3, [pc, #316]	@ (80012f0 <StartIMUTask+0x21c>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80012f8 <StartIMUTask+0x224>
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	ee17 0a90 	vmov	r0, s15
 80011c4:	f7ff f968 	bl	8000498 <__aeabi_f2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b4b      	ldr	r3, [pc, #300]	@ (80012fc <StartIMUTask+0x228>)
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc65 	bl	8000aa8 <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <StartIMUTask+0x22c>)
 80011e4:	705a      	strb	r2, [r3, #1]
 80011e6:	4b41      	ldr	r3, [pc, #260]	@ (80012ec <StartIMUTask+0x218>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80012f8 <StartIMUTask+0x224>
 80011f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f4:	ee17 0a90 	vmov	r0, s15
 80011f8:	f7ff f94e 	bl	8000498 <__aeabi_f2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <StartIMUTask+0x228>)
 8001202:	f7ff f9a1 	bl	8000548 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fc4b 	bl	8000aa8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <StartIMUTask+0x22c>)
 8001218:	709a      	strb	r2, [r3, #2]

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader_IMU_Gyro, Gyro, &TxMailbox)!= HAL_OK){
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <StartIMUTask+0x20c>)
 800121c:	4a38      	ldr	r2, [pc, #224]	@ (8001300 <StartIMUTask+0x22c>)
 800121e:	4939      	ldr	r1, [pc, #228]	@ (8001304 <StartIMUTask+0x230>)
 8001220:	4831      	ldr	r0, [pc, #196]	@ (80012e8 <StartIMUTask+0x214>)
 8001222:	f002 ff3a 	bl	800409a <HAL_CAN_AddTxMessage>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <StartIMUTask+0x15c>
		  Error_Handler();																//Transmit CAN Message, if not succeed then error handle
 800122c:	f001 fb5b 	bl	80028e6 <Error_Handler>
	}
	osDelay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f007 fb04 	bl	800883e <osDelay>

////// REMOVE THIS PART IF BUG HAPPEN
	readMag(&mx, &my, &mz);
 8001236:	4a34      	ldr	r2, [pc, #208]	@ (8001308 <StartIMUTask+0x234>)
 8001238:	4934      	ldr	r1, [pc, #208]	@ (800130c <StartIMUTask+0x238>)
 800123a:	4835      	ldr	r0, [pc, #212]	@ (8001310 <StartIMUTask+0x23c>)
 800123c:	f000 fccd 	bl	8001bda <readMag>
	Magne[0]=(mx+128)*100; Magne[1]=(my+128)*100; Magne[2]=(mz+128)*100;
 8001240:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <StartIMUTask+0x23c>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001314 <StartIMUTask+0x240>
 800124a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800124e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001318 <StartIMUTask+0x244>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800125a:	edc7 7a00 	vstr	s15, [r7]
 800125e:	783b      	ldrb	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <StartIMUTask+0x248>)
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	4b29      	ldr	r3, [pc, #164]	@ (800130c <StartIMUTask+0x238>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001314 <StartIMUTask+0x240>
 8001270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001274:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001318 <StartIMUTask+0x244>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001280:	edc7 7a00 	vstr	s15, [r7]
 8001284:	783b      	ldrb	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <StartIMUTask+0x248>)
 800128a:	705a      	strb	r2, [r3, #1]
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <StartIMUTask+0x234>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001314 <StartIMUTask+0x240>
 8001296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800129a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001318 <StartIMUTask+0x244>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a6:	edc7 7a00 	vstr	s15, [r7]
 80012aa:	783b      	ldrb	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <StartIMUTask+0x248>)
 80012b0:	709a      	strb	r2, [r3, #2]

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader_IMU_Mag, Magne, &TxMailbox)!= HAL_OK){
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <StartIMUTask+0x20c>)
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <StartIMUTask+0x248>)
 80012b6:	491a      	ldr	r1, [pc, #104]	@ (8001320 <StartIMUTask+0x24c>)
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <StartIMUTask+0x214>)
 80012ba:	f002 feee 	bl	800409a <HAL_CAN_AddTxMessage>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <StartIMUTask+0x1f4>
			  Error_Handler();																//Transmit CAN Message, if not succeed then error handle
 80012c4:	f001 fb0f 	bl	80028e6 <Error_Handler>
		}

	osDelay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f007 fab8 	bl	800883e <osDelay>
	readAccel(&ax, &ay, &az);
 80012ce:	e705      	b.n	80010dc <StartIMUTask+0x8>
 80012d0:	20000520 	.word	0x20000520
 80012d4:	2000051c 	.word	0x2000051c
 80012d8:	20000518 	.word	0x20000518
 80012dc:	2000053c 	.word	0x2000053c
 80012e0:	200005cc 	.word	0x200005cc
 80012e4:	2000057c 	.word	0x2000057c
 80012e8:	20000128 	.word	0x20000128
 80012ec:	2000052c 	.word	0x2000052c
 80012f0:	20000528 	.word	0x20000528
 80012f4:	20000524 	.word	0x20000524
 80012f8:	43750000 	.word	0x43750000
 80012fc:	3fe00000 	.word	0x3fe00000
 8001300:	20000540 	.word	0x20000540
 8001304:	20000594 	.word	0x20000594
 8001308:	20000538 	.word	0x20000538
 800130c:	20000534 	.word	0x20000534
 8001310:	20000530 	.word	0x20000530
 8001314:	43000000 	.word	0x43000000
 8001318:	42c80000 	.word	0x42c80000
 800131c:	20000544 	.word	0x20000544
 8001320:	200005ac 	.word	0x200005ac

08001324 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartIMUTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){					//Get CAN Msg
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800132e:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f002 ff81 	bl	800423a <HAL_CAN_GetRxMessage>
	receiveFlag++; if(receiveFlag==254) receiveFlag=0;
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2bfe      	cmp	r3, #254	@ 0xfe
 800134e:	d102      	bne.n	8001356 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200005c4 	.word	0x200005c4
 8001364:	20000548 	.word	0x20000548
 8001368:	200005d1 	.word	0x200005d1

0800136c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
		ADC_Value_Front_Filtered = Moving_Average_Compute(ADC_input[0], &FilterStruct_Front);
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_ADC_ConvCpltCallback+0x60>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4915      	ldr	r1, [pc, #84]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0x64>)
 800137a:	4618      	mov	r0, r3
 800137c:	f001 faba 	bl	80028f4 <Moving_Average_Compute>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001386:	801a      	strh	r2, [r3, #0]
		ADC_Value_Rear_Filtered  = Moving_Average_Compute(ADC_input[1], &FilterStruct_Rear);
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_ADC_ConvCpltCallback+0x60>)
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	4912      	ldr	r1, [pc, #72]	@ (80013d8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fab0 	bl	80028f4 <Moving_Average_Compute>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_ADC_ConvCpltCallback+0x70>)
 800139a:	801a      	strh	r2, [r3, #0]
		ADC_Value_Left_Filtered  = Moving_Average_Compute(ADC_input[2], &FilterStruct_Left);
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_ADC_ConvCpltCallback+0x60>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	490f      	ldr	r1, [pc, #60]	@ (80013e0 <HAL_ADC_ConvCpltCallback+0x74>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 faa6 	bl	80028f4 <Moving_Average_Compute>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <HAL_ADC_ConvCpltCallback+0x78>)
 80013ae:	801a      	strh	r2, [r3, #0]
		ADC_Value_Right_Filtered = Moving_Average_Compute(ADC_input[3], &FilterStruct_Right);
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_ADC_ConvCpltCallback+0x60>)
 80013b2:	88db      	ldrh	r3, [r3, #6]
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x7c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fa9c 	bl	80028f4 <Moving_Average_Compute>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x80>)
 80013c2:	801a      	strh	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000050c 	.word	0x2000050c
 80013d0:	20000158 	.word	0x20000158
 80013d4:	20000150 	.word	0x20000150
 80013d8:	20000188 	.word	0x20000188
 80013dc:	20000152 	.word	0x20000152
 80013e0:	200001b8 	.word	0x200001b8
 80013e4:	20000154 	.word	0x20000154
 80013e8:	200001e8 	.word	0x200001e8
 80013ec:	20000156 	.word	0x20000156

080013f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a26      	ldr	r2, [pc, #152]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800140c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a20      	ldr	r2, [pc, #128]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a1a      	ldr	r2, [pc, #104]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800144e:	2302      	movs	r3, #2
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001462:	f003 fcdb 	bl	8004e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001466:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 800146a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146c:	2303      	movs	r3, #3
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147e:	f003 fccd 	bl	8004e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001482:	233b      	movs	r3, #59	@ 0x3b
 8001484:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_GPIO_Init+0xbc>)
 8001496:	f003 fcc1 	bl	8004e1c <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48001400 	.word	0x48001400
 80014ac:	48000400 	.word	0x48000400

080014b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <MX_I2C1_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014bc:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <MX_I2C1_Init+0x7c>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014ec:	f003 fe08 	bl	8005100 <HAL_I2C_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f6:	f001 f9f6 	bl	80028e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <MX_I2C1_Init+0x74>)
 80014fe:	f004 fb4f 	bl	8005ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001508:	f001 f9ed 	bl	80028e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_I2C1_Init+0x74>)
 8001510:	f004 fb91 	bl	8005c36 <HAL_I2CEx_ConfigDigitalFilter>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800151a:	f001 f9e4 	bl	80028e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000047c 	.word	0x2000047c
 8001528:	40005400 	.word	0x40005400
 800152c:	00201d2b 	.word	0x00201d2b

08001530 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_I2C_MspInit+0x7c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d127      	bne.n	80015a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23c0      	movs	r3, #192	@ 0xc0
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156e:	2312      	movs	r3, #18
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157a:	2304      	movs	r3, #4
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <HAL_I2C_MspInit+0x84>)
 8001586:	f003 fc49 	bl	8004e1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400

080015b8 <init>:
float gRes, aRes, mRes;

struct IMUSettings settings;

void init()
{
 80015b8:	b480      	push	{r7}
 80015ba:	b091      	sub	sp, #68	@ 0x44
 80015bc:	af00      	add	r7, sp, #0
	int16_t gBiasRaw[3], aBiasRaw[3], mBiasRaw[3];
	float gBias[3], aBias[3], mBias[3];
	settings.gyro.enabled = 1;
 80015be:	4b57      	ldr	r3, [pc, #348]	@ (800171c <init+0x164>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	721a      	strb	r2, [r3, #8]
	settings.gyro.enableX = 1;
 80015c4:	4b55      	ldr	r3, [pc, #340]	@ (800171c <init+0x164>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	755a      	strb	r2, [r3, #21]
	settings.gyro.enableY = 1;
 80015ca:	4b54      	ldr	r3, [pc, #336]	@ (800171c <init+0x164>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	759a      	strb	r2, [r3, #22]
	settings.gyro.enableZ = 1;
 80015d0:	4b52      	ldr	r3, [pc, #328]	@ (800171c <init+0x164>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	75da      	strb	r2, [r3, #23]
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80015d6:	4b51      	ldr	r3, [pc, #324]	@ (800171c <init+0x164>)
 80015d8:	22f5      	movs	r2, #245	@ 0xf5
 80015da:	815a      	strh	r2, [r3, #10]
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80015dc:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <init+0x164>)
 80015de:	2206      	movs	r2, #6
 80015e0:	731a      	strb	r2, [r3, #12]
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80015e2:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <init+0x164>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	735a      	strb	r2, [r3, #13]
	settings.gyro.lowPowerEnable = 0;
 80015e8:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <init+0x164>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	739a      	strb	r2, [r3, #14]
	settings.gyro.HPFEnable = 0;
 80015ee:	4b4b      	ldr	r3, [pc, #300]	@ (800171c <init+0x164>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	73da      	strb	r2, [r3, #15]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80015f4:	4b49      	ldr	r3, [pc, #292]	@ (800171c <init+0x164>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	741a      	strb	r2, [r3, #16]
	settings.gyro.flipX = 0;
 80015fa:	4b48      	ldr	r3, [pc, #288]	@ (800171c <init+0x164>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	745a      	strb	r2, [r3, #17]
	settings.gyro.flipY = 0;
 8001600:	4b46      	ldr	r3, [pc, #280]	@ (800171c <init+0x164>)
 8001602:	2200      	movs	r2, #0
 8001604:	749a      	strb	r2, [r3, #18]
	settings.gyro.flipZ = 0;
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <init+0x164>)
 8001608:	2200      	movs	r2, #0
 800160a:	74da      	strb	r2, [r3, #19]
	settings.gyro.orientation = 0;
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <init+0x164>)
 800160e:	2200      	movs	r2, #0
 8001610:	751a      	strb	r2, [r3, #20]
	settings.gyro.latchInterrupt = 1;
 8001612:	4b42      	ldr	r3, [pc, #264]	@ (800171c <init+0x164>)
 8001614:	2201      	movs	r2, #1
 8001616:	761a      	strb	r2, [r3, #24]
	

	settings.accel.enabled = 1;
 8001618:	4b40      	ldr	r3, [pc, #256]	@ (800171c <init+0x164>)
 800161a:	2201      	movs	r2, #1
 800161c:	769a      	strb	r2, [r3, #26]
	settings.accel.enableX = 1;
 800161e:	4b3f      	ldr	r3, [pc, #252]	@ (800171c <init+0x164>)
 8001620:	2201      	movs	r2, #1
 8001622:	775a      	strb	r2, [r3, #29]
	settings.accel.enableY = 1;
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <init+0x164>)
 8001626:	2201      	movs	r2, #1
 8001628:	779a      	strb	r2, [r3, #30]
	settings.accel.enableZ = 1;
 800162a:	4b3c      	ldr	r3, [pc, #240]	@ (800171c <init+0x164>)
 800162c:	2201      	movs	r2, #1
 800162e:	77da      	strb	r2, [r3, #31]
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 8001630:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <init+0x164>)
 8001632:	2202      	movs	r2, #2
 8001634:	76da      	strb	r2, [r3, #27]
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 8001636:	4b39      	ldr	r3, [pc, #228]	@ (800171c <init+0x164>)
 8001638:	2206      	movs	r2, #6
 800163a:	771a      	strb	r2, [r3, #28]
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = -1;
 800163c:	4b37      	ldr	r3, [pc, #220]	@ (800171c <init+0x164>)
 800163e:	22ff      	movs	r2, #255	@ 0xff
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
	settings.accel.highResEnable = 0;
 8001644:	4b35      	ldr	r3, [pc, #212]	@ (800171c <init+0x164>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 800164c:	4b33      	ldr	r3, [pc, #204]	@ (800171c <init+0x164>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	
	settings.mag.enabled = 1;
 8001654:	4b31      	ldr	r3, [pc, #196]	@ (800171c <init+0x164>)
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 800165c:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <init+0x164>)
 800165e:	2204      	movs	r2, #4
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 8001664:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <init+0x164>)
 8001666:	2207      	movs	r2, #7
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	settings.mag.tempCompensationEnable = 0;
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <init+0x164>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <init+0x164>)
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	settings.mag.ZPerformance = 3;
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <init+0x164>)
 800167e:	2203      	movs	r2, #3
 8001680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	settings.mag.lowPowerEnable = 0;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <init+0x164>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <init+0x164>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	settings.temp.enabled = 1;
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <init+0x164>)
 8001696:	2201      	movs	r2, #1
 8001698:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	
	for (int i=0; i<3; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a0:	e02f      	b.n	8001702 <init+0x14a>
	{
		gBias[i] = 0;
 80016a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	3340      	adds	r3, #64	@ 0x40
 80016a8:	443b      	add	r3, r7
 80016aa:	3b28      	subs	r3, #40	@ 0x28
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
		aBias[i] = 0;
 80016b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	3340      	adds	r3, #64	@ 0x40
 80016b8:	443b      	add	r3, r7
 80016ba:	3b34      	subs	r3, #52	@ 0x34
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
		mBias[i] = 0;
 80016c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	3340      	adds	r3, #64	@ 0x40
 80016c8:	443b      	add	r3, r7
 80016ca:	3b40      	subs	r3, #64	@ 0x40
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
		gBiasRaw[i] = 0;
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	3340      	adds	r3, #64	@ 0x40
 80016d8:	443b      	add	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	f823 2c0c 	strh.w	r2, [r3, #-12]
		aBiasRaw[i] = 0;
 80016e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	3340      	adds	r3, #64	@ 0x40
 80016e6:	443b      	add	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	f823 2c14 	strh.w	r2, [r3, #-20]
		mBiasRaw[i] = 0;
 80016ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	3340      	adds	r3, #64	@ 0x40
 80016f4:	443b      	add	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i=0; i<3; i++)
 80016fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016fe:	3301      	adds	r3, #1
 8001700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001704:	2b02      	cmp	r3, #2
 8001706:	ddcc      	ble.n	80016a2 <init+0xea>
	}
	_autoCalc = 0;
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <init+0x168>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3744      	adds	r7, #68	@ 0x44
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200004e0 	.word	0x200004e0
 8001720:	200004d2 	.word	0x200004d2

08001724 <begin>:


uint16_t begin(uint8_t agAddress, uint8_t mAddress, I2C_HandleTypeDef *hi2c1)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	603a      	str	r2, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	460b      	mov	r3, r1
 8001732:	71bb      	strb	r3, [r7, #6]
	// Set device settings, they are used in many other places
	settings.device.commInterface = IMU_MODE_I2C;
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <begin+0x98>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
	settings.device.agAddress = agAddress;
 800173a:	4a20      	ldr	r2, [pc, #128]	@ (80017bc <begin+0x98>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	7053      	strb	r3, [r2, #1]
	settings.device.mAddress = mAddress;
 8001740:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <begin+0x98>)
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	7093      	strb	r3, [r2, #2]
	settings.device.hi2c1 = hi2c1;
 8001746:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <begin+0x98>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6053      	str	r3, [r2, #4]
	
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <begin+0x98>)
 800174e:	785a      	ldrb	r2, [r3, #1]
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <begin+0x9c>)
 8001752:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <begin+0x98>)
 8001756:	789a      	ldrb	r2, [r3, #2]
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <begin+0xa0>)
 800175a:	701a      	strb	r2, [r3, #0]
	
	init();
 800175c:	f7ff ff2c 	bl	80015b8 <init>
	
	constrainScales();
 8001760:	f000 fcb0 	bl	80020c4 <constrainScales>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 8001764:	f000 fbf0 	bl	8001f48 <calcgRes>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 8001768:	f000 fc64 	bl	8002034 <calcmRes>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 800176c:	f000 fc18 	bl	8001fa0 <calcaRes>
	// But if they forget, we could start the hardware here.
	// settings.device.i2c->begin();	// Initialize I2C library
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8001770:	200f      	movs	r0, #15
 8001772:	f000 fd91 	bl	8002298 <mReadByte>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 800177a:	200f      	movs	r0, #15
 800177c:	f000 fd38 	bl	80021f0 <xgReadByte>
 8001780:	4603      	mov	r3, r0
 8001782:	73bb      	strb	r3, [r7, #14]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	b21b      	sxth	r3, r3
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	81bb      	strh	r3, [r7, #12]
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	f646 023d 	movw	r2, #26685	@ 0x683d
 800179c:	4293      	cmp	r3, r2
 800179e:	d001      	beq.n	80017a4 <begin+0x80>
		return 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e006      	b.n	80017b2 <begin+0x8e>
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80017a4:	f000 f810 	bl	80017c8 <initGyro>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80017a8:	f000 f8aa 	bl	8001900 <initAccel>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80017ac:	f000 f932 	bl	8001a14 <initMag>

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80017b0:	89bb      	ldrh	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200004e0 	.word	0x200004e0
 80017c0:	200004d1 	.word	0x200004d1
 80017c4:	200004d0 	.word	0x200004d0

080017c8 <initGyro>:

void initGyro()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80017d2:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <initGyro+0x134>)
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <initGyro+0x1a>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80017da:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <initGyro+0x134>)
 80017dc:	7b1b      	ldrb	r3, [r3, #12]
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	71fb      	strb	r3, [r7, #7]
	}
	switch (settings.gyro.scale)
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <initGyro+0x134>)
 80017e4:	895b      	ldrh	r3, [r3, #10]
 80017e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017ea:	d003      	beq.n	80017f4 <initGyro+0x2c>
 80017ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017f0:	d005      	beq.n	80017fe <initGyro+0x36>
 80017f2:	e009      	b.n	8001808 <initGyro+0x40>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	71fb      	strb	r3, [r7, #7]
			break;
 80017fc:	e004      	b.n	8001808 <initGyro+0x40>
		case 2000:
			tempRegValue |= (0x3 << 3);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f043 0318 	orr.w	r3, r3, #24
 8001804:	71fb      	strb	r3, [r7, #7]
			break;
 8001806:	bf00      	nop
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8001808:	4b3c      	ldr	r3, [pc, #240]	@ (80018fc <initGyro+0x134>)
 800180a:	7b5b      	ldrb	r3, [r3, #13]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	b25a      	sxtb	r2, r3
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4313      	orrs	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	71fb      	strb	r3, [r7, #7]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4619      	mov	r1, r3
 8001822:	2010      	movs	r0, #16
 8001824:	f000 fc94 	bl	8002150 <xgWriteByte>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 8001828:	2100      	movs	r1, #0
 800182a:	2011      	movs	r0, #17
 800182c:	f000 fc90 	bl	8002150 <xgWriteByte>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8001830:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <initGyro+0x134>)
 8001832:	7b9b      	ldrb	r3, [r3, #14]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <initGyro+0x74>
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	e000      	b.n	800183e <initGyro+0x76>
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.HPFEnable)
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <initGyro+0x134>)
 8001842:	7bdb      	ldrb	r3, [r3, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <initGyro+0x96>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 8001848:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <initGyro+0x134>)
 800184a:	7c1b      	ldrb	r3, [r3, #16]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	b2da      	uxtb	r2, r3
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4313      	orrs	r3, r2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800185c:	71fb      	strb	r3, [r7, #7]
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4619      	mov	r1, r3
 8001862:	2012      	movs	r0, #18
 8001864:	f000 fc74 	bl	8002150 <xgWriteByte>
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 800186c:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <initGyro+0x134>)
 800186e:	7ddb      	ldrb	r3, [r3, #23]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <initGyro+0xb4>
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <initGyro+0x134>)
 800187e:	7d9b      	ldrb	r3, [r3, #22]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <initGyro+0xc4>
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <initGyro+0x134>)
 800188e:	7d5b      	ldrb	r3, [r3, #21]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <initGyro+0xd4>
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <initGyro+0x134>)
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <initGyro+0xe4>
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	71fb      	strb	r3, [r7, #7]
	xgWriteByte(CTRL_REG4, tempRegValue);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4619      	mov	r1, r3
 80018b0:	201e      	movs	r0, #30
 80018b2:	f000 fc4d 	bl	8002150 <xgWriteByte>
	
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <initGyro+0x134>)
 80018bc:	7c5b      	ldrb	r3, [r3, #17]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <initGyro+0x102>
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <initGyro+0x134>)
 80018cc:	7c9b      	ldrb	r3, [r3, #18]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <initGyro+0x112>
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	71fb      	strb	r3, [r7, #7]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <initGyro+0x134>)
 80018dc:	7cdb      	ldrb	r3, [r3, #19]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <initGyro+0x122>
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	71fb      	strb	r3, [r7, #7]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4619      	mov	r1, r3
 80018ee:	2013      	movs	r0, #19
 80018f0:	f000 fc2e 	bl	8002150 <xgWriteByte>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200004e0 	.word	0x200004e0

08001900 <initAccel>:

void initAccel()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 800190a:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <initAccel+0x110>)
 800190c:	7fdb      	ldrb	r3, [r3, #31]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <initAccel+0x1a>
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	71fb      	strb	r3, [r7, #7]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <initAccel+0x110>)
 800191c:	7f9b      	ldrb	r3, [r3, #30]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <initAccel+0x2a>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	71fb      	strb	r3, [r7, #7]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 800192a:	4b39      	ldr	r3, [pc, #228]	@ (8001a10 <initAccel+0x110>)
 800192c:	7f5b      	ldrb	r3, [r3, #29]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <initAccel+0x3a>
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	71fb      	strb	r3, [r7, #7]
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4619      	mov	r1, r3
 800193e:	201f      	movs	r0, #31
 8001940:	f000 fc06 	bl	8002150 <xgWriteByte>
	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
	// ODR_XL[2:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	71fb      	strb	r3, [r7, #7]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 8001948:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <initAccel+0x110>)
 800194a:	7e9b      	ldrb	r3, [r3, #26]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <initAccel+0x64>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 8001950:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <initAccel+0x110>)
 8001952:	7f1b      	ldrb	r3, [r3, #28]
 8001954:	b25b      	sxtb	r3, r3
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	b25a      	sxtb	r2, r3
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4313      	orrs	r3, r2
 8001960:	b25b      	sxtb	r3, r3
 8001962:	71fb      	strb	r3, [r7, #7]
	}
	switch (settings.accel.scale)
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <initAccel+0x110>)
 8001966:	7edb      	ldrb	r3, [r3, #27]
 8001968:	2b10      	cmp	r3, #16
 800196a:	d010      	beq.n	800198e <initAccel+0x8e>
 800196c:	2b10      	cmp	r3, #16
 800196e:	dc13      	bgt.n	8001998 <initAccel+0x98>
 8001970:	2b04      	cmp	r3, #4
 8001972:	d002      	beq.n	800197a <initAccel+0x7a>
 8001974:	2b08      	cmp	r3, #8
 8001976:	d005      	beq.n	8001984 <initAccel+0x84>
 8001978:	e00e      	b.n	8001998 <initAccel+0x98>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	71fb      	strb	r3, [r7, #7]
			break;
 8001982:	e009      	b.n	8001998 <initAccel+0x98>
		case 8:
			tempRegValue |= (0x3 << 3);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f043 0318 	orr.w	r3, r3, #24
 800198a:	71fb      	strb	r3, [r7, #7]
			break;
 800198c:	e004      	b.n	8001998 <initAccel+0x98>
		case 16:
			tempRegValue |= (0x1 << 3);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	71fb      	strb	r3, [r7, #7]
			break;
 8001996:	bf00      	nop
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <initAccel+0x110>)
 800199a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0e      	blt.n	80019c0 <initAccel+0xc0>
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	71fb      	strb	r3, [r7, #7]
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <initAccel+0x110>)
 80019ac:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	71fb      	strb	r3, [r7, #7]
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4619      	mov	r1, r3
 80019c4:	2020      	movs	r0, #32
 80019c6:	f000 fbc3 	bl	8002150 <xgWriteByte>
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
	if (settings.accel.highResEnable)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <initAccel+0x110>)
 80019d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d011      	beq.n	80019fc <initAccel+0xfc>
	{
		tempRegValue |= (1<<7); // Set HR bit
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019de:	71fb      	strb	r3, [r7, #7]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <initAccel+0x110>)
 80019e2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	71fb      	strb	r3, [r7, #7]
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4619      	mov	r1, r3
 8001a00:	2021      	movs	r0, #33	@ 0x21
 8001a02:	f000 fba5 	bl	8002150 <xgWriteByte>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200004e0 	.word	0x200004e0

08001a14 <initMag>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void initMag()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <initMag+0x110>)
 8001a20:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <initMag+0x1c>
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a2e:	71fb      	strb	r3, [r7, #7]
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
 8001a30:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <initMag+0x110>)
 8001a32:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001a40:	b25a      	sxtb	r2, r3
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	71fb      	strb	r3, [r7, #7]
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8001a4c:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <initMag+0x110>)
 8001a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	71fb      	strb	r3, [r7, #7]
	mWriteByte(CTRL_REG1_M, tempRegValue);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2020      	movs	r0, #32
 8001a6e:	f000 fb97 	bl	80021a0 <mWriteByte>
	// CTRL_REG2_M (Default value 0x00)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
	switch (settings.mag.scale)
 8001a76:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <initMag+0x110>)
 8001a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d010      	beq.n	8001aa2 <initMag+0x8e>
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	dc13      	bgt.n	8001aac <initMag+0x98>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d002      	beq.n	8001a8e <initMag+0x7a>
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d005      	beq.n	8001a98 <initMag+0x84>
 8001a8c:	e00e      	b.n	8001aac <initMag+0x98>
	{
	case 8:
		tempRegValue |= (0x1 << 5);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f043 0320 	orr.w	r3, r3, #32
 8001a94:	71fb      	strb	r3, [r7, #7]
		break;
 8001a96:	e009      	b.n	8001aac <initMag+0x98>
	case 12:
		tempRegValue |= (0x2 << 5);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a9e:	71fb      	strb	r3, [r7, #7]
		break;
 8001aa0:	e004      	b.n	8001aac <initMag+0x98>
	case 16:
		tempRegValue |= (0x3 << 5);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001aa8:	71fb      	strb	r3, [r7, #7]
		break;
 8001aaa:	bf00      	nop
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2021      	movs	r0, #33	@ 0x21
 8001ab2:	f000 fb75 	bl	80021a0 <mWriteByte>
	// LP - Low-power mode cofiguration (1:enable)
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <initMag+0x110>)
 8001abc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <initMag+0xb8>
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f043 0320 	orr.w	r3, r3, #32
 8001aca:	71fb      	strb	r3, [r7, #7]
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <initMag+0x110>)
 8001ace:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	71fb      	strb	r3, [r7, #7]
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	2022      	movs	r0, #34	@ 0x22
 8001aea:	f000 fb59 	bl	80021a0 <mWriteByte>
	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
	// OMZ[1:0] - Z-axis operative mode selection
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <initMag+0x110>)
 8001af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	71fb      	strb	r3, [r7, #7]
	mWriteByte(CTRL_REG4_M, tempRegValue);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4619      	mov	r1, r3
 8001b06:	2023      	movs	r0, #35	@ 0x23
 8001b08:	f000 fb4a 	bl	80021a0 <mWriteByte>
	
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4619      	mov	r1, r3
 8001b14:	2024      	movs	r0, #36	@ 0x24
 8001b16:	f000 fb43 	bl	80021a0 <mWriteByte>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200004e0 	.word	0x200004e0

08001b28 <readAccel>:
	
	return ((status & (1<<axis)) >> axis);
}

void readAccel(float *x, float *y, float *z)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]

	int16_t ax, ay, az;
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	if ( xgReadBytes(OUT_X_L_XL, temp, 6) == 6 ) // Read 6 bytes, beginning at OUT_X_L_XL
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2206      	movs	r2, #6
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2028      	movs	r0, #40	@ 0x28
 8001b3e:	f000 fb7f 	bl	8002240 <xgReadBytes>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b06      	cmp	r3, #6
 8001b46:	d117      	bne.n	8001b78 <readAccel+0x50>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8001b48:	7d7b      	ldrb	r3, [r7, #21]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	7d3b      	ldrb	r3, [r7, #20]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	83fb      	strh	r3, [r7, #30]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	83bb      	strh	r3, [r7, #28]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8001b68:	7e7b      	ldrb	r3, [r7, #25]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7e3b      	ldrb	r3, [r7, #24]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	837b      	strh	r3, [r7, #26]
	}
	*x = calcAccel(ax);
 8001b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	f000 f8f0 	bl	8001d6c <calcAccel>
 8001b8c:	eef0 7a40 	vmov.f32	s15, s0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	edc3 7a00 	vstr	s15, [r3]
	*y = calcAccel(ay);
 8001b96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	f000 f8e1 	bl	8001d6c <calcAccel>
 8001baa:	eef0 7a40 	vmov.f32	s15, s0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	*z = calcAccel(az);
 8001bb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc4:	f000 f8d2 	bl	8001d6c <calcAccel>
 8001bc8:	eef0 7a40 	vmov.f32	s15, s0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edc3 7a00 	vstr	s15, [r3]

}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <readMag>:



void readMag(float *x, float *y, float *z)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b088      	sub	sp, #32
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
	int16_t mx, my, mz;
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	if ( mReadBytes(OUT_X_L_M, temp, 6) == 6) // Read 6 bytes, beginning at OUT_X_L_M
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	2206      	movs	r2, #6
 8001bec:	4619      	mov	r1, r3
 8001bee:	2028      	movs	r0, #40	@ 0x28
 8001bf0:	f000 fb7a 	bl	80022e8 <mReadBytes>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d117      	bne.n	8001c2a <readMag+0x50>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 8001bfa:	7d7b      	ldrb	r3, [r7, #21]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	7d3b      	ldrb	r3, [r7, #20]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	83fb      	strh	r3, [r7, #30]
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	7dbb      	ldrb	r3, [r7, #22]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	83bb      	strh	r3, [r7, #28]
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 8001c1a:	7e7b      	ldrb	r3, [r7, #25]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7e3b      	ldrb	r3, [r7, #24]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	837b      	strh	r3, [r7, #26]
	}
	*x = calcMag(mx);
 8001c2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	f000 f8ad 	bl	8001d98 <calcMag>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	edc3 7a00 	vstr	s15, [r3]
	*y = calcMag(my);
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f000 f89e 	bl	8001d98 <calcMag>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	*z = calcMag(mz);
 8001c66:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	f000 f88f 	bl	8001d98 <calcMag>
 8001c7a:	eef0 7a40 	vmov.f32	s15, s0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	edc3 7a00 	vstr	s15, [r3]
}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <readGyro>:
	}
	return temperature;
}

void readGyro(float *x, float *y, float *z)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int16_t gx, gy, gz;
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	if ( xgReadBytes(OUT_X_L_G, temp, 6) == 6) // Read 6 bytes, beginning at OUT_X_L_G
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2018      	movs	r0, #24
 8001ca2:	f000 facd 	bl	8002240 <xgReadBytes>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b06      	cmp	r3, #6
 8001caa:	d117      	bne.n	8001cdc <readGyro+0x50>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8001cac:	7d7b      	ldrb	r3, [r7, #21]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	7d3b      	ldrb	r3, [r7, #20]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	83fb      	strh	r3, [r7, #30]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	7dbb      	ldrb	r3, [r7, #22]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	83bb      	strh	r3, [r7, #28]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8001ccc:	7e7b      	ldrb	r3, [r7, #25]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7e3b      	ldrb	r3, [r7, #24]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	837b      	strh	r3, [r7, #26]
	}
	*x = calcGyro(gx);
 8001cdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	f000 f828 	bl	8001d40 <calcGyro>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	*y = calcGyro(gy);
 8001cfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0a:	f000 f819 	bl	8001d40 <calcGyro>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	edc3 7a00 	vstr	s15, [r3]
	*z = calcGyro(gz);
 8001d18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	f000 f80a 	bl	8001d40 <calcGyro>
 8001d2c:	eef0 7a40 	vmov.f32	s15, s0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edc3 7a00 	vstr	s15, [r3]
}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <calcGyro>:



float calcGyro(float gyro)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	ed87 0a01 	vstr	s0, [r7, #4]
	return gyro*gRes;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <calcGyro+0x28>)
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200004d4 	.word	0x200004d4

08001d6c <calcAccel>:

float calcAccel(float accel)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	ed87 0a01 	vstr	s0, [r7, #4]
	return accel*aRes;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <calcAccel+0x28>)
 8001d78:	ed93 7a00 	vldr	s14, [r3]
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200004d8 	.word	0x200004d8

08001d98 <calcMag>:

float calcMag(float mag)
{	
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	ed87 0a01 	vstr	s0, [r7, #4]
	return mag * mRes;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <calcMag+0x28>)
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200004dc 	.word	0x200004dc

08001dc4 <setGyroScale>:

void setGyroScale(uint16_t gScl)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
	// Read current value of CTRL_REG1_G:
	uint8_t ctrl1RegValue = xgReadByte(CTRL_REG1_G);
 8001dce:	2010      	movs	r0, #16
 8001dd0:	f000 fa0e 	bl	80021f0 <xgReadByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]
	// Mask out scale bits (3 & 4):
	ctrl1RegValue &= 0xE7;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	f023 0318 	bic.w	r3, r3, #24
 8001dde:	73fb      	strb	r3, [r7, #15]
	switch (gScl)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001de6:	d003      	beq.n	8001df0 <setGyroScale+0x2c>
 8001de8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001dec:	d009      	beq.n	8001e02 <setGyroScale+0x3e>
 8001dee:	e011      	b.n	8001e14 <setGyroScale+0x50>
	{
		case 500:
			ctrl1RegValue |= (0x1 << 3);
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	73fb      	strb	r3, [r7, #15]
			settings.gyro.scale = 500;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <setGyroScale+0x70>)
 8001dfa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001dfe:	815a      	strh	r2, [r3, #10]
			break;
 8001e00:	e00c      	b.n	8001e1c <setGyroScale+0x58>
		case 2000:
			ctrl1RegValue |= (0x3 << 3);
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	f043 0318 	orr.w	r3, r3, #24
 8001e08:	73fb      	strb	r3, [r7, #15]
			settings.gyro.scale = 2000;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <setGyroScale+0x70>)
 8001e0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e10:	815a      	strh	r2, [r3, #10]
			break;
 8001e12:	e003      	b.n	8001e1c <setGyroScale+0x58>
		default: // Otherwise we'll set it to 245 dps (0x0 << 4)
			settings.gyro.scale = 245;
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <setGyroScale+0x70>)
 8001e16:	22f5      	movs	r2, #245	@ 0xf5
 8001e18:	815a      	strh	r2, [r3, #10]
			break;
 8001e1a:	bf00      	nop
	}
	xgWriteByte(CTRL_REG1_G, ctrl1RegValue);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2010      	movs	r0, #16
 8001e22:	f000 f995 	bl	8002150 <xgWriteByte>
	
	calcgRes();	
 8001e26:	f000 f88f 	bl	8001f48 <calcgRes>
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004e0 	.word	0x200004e0

08001e38 <setAccelScale>:

void setAccelScale(uint8_t aScl)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	// We need to preserve the other bytes in CTRL_REG6_XL. So, first read it:
	uint8_t tempRegValue = xgReadByte(CTRL_REG6_XL);
 8001e42:	2020      	movs	r0, #32
 8001e44:	f000 f9d4 	bl	80021f0 <xgReadByte>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
	// Mask out accel scale bits:
	tempRegValue &= 0xE7;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	f023 0318 	bic.w	r3, r3, #24
 8001e52:	73fb      	strb	r3, [r7, #15]
	
	switch (aScl)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d016      	beq.n	8001e88 <setAccelScale+0x50>
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	dc1c      	bgt.n	8001e98 <setAccelScale+0x60>
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d002      	beq.n	8001e68 <setAccelScale+0x30>
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d008      	beq.n	8001e78 <setAccelScale+0x40>
 8001e66:	e017      	b.n	8001e98 <setAccelScale+0x60>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	73fb      	strb	r3, [r7, #15]
			settings.accel.scale = 4;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <setAccelScale+0x80>)
 8001e72:	2204      	movs	r2, #4
 8001e74:	76da      	strb	r2, [r3, #27]
			break;
 8001e76:	e013      	b.n	8001ea0 <setAccelScale+0x68>
		case 8:
			tempRegValue |= (0x3 << 3);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f043 0318 	orr.w	r3, r3, #24
 8001e7e:	73fb      	strb	r3, [r7, #15]
			settings.accel.scale = 8;
 8001e80:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <setAccelScale+0x80>)
 8001e82:	2208      	movs	r2, #8
 8001e84:	76da      	strb	r2, [r3, #27]
			break;
 8001e86:	e00b      	b.n	8001ea0 <setAccelScale+0x68>
		case 16:
			tempRegValue |= (0x1 << 3);
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	73fb      	strb	r3, [r7, #15]
			settings.accel.scale = 16;
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <setAccelScale+0x80>)
 8001e92:	2210      	movs	r2, #16
 8001e94:	76da      	strb	r2, [r3, #27]
			break;
 8001e96:	e003      	b.n	8001ea0 <setAccelScale+0x68>
		default: // Otherwise it'll be set to 2g (0x0 << 3)
			settings.accel.scale = 2;
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <setAccelScale+0x80>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	76da      	strb	r2, [r3, #27]
			break;
 8001e9e:	bf00      	nop
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2020      	movs	r0, #32
 8001ea6:	f000 f953 	bl	8002150 <xgWriteByte>
	
	// Then calculate a new aRes, which relies on aScale being set correctly:
	calcaRes();
 8001eaa:	f000 f879 	bl	8001fa0 <calcaRes>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004e0 	.word	0x200004e0

08001ebc <setMagScale>:

void setMagScale(uint8_t mScl)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	// We need to preserve the other bytes in CTRL_REG6_XM. So, first read it:
	uint8_t temp = mReadByte(CTRL_REG2_M);
 8001ec6:	2021      	movs	r0, #33	@ 0x21
 8001ec8:	f000 f9e6 	bl	8002298 <mReadByte>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
	// Then mask out the mag scale bits:
	temp &= 0xFF^(0x3 << 5);
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001ed6:	73fb      	strb	r3, [r7, #15]
	
	switch (mScl)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d018      	beq.n	8001f10 <setMagScale+0x54>
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	dc1f      	bgt.n	8001f22 <setMagScale+0x66>
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d002      	beq.n	8001eec <setMagScale+0x30>
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d009      	beq.n	8001efe <setMagScale+0x42>
 8001eea:	e01a      	b.n	8001f22 <setMagScale+0x66>
	{
	case 8:
		temp |= (0x1 << 5);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	73fb      	strb	r3, [r7, #15]
		settings.mag.scale = 8;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <setMagScale+0x88>)
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		break;
 8001efc:	e016      	b.n	8001f2c <setMagScale+0x70>
	case 12:
		temp |= (0x2 << 5);
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f04:	73fb      	strb	r3, [r7, #15]
		settings.mag.scale = 12;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <setMagScale+0x88>)
 8001f08:	220c      	movs	r2, #12
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		break;
 8001f0e:	e00d      	b.n	8001f2c <setMagScale+0x70>
	case 16:
		temp |= (0x3 << 5);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f16:	73fb      	strb	r3, [r7, #15]
		settings.mag.scale = 16;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <setMagScale+0x88>)
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		break;
 8001f20:	e004      	b.n	8001f2c <setMagScale+0x70>
	default: // Otherwise we'll default to 4 gauss (00)
		settings.mag.scale = 4;
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <setMagScale+0x88>)
 8001f24:	2204      	movs	r2, #4
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		break;
 8001f2a:	bf00      	nop
	}	
	
	// And write the new register value back into CTRL_REG6_XM:
	mWriteByte(CTRL_REG2_M, temp);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	2021      	movs	r0, #33	@ 0x21
 8001f32:	f000 f935 	bl	80021a0 <mWriteByte>
	
	// We've updated the sensor, but we also need to update our class variables
	// First update mScale:
	//mScale = mScl;
	// Then calculate a new mRes, which relies on mScale being set correctly:
	calcmRes();
 8001f36:	f000 f87d 	bl	8002034 <calcmRes>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200004e0 	.word	0x200004e0

08001f48 <calcgRes>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void calcgRes()
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	switch (settings.gyro.scale)
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <calcgRes+0x44>)
 8001f4e:	895b      	ldrh	r3, [r3, #10]
 8001f50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001f54:	d010      	beq.n	8001f78 <calcgRes+0x30>
 8001f56:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001f5a:	dc11      	bgt.n	8001f80 <calcgRes+0x38>
 8001f5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8001f5e:	d003      	beq.n	8001f68 <calcgRes+0x20>
 8001f60:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f64:	d004      	beq.n	8001f70 <calcgRes+0x28>
		break;
	case 2000:
		gRes = SENSITIVITY_GYROSCOPE_2000;
		break;
	default:
		break;
 8001f66:	e00b      	b.n	8001f80 <calcgRes+0x38>
		gRes = SENSITIVITY_GYROSCOPE_245;
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <calcgRes+0x48>)
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <calcgRes+0x4c>)
 8001f6c:	601a      	str	r2, [r3, #0]
		break;
 8001f6e:	e008      	b.n	8001f82 <calcgRes+0x3a>
		gRes = SENSITIVITY_GYROSCOPE_500;
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <calcgRes+0x48>)
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <calcgRes+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
		break;
 8001f76:	e004      	b.n	8001f82 <calcgRes+0x3a>
		gRes = SENSITIVITY_GYROSCOPE_2000;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <calcgRes+0x48>)
 8001f7a:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <calcgRes+0x54>)
 8001f7c:	601a      	str	r2, [r3, #0]
		break;
 8001f7e:	e000      	b.n	8001f82 <calcgRes+0x3a>
		break;
 8001f80:	bf00      	nop
	}
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	200004e0 	.word	0x200004e0
 8001f90:	200004d4 	.word	0x200004d4
 8001f94:	3c0f5c29 	.word	0x3c0f5c29
 8001f98:	3c8f5c29 	.word	0x3c8f5c29
 8001f9c:	3d8f5c29 	.word	0x3d8f5c29

08001fa0 <calcaRes>:

void calcaRes()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	switch (settings.accel.scale)
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <calcaRes+0x7c>)
 8001fa6:	7edb      	ldrb	r3, [r3, #27]
 8001fa8:	3b02      	subs	r3, #2
 8001faa:	2b0e      	cmp	r3, #14
 8001fac:	d830      	bhi.n	8002010 <calcaRes+0x70>
 8001fae:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <calcaRes+0x14>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001ff1 	.word	0x08001ff1
 8001fb8:	08002011 	.word	0x08002011
 8001fbc:	08001ff9 	.word	0x08001ff9
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002011 	.word	0x08002011
 8001fc8:	08002011 	.word	0x08002011
 8001fcc:	08002001 	.word	0x08002001
 8001fd0:	08002011 	.word	0x08002011
 8001fd4:	08002011 	.word	0x08002011
 8001fd8:	08002011 	.word	0x08002011
 8001fdc:	08002011 	.word	0x08002011
 8001fe0:	08002011 	.word	0x08002011
 8001fe4:	08002011 	.word	0x08002011
 8001fe8:	08002011 	.word	0x08002011
 8001fec:	08002009 	.word	0x08002009
	{
	case 2:
		aRes = SENSITIVITY_ACCELEROMETER_2;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <calcaRes+0x80>)
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <calcaRes+0x84>)
 8001ff4:	601a      	str	r2, [r3, #0]
		break;
 8001ff6:	e00c      	b.n	8002012 <calcaRes+0x72>
	case 4:
		aRes = SENSITIVITY_ACCELEROMETER_4;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <calcaRes+0x80>)
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <calcaRes+0x88>)
 8001ffc:	601a      	str	r2, [r3, #0]
		break;
 8001ffe:	e008      	b.n	8002012 <calcaRes+0x72>
	case 8:
		aRes = SENSITIVITY_ACCELEROMETER_8;
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <calcaRes+0x80>)
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <calcaRes+0x8c>)
 8002004:	601a      	str	r2, [r3, #0]
		break;
 8002006:	e004      	b.n	8002012 <calcaRes+0x72>
	case 16:
		aRes = SENSITIVITY_ACCELEROMETER_16;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <calcaRes+0x80>)
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <calcaRes+0x90>)
 800200c:	601a      	str	r2, [r3, #0]
		break;
 800200e:	e000      	b.n	8002012 <calcaRes+0x72>
	default:
		break;
 8002010:	bf00      	nop
	}
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	200004e0 	.word	0x200004e0
 8002020:	200004d8 	.word	0x200004d8
 8002024:	387fda40 	.word	0x387fda40
 8002028:	38ffda40 	.word	0x38ffda40
 800202c:	397fda40 	.word	0x397fda40
 8002030:	3a3fe3b0 	.word	0x3a3fe3b0

08002034 <calcmRes>:

void calcmRes()
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	switch (settings.mag.scale)
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <calcmRes+0x78>)
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203e:	3b04      	subs	r3, #4
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d82d      	bhi.n	80020a0 <calcmRes+0x6c>
 8002044:	a201      	add	r2, pc, #4	@ (adr r2, 800204c <calcmRes+0x18>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	08002081 	.word	0x08002081
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020a1 	.word	0x080020a1
 8002058:	080020a1 	.word	0x080020a1
 800205c:	08002089 	.word	0x08002089
 8002060:	080020a1 	.word	0x080020a1
 8002064:	080020a1 	.word	0x080020a1
 8002068:	080020a1 	.word	0x080020a1
 800206c:	08002091 	.word	0x08002091
 8002070:	080020a1 	.word	0x080020a1
 8002074:	080020a1 	.word	0x080020a1
 8002078:	080020a1 	.word	0x080020a1
 800207c:	08002099 	.word	0x08002099
	{
	case 4:
		mRes = SENSITIVITY_MAGNETOMETER_4;
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <calcmRes+0x7c>)
 8002082:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <calcmRes+0x80>)
 8002084:	601a      	str	r2, [r3, #0]
		break;
 8002086:	e00b      	b.n	80020a0 <calcmRes+0x6c>
	case 8:
		mRes = SENSITIVITY_MAGNETOMETER_8;
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <calcmRes+0x7c>)
 800208a:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <calcmRes+0x84>)
 800208c:	601a      	str	r2, [r3, #0]
		break;
 800208e:	e007      	b.n	80020a0 <calcmRes+0x6c>
	case 12:
		mRes = SENSITIVITY_MAGNETOMETER_12;
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <calcmRes+0x7c>)
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <calcmRes+0x88>)
 8002094:	601a      	str	r2, [r3, #0]
		break;
 8002096:	e003      	b.n	80020a0 <calcmRes+0x6c>
	case 16:
		mRes = SENSITIVITY_MAGNETOMETER_16;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <calcmRes+0x7c>)
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <calcmRes+0x8c>)
 800209c:	601a      	str	r2, [r3, #0]
		break;
 800209e:	bf00      	nop
	}	
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200004e0 	.word	0x200004e0
 80020b0:	200004dc 	.word	0x200004dc
 80020b4:	3912ccf7 	.word	0x3912ccf7
 80020b8:	39980b24 	.word	0x39980b24
 80020bc:	39e1719f 	.word	0x39e1719f
 80020c0:	3a180b24 	.word	0x3a180b24

080020c4 <constrainScales>:
{
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void constrainScales()
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80020c8:	4b20      	ldr	r3, [pc, #128]	@ (800214c <constrainScales+0x88>)
 80020ca:	895b      	ldrh	r3, [r3, #10]
 80020cc:	2bf5      	cmp	r3, #245	@ 0xf5
 80020ce:	d00c      	beq.n	80020ea <constrainScales+0x26>
 80020d0:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <constrainScales+0x88>)
 80020d2:	895b      	ldrh	r3, [r3, #10]
 80020d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020d8:	d007      	beq.n	80020ea <constrainScales+0x26>
		(settings.gyro.scale != 2000))
 80020da:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <constrainScales+0x88>)
 80020dc:	895b      	ldrh	r3, [r3, #10]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80020de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80020e2:	d002      	beq.n	80020ea <constrainScales+0x26>
	{
		settings.gyro.scale = 245;
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <constrainScales+0x88>)
 80020e6:	22f5      	movs	r2, #245	@ 0xf5
 80020e8:	815a      	strh	r2, [r3, #10]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <constrainScales+0x88>)
 80020ec:	7edb      	ldrb	r3, [r3, #27]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d00e      	beq.n	8002110 <constrainScales+0x4c>
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <constrainScales+0x88>)
 80020f4:	7edb      	ldrb	r3, [r3, #27]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d00a      	beq.n	8002110 <constrainScales+0x4c>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <constrainScales+0x88>)
 80020fc:	7edb      	ldrb	r3, [r3, #27]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d006      	beq.n	8002110 <constrainScales+0x4c>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <constrainScales+0x88>)
 8002104:	7edb      	ldrb	r3, [r3, #27]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d002      	beq.n	8002110 <constrainScales+0x4c>
	{
		settings.accel.scale = 2;
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <constrainScales+0x88>)
 800210c:	2202      	movs	r2, #2
 800210e:	76da      	strb	r2, [r3, #27]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <constrainScales+0x88>)
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002116:	2b04      	cmp	r3, #4
 8002118:	d012      	beq.n	8002140 <constrainScales+0x7c>
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <constrainScales+0x88>)
 800211c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00d      	beq.n	8002140 <constrainScales+0x7c>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <constrainScales+0x88>)
 8002126:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d008      	beq.n	8002140 <constrainScales+0x7c>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <constrainScales+0x88>)
 8002130:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002134:	2b10      	cmp	r3, #16
 8002136:	d003      	beq.n	8002140 <constrainScales+0x7c>
	{
		settings.mag.scale = 4;
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <constrainScales+0x88>)
 800213a:	2204      	movs	r2, #4
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200004e0 	.word	0x200004e0

08002150 <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	71bb      	strb	r3, [r7, #6]
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <xgWriteByte+0x48>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <xgWriteByte+0x28>
		I2CwriteByte(_xgAddress, subAddress, data);
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <xgWriteByte+0x4c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	79ba      	ldrb	r2, [r7, #6]
 800216e:	79f9      	ldrb	r1, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f915 	bl	80023a0 <I2CwriteByte>
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8002176:	e00a      	b.n	800218e <xgWriteByte+0x3e>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <xgWriteByte+0x48>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <xgWriteByte+0x3e>
		SPIwriteByte(_xgAddress, subAddress, data);
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <xgWriteByte+0x4c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	79ba      	ldrb	r2, [r7, #6]
 8002186:	79f9      	ldrb	r1, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f8d9 	bl	8002340 <SPIwriteByte>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200004e0 	.word	0x200004e0
 800219c:	200004d1 	.word	0x200004d1

080021a0 <mWriteByte>:

void mWriteByte(uint8_t subAddress, uint8_t data)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80021b0:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <mWriteByte+0x48>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <mWriteByte+0x28>
		I2CwriteByte(_mAddress, subAddress, data);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <mWriteByte+0x4c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	79ba      	ldrb	r2, [r7, #6]
 80021be:	79f9      	ldrb	r1, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f8ed 	bl	80023a0 <I2CwriteByte>
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_mAddress, subAddress, data);
}
 80021c6:	e00a      	b.n	80021de <mWriteByte+0x3e>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <mWriteByte+0x48>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <mWriteByte+0x3e>
		SPIwriteByte(_mAddress, subAddress, data);
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <mWriteByte+0x4c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	79ba      	ldrb	r2, [r7, #6]
 80021d6:	79f9      	ldrb	r1, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f8b1 	bl	8002340 <SPIwriteByte>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200004e0 	.word	0x200004e0
 80021ec:	200004d0 	.word	0x200004d0

080021f0 <xgReadByte>:

uint8_t xgReadByte(uint8_t subAddress)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <xgReadByte+0x48>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <xgReadByte+0x24>
		return I2CreadByte(_xgAddress, subAddress);
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <xgReadByte+0x4c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	79fa      	ldrb	r2, [r7, #7]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8e8 	bl	80023e0 <I2CreadByte>
 8002210:	4603      	mov	r3, r0
 8002212:	e00d      	b.n	8002230 <xgReadByte+0x40>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <xgReadByte+0x48>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d108      	bne.n	800222e <xgReadByte+0x3e>
		return SPIreadByte(_xgAddress, subAddress);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <xgReadByte+0x4c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f89a 	bl	800235e <SPIreadByte>
 800222a:	4603      	mov	r3, r0
 800222c:	e000      	b.n	8002230 <xgReadByte+0x40>
	return -1;
 800222e:	23ff      	movs	r3, #255	@ 0xff
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200004e0 	.word	0x200004e0
 800223c:	200004d1 	.word	0x200004d1

08002240 <xgReadBytes>:

uint8_t xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <xgReadBytes+0x50>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <xgReadBytes+0x2a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <xgReadBytes+0x54>)
 800225a:	7818      	ldrb	r0, [r3, #0]
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	79f9      	ldrb	r1, [r7, #7]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	f000 f8e9 	bl	8002438 <I2CreadBytes>
 8002266:	4603      	mov	r3, r0
 8002268:	e00d      	b.n	8002286 <xgReadBytes+0x46>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <xgReadBytes+0x50>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <xgReadBytes+0x44>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <xgReadBytes+0x54>)
 8002274:	7818      	ldrb	r0, [r3, #0]
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	79f9      	ldrb	r1, [r7, #7]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	f000 f87e 	bl	800237c <SPIreadBytes>
 8002280:	4603      	mov	r3, r0
 8002282:	e000      	b.n	8002286 <xgReadBytes+0x46>
	return -1;
 8002284:	23ff      	movs	r3, #255	@ 0xff
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200004e0 	.word	0x200004e0
 8002294:	200004d1 	.word	0x200004d1

08002298 <mReadByte>:

uint8_t mReadByte(uint8_t subAddress)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <mReadByte+0x48>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <mReadByte+0x24>
		return I2CreadByte(_mAddress, subAddress);
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <mReadByte+0x4c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f894 	bl	80023e0 <I2CreadByte>
 80022b8:	4603      	mov	r3, r0
 80022ba:	e00d      	b.n	80022d8 <mReadByte+0x40>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <mReadByte+0x48>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <mReadByte+0x3e>
		return SPIreadByte(_mAddress, subAddress);
 80022c4:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <mReadByte+0x4c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f846 	bl	800235e <SPIreadByte>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e000      	b.n	80022d8 <mReadByte+0x40>
	return -1;
 80022d6:	23ff      	movs	r3, #255	@ 0xff
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200004e0 	.word	0x200004e0
 80022e4:	200004d0 	.word	0x200004d0

080022e8 <mReadBytes>:

uint8_t mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <mReadBytes+0x50>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <mReadBytes+0x2a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <mReadBytes+0x54>)
 8002302:	7818      	ldrb	r0, [r3, #0]
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	79f9      	ldrb	r1, [r7, #7]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	f000 f895 	bl	8002438 <I2CreadBytes>
 800230e:	4603      	mov	r3, r0
 8002310:	e00d      	b.n	800232e <mReadBytes+0x46>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <mReadBytes+0x50>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <mReadBytes+0x44>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <mReadBytes+0x54>)
 800231c:	7818      	ldrb	r0, [r3, #0]
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	79f9      	ldrb	r1, [r7, #7]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	f000 f82a 	bl	800237c <SPIreadBytes>
 8002328:	4603      	mov	r3, r0
 800232a:	e000      	b.n	800232e <mReadBytes+0x46>
	return -1;
 800232c:	23ff      	movs	r3, #255	@ 0xff
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200004e0 	.word	0x200004e0
 800233c:	200004d0 	.word	0x200004d0

08002340 <SPIwriteByte>:
{
	return;
}

void SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
 800234a:	460b      	mov	r3, r1
 800234c:	71bb      	strb	r3, [r7, #6]
 800234e:	4613      	mov	r3, r2
 8002350:	717b      	strb	r3, [r7, #5]
	return;
 8002352:	bf00      	nop
}
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <SPIreadByte>:

uint8_t SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	460a      	mov	r2, r1
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	4613      	mov	r3, r2
 800236c:	71bb      	strb	r3, [r7, #6]
return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SPIreadBytes>:

uint8_t SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	603a      	str	r2, [r7, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	460b      	mov	r3, r1
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	4613      	mov	r3, r2
 8002390:	717b      	strb	r3, [r7, #5]
return 0;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <I2CwriteByte>:

void I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	460b      	mov	r3, r1
 80023ac:	71bb      	strb	r3, [r7, #6]
 80023ae:	4613      	mov	r3, r2
 80023b0:	717b      	strb	r3, [r7, #5]
	uint8_t buffer[2] = {subAddress, data};
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	733b      	strb	r3, [r7, #12]
 80023b6:	797b      	ldrb	r3, [r7, #5]
 80023b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(settings.device.hi2c1, address<<1, buffer, 2, 100);
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <I2CwriteByte+0x3c>)
 80023bc:	6858      	ldr	r0, [r3, #4]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b299      	uxth	r1, r3
 80023c6:	f107 020c 	add.w	r2, r7, #12
 80023ca:	2364      	movs	r3, #100	@ 0x64
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2302      	movs	r3, #2
 80023d0:	f002 ff32 	bl	8005238 <HAL_I2C_Master_Transmit>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200004e0 	.word	0x200004e0

080023e0 <I2CreadByte>:

uint8_t I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = subAddress;
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	73fb      	strb	r3, [r7, #15]
	uint8_t readBuffer; // `data` will store the register data
	HAL_I2C_Master_Transmit(settings.device.hi2c1, address<<1, &buffer, 1, 100);
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <I2CreadByte+0x54>)
 80023f6:	6858      	ldr	r0, [r3, #4]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	b299      	uxth	r1, r3
 8002400:	f107 020f 	add.w	r2, r7, #15
 8002404:	2364      	movs	r3, #100	@ 0x64
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	f002 ff15 	bl	8005238 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(settings.device.hi2c1, address<<1, &readBuffer, 1,100);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <I2CreadByte+0x54>)
 8002410:	6858      	ldr	r0, [r3, #4]
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	b29b      	uxth	r3, r3
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	b299      	uxth	r1, r3
 800241a:	f107 020e 	add.w	r2, r7, #14
 800241e:	2364      	movs	r3, #100	@ 0x64
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	f003 f820 	bl	8005468 <HAL_I2C_Master_Receive>
	return readBuffer; 
 8002428:	7bbb      	ldrb	r3, [r7, #14]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200004e0 	.word	0x200004e0

08002438 <I2CreadBytes>:

uint8_t I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	603a      	str	r2, [r7, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	460b      	mov	r3, r1
 8002448:	71bb      	strb	r3, [r7, #6]
 800244a:	4613      	mov	r3, r2
 800244c:	717b      	strb	r3, [r7, #5]

	uint8_t buffer = subAddress; //subAddress | 0x80
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(settings.device.hi2c1, address<<1, &buffer, 1, 100);
 8002452:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <I2CreadBytes+0x58>)
 8002454:	6858      	ldr	r0, [r3, #4]
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	b29b      	uxth	r3, r3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	b299      	uxth	r1, r3
 800245e:	f107 020f 	add.w	r2, r7, #15
 8002462:	2364      	movs	r3, #100	@ 0x64
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2301      	movs	r3, #1
 8002468:	f002 fee6 	bl	8005238 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(settings.device.hi2c1, address<<1, dest, count,100);
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <I2CreadBytes+0x58>)
 800246e:	6858      	ldr	r0, [r3, #4]
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	b29b      	uxth	r3, r3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	b299      	uxth	r1, r3
 8002478:	797b      	ldrb	r3, [r7, #5]
 800247a:	b29b      	uxth	r3, r3
 800247c:	2264      	movs	r2, #100	@ 0x64
 800247e:	9200      	str	r2, [sp, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f002 fff1 	bl	8005468 <HAL_I2C_Master_Receive>
	return count;
 8002486:	797b      	ldrb	r3, [r7, #5]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200004e0 	.word	0x200004e0

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002498:	f000 fc8c 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249c:	f000 f83e 	bl	800251c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a0:	f7fe ffa6 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024a4:	f7fe fcd2 	bl	8000e4c <MX_DMA_Init>
  MX_ADC1_Init();
 80024a8:	f7fe fb1e 	bl	8000ae8 <MX_ADC1_Init>
  MX_CAN_Init();
 80024ac:	f7fe fc1e 	bl	8000cec <MX_CAN_Init>
  MX_TIM1_Init();
 80024b0:	f000 fb44 	bl	8002b3c <MX_TIM1_Init>
  MX_I2C1_Init();
 80024b4:	f7fe fffc 	bl	80014b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM generation for 1st channel
 80024b8:	2100      	movs	r1, #0
 80024ba:	4815      	ldr	r0, [pc, #84]	@ (8002510 <main+0x7c>)
 80024bc:	f005 f872 	bl	80075a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);			//Start PWM generation for 2nd channel
 80024c0:	2104      	movs	r1, #4
 80024c2:	4813      	ldr	r0, [pc, #76]	@ (8002510 <main+0x7c>)
 80024c4:	f005 f86e 	bl	80075a4 <HAL_TIM_PWM_Start>


  //I2C LSM9DS1 code init
  begin(0x6B, 0x1E, &hi2c1);	//Init I2C connection to IMU, 0x6B for Accel, Gyro; 0x1E for Magnetometer
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <main+0x80>)
 80024ca:	211e      	movs	r1, #30
 80024cc:	206b      	movs	r0, #107	@ 0x6b
 80024ce:	f7ff f929 	bl	8001724 <begin>
  setMagScale(4);					//	4 8 12 16 gauss
 80024d2:	2004      	movs	r0, #4
 80024d4:	f7ff fcf2 	bl	8001ebc <setMagScale>
  setAccelScale(4);					//	2 4 8 16 g
 80024d8:	2004      	movs	r0, #4
 80024da:	f7ff fcad 	bl	8001e38 <setAccelScale>
  setGyroScale(245);				//  245 500 2000 deg/sec
 80024de:	20f5      	movs	r0, #245	@ 0xf5
 80024e0:	f7ff fc70 	bl	8001dc4 <setGyroScale>

  //Init CAN Headers

  HAL_CAN_Start(&hcan);
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <main+0x84>)
 80024e6:	f001 fd94 	bl	8004012 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80024ea:	2102      	movs	r1, #2
 80024ec:	480a      	ldr	r0, [pc, #40]	@ (8002518 <main+0x84>)
 80024ee:	f001 ffc6 	bl	800447e <HAL_CAN_ActivateNotification>

  TxHeaderInit_Sensor();
 80024f2:	f000 f979 	bl	80027e8 <TxHeaderInit_Sensor>
  TxHeaderInit_IMU_Accel();
 80024f6:	f000 f993 	bl	8002820 <TxHeaderInit_IMU_Accel>
  TxHeaderInit_IMU_Gyro();
 80024fa:	f000 f9ad 	bl	8002858 <TxHeaderInit_IMU_Gyro>
  TxHeaderInit_IMU_Mag();
 80024fe:	f000 f9c7 	bl	8002890 <TxHeaderInit_IMU_Mag>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002502:	f7fe fcdb 	bl	8000ebc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002506:	f006 f947 	bl	8008798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <main+0x76>
 800250e:	bf00      	nop
 8002510:	20000624 	.word	0x20000624
 8002514:	2000047c 	.word	0x2000047c
 8002518:	20000128 	.word	0x20000128

0800251c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b096      	sub	sp, #88	@ 0x58
 8002520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002526:	2228      	movs	r2, #40	@ 0x28
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f007 fb72 	bl	8009c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002550:	2302      	movs	r3, #2
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002554:	2301      	movs	r3, #1
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002558:	2310      	movs	r3, #16
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255c:	2302      	movs	r3, #2
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002560:	2300      	movs	r3, #0
 8002562:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002564:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002568:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fbae 	bl	8005cd0 <HAL_RCC_OscConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800257a:	f000 f9b4 	bl	80028e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257e:	230f      	movs	r3, #15
 8002580:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002582:	2302      	movs	r3, #2
 8002584:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800258a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fba6 	bl	8006cec <HAL_RCC_ClockConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80025a6:	f000 f99e 	bl	80028e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80025aa:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 80025ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80025b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fdb5 	bl	8007130 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80025cc:	f000 f98b 	bl	80028e6 <Error_Handler>
  }
}
 80025d0:	bf00      	nop
 80025d2:	3758      	adds	r7, #88	@ 0x58
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <CalcDist>:

/* USER CODE BEGIN 4 */
uint16_t CalcDist(uint16_t ADC12In){
 80025d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	80fb      	strh	r3, [r7, #6]
	uint16_t TempResult;
	TempResult=Coeff[0]*pow(ADC12In,5)+Coeff[1]*pow(ADC12In,4)+Coeff[2]*pow(ADC12In,3)+Coeff[3]*pow(ADC12In,2)+Coeff[4]*pow(ADC12In,1)+Coeff[5];
 80025e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002798 <CalcDist+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff55 	bl	8000498 <__aeabi_f2d>
 80025ee:	4604      	mov	r4, r0
 80025f0:	460d      	mov	r5, r1
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff2d 	bl	8000454 <__aeabi_ui2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8002778 <CalcDist+0x1a0>
 8002602:	ec43 2b10 	vmov	d0, r2, r3
 8002606:	f007 fb37 	bl	8009c78 <pow>
 800260a:	ec53 2b10 	vmov	r2, r3, d0
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd ff99 	bl	8000548 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4690      	mov	r8, r2
 800261c:	4699      	mov	r9, r3
 800261e:	4b5e      	ldr	r3, [pc, #376]	@ (8002798 <CalcDist+0x1c0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff38 	bl	8000498 <__aeabi_f2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff10 	bl	8000454 <__aeabi_ui2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002780 <CalcDist+0x1a8>
 800263c:	ec43 2b10 	vmov	d0, r2, r3
 8002640:	f007 fb1a 	bl	8009c78 <pow>
 8002644:	ec53 2b10 	vmov	r2, r3, d0
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd ff7c 	bl	8000548 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4640      	mov	r0, r8
 8002656:	4649      	mov	r1, r9
 8002658:	f7fd fdc0 	bl	80001dc <__adddf3>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4690      	mov	r8, r2
 8002662:	4699      	mov	r9, r3
 8002664:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <CalcDist+0x1c0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff15 	bl	8000498 <__aeabi_f2d>
 800266e:	4604      	mov	r4, r0
 8002670:	460d      	mov	r5, r1
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd feed 	bl	8000454 <__aeabi_ui2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8002788 <CalcDist+0x1b0>
 8002682:	ec43 2b10 	vmov	d0, r2, r3
 8002686:	f007 faf7 	bl	8009c78 <pow>
 800268a:	ec53 2b10 	vmov	r2, r3, d0
 800268e:	4620      	mov	r0, r4
 8002690:	4629      	mov	r1, r5
 8002692:	f7fd ff59 	bl	8000548 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4640      	mov	r0, r8
 800269c:	4649      	mov	r1, r9
 800269e:	f7fd fd9d 	bl	80001dc <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4690      	mov	r8, r2
 80026a8:	4699      	mov	r9, r3
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <CalcDist+0x1c0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fef2 	bl	8000498 <__aeabi_f2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feca 	bl	8000454 <__aeabi_ui2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8002790 <CalcDist+0x1b8>
 80026c8:	ec43 2b10 	vmov	d0, r2, r3
 80026cc:	f007 fad4 	bl	8009c78 <pow>
 80026d0:	ec53 2b10 	vmov	r2, r3, d0
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ff36 	bl	8000548 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4640      	mov	r0, r8
 80026e2:	4649      	mov	r1, r9
 80026e4:	f7fd fd7a 	bl	80001dc <__adddf3>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4690      	mov	r8, r2
 80026ee:	4699      	mov	r9, r3
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <CalcDist+0x1c0>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fecf 	bl	8000498 <__aeabi_f2d>
 80026fa:	4604      	mov	r4, r0
 80026fc:	460d      	mov	r5, r1
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fea7 	bl	8000454 <__aeabi_ui2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4620      	mov	r0, r4
 800270c:	4629      	mov	r1, r5
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4640      	mov	r0, r8
 8002718:	4649      	mov	r1, r9
 800271a:	f7fd fd5f 	bl	80001dc <__adddf3>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4614      	mov	r4, r2
 8002724:	461d      	mov	r5, r3
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <CalcDist+0x1c0>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd feb4 	bl	8000498 <__aeabi_f2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd fd50 	bl	80001dc <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f9b0 	bl	8000aa8 <__aeabi_d2uiz>
 8002748:	4603      	mov	r3, r0
 800274a:	81fb      	strh	r3, [r7, #14]

	if(TempResult>=40&&TempResult<=290){
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	2b27      	cmp	r3, #39	@ 0x27
 8002750:	d907      	bls.n	8002762 <CalcDist+0x18a>
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002758:	d803      	bhi.n	8002762 <CalcDist+0x18a>
		return TempResult-35;			//to fit into uint8 range
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	3b23      	subs	r3, #35	@ 0x23
 800275e:	b29b      	uxth	r3, r3
 8002760:	e005      	b.n	800276e <CalcDist+0x196>
	}
	else {
		if(TempResult<40) return TempResult;   //0 àter debug
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	2b27      	cmp	r3, #39	@ 0x27
 8002766:	d801      	bhi.n	800276c <CalcDist+0x194>
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	e000      	b.n	800276e <CalcDist+0x196>
			else return TempResult;				//1
 800276c:	89fb      	ldrh	r3, [r7, #14]
		}
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002778:	00000000 	.word	0x00000000
 800277c:	40140000 	.word	0x40140000
 8002780:	00000000 	.word	0x00000000
 8002784:	40100000 	.word	0x40100000
 8002788:	00000000 	.word	0x00000000
 800278c:	40080000 	.word	0x40080000
 8002790:	00000000 	.word	0x00000000
 8002794:	40000000 	.word	0x40000000
 8002798:	20000000 	.word	0x20000000

0800279c <ConvertToPWM_Signal>:

uint8_t ConvertToPWM_Signal(uint8_t OutVal, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max){
 800279c:	b490      	push	{r4, r7}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	4603      	mov	r3, r0
 80027b0:	71bb      	strb	r3, [r7, #6]
 80027b2:	460b      	mov	r3, r1
 80027b4:	717b      	strb	r3, [r7, #5]
 80027b6:	4613      	mov	r3, r2
 80027b8:	713b      	strb	r3, [r7, #4]
	return (OutVal - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	7c39      	ldrb	r1, [r7, #16]
 80027c2:	793a      	ldrb	r2, [r7, #4]
 80027c4:	1a8a      	subs	r2, r1, r2
 80027c6:	fb03 f202 	mul.w	r2, r3, r2
 80027ca:	7979      	ldrb	r1, [r7, #5]
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	1acb      	subs	r3, r1, r3
 80027d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	793b      	ldrb	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	b2db      	uxtb	r3, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc90      	pop	{r4, r7}
 80027e4:	4770      	bx	lr
	...

080027e8 <TxHeaderInit_Sensor>:


void TxHeaderInit_Sensor(){
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	TxHeader_Sensor.StdId=102;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 80027ee:	2266      	movs	r2, #102	@ 0x66
 80027f0:	601a      	str	r2, [r3, #0]
	TxHeader_Sensor.ExtId=0;
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
	TxHeader_Sensor.IDE=CAN_ID_STD;
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
	TxHeader_Sensor.RTR=CAN_RTR_DATA;
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
	TxHeader_Sensor.DLC=4;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 8002806:	2204      	movs	r2, #4
 8002808:	611a      	str	r2, [r3, #16]
	TxHeader_Sensor.TransmitGlobalTime=DISABLE;
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <TxHeaderInit_Sensor+0x34>)
 800280c:	2200      	movs	r2, #0
 800280e:	751a      	strb	r2, [r3, #20]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000564 	.word	0x20000564

08002820 <TxHeaderInit_IMU_Accel>:

void TxHeaderInit_IMU_Accel(){
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	TxHeader_IMU_Accel.StdId=103;
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 8002826:	2267      	movs	r2, #103	@ 0x67
 8002828:	601a      	str	r2, [r3, #0]
	TxHeader_IMU_Accel.ExtId=0;
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
	TxHeader_IMU_Accel.IDE=CAN_ID_STD;
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
	TxHeader_IMU_Accel.RTR=CAN_RTR_DATA;
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
	TxHeader_IMU_Accel.DLC=3;
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 800283e:	2203      	movs	r2, #3
 8002840:	611a      	str	r2, [r3, #16]
	TxHeader_IMU_Accel.TransmitGlobalTime=DISABLE;
 8002842:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <TxHeaderInit_IMU_Accel+0x34>)
 8002844:	2200      	movs	r2, #0
 8002846:	751a      	strb	r2, [r3, #20]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	2000057c 	.word	0x2000057c

08002858 <TxHeaderInit_IMU_Gyro>:

void TxHeaderInit_IMU_Gyro(){
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	TxHeader_IMU_Gyro.StdId=104;
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 800285e:	2268      	movs	r2, #104	@ 0x68
 8002860:	601a      	str	r2, [r3, #0]
	TxHeader_IMU_Gyro.ExtId=0;
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
	TxHeader_IMU_Gyro.IDE=CAN_ID_STD;
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
	TxHeader_IMU_Gyro.RTR=CAN_RTR_DATA;
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
	TxHeader_IMU_Gyro.DLC=3;
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 8002876:	2203      	movs	r2, #3
 8002878:	611a      	str	r2, [r3, #16]
	TxHeader_IMU_Gyro.TransmitGlobalTime=DISABLE;
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <TxHeaderInit_IMU_Gyro+0x34>)
 800287c:	2200      	movs	r2, #0
 800287e:	751a      	strb	r2, [r3, #20]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000594 	.word	0x20000594

08002890 <TxHeaderInit_IMU_Mag>:

void TxHeaderInit_IMU_Mag(){
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
	TxHeader_IMU_Mag.StdId=105;
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 8002896:	2269      	movs	r2, #105	@ 0x69
 8002898:	601a      	str	r2, [r3, #0]
	TxHeader_IMU_Mag.ExtId=0;
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
	TxHeader_IMU_Mag.IDE=CAN_ID_STD;
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
	TxHeader_IMU_Mag.RTR=CAN_RTR_DATA;
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
	TxHeader_IMU_Mag.DLC=3;
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 80028ae:	2203      	movs	r2, #3
 80028b0:	611a      	str	r2, [r3, #16]
	TxHeader_IMU_Mag.TransmitGlobalTime=DISABLE;
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <TxHeaderInit_IMU_Mag+0x34>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	751a      	strb	r2, [r3, #20]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200005ac 	.word	0x200005ac

080028c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80028da:	f000 fa81 	bl	8002de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ea:	b672      	cpsid	i
}
 80028ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ee:	bf00      	nop
 80028f0:	e7fd      	b.n	80028ee <Error_Handler+0x8>
	...

080028f4 <Moving_Average_Compute>:
	}
}

//Compute filter datas with moving window

uint32_t Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct){
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	filter_struct->Sum+=raw_data;		//Add latest raw input
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	441a      	add	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28
	filter_struct->Sum-=filter_struct->Filter_Elements[filter_struct->WindowPointer];    //Subtract oldest element
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002918:	1ad2      	subs	r2, r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	629a      	str	r2, [r3, #40]	@ 0x28
	filter_struct->Filter_Elements[filter_struct->WindowPointer] = raw_data;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	if(filter_struct->WindowPointer == 0){
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <Moving_Average_Compute+0x46>
		filter_struct->WindowPointer=WindowLength-1;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2209      	movs	r2, #9
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002938:	e004      	b.n	8002944 <Moving_Average_Compute+0x50>
	}
	else{
		filter_struct->WindowPointer-=1;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return filter_struct->Sum/WindowLength;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <Moving_Average_Compute+0x68>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	08db      	lsrs	r3, r3, #3
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	cccccccd 	.word	0xcccccccd

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_MspInit+0x4c>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <HAL_MspInit+0x4c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6193      	str	r3, [r2, #24]
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_MspInit+0x4c>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_MspInit+0x4c>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_MspInit+0x4c>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_MspInit+0x4c>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	f06f 0001 	mvn.w	r0, #1
 800299e:	f002 f87b 	bl	8004a98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	@ 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80029c0:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <HAL_InitTick+0xe4>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4a33      	ldr	r2, [pc, #204]	@ (8002a94 <HAL_InitTick+0xe4>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	61d3      	str	r3, [r2, #28]
 80029cc:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <HAL_InitTick+0xe4>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029d8:	f107 0210 	add.w	r2, r7, #16
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fb72 	bl	80070cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029f2:	f004 fb49 	bl	8007088 <HAL_RCC_GetPCLK1Freq>
 80029f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80029f8:	e004      	b.n	8002a04 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029fa:	f004 fb45 	bl	8007088 <HAL_RCC_GetPCLK1Freq>
 80029fe:	4603      	mov	r3, r0
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a06:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <HAL_InitTick+0xe8>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002a12:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a18:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a20:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002a22:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002a3a:	4818      	ldr	r0, [pc, #96]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a3c:	f004 fc9c 	bl	8007378 <HAL_TIM_Base_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d11b      	bne.n	8002a86 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002a4e:	4813      	ldr	r0, [pc, #76]	@ (8002a9c <HAL_InitTick+0xec>)
 8002a50:	f004 fcea 	bl	8007428 <HAL_TIM_Base_Start_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d111      	bne.n	8002a86 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a62:	201c      	movs	r0, #28
 8002a64:	f002 f834 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d808      	bhi.n	8002a80 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	201c      	movs	r0, #28
 8002a74:	f002 f810 	bl	8004a98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a78:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_InitTick+0xf0>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e002      	b.n	8002a86 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3738      	adds	r7, #56	@ 0x38
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	200005d8 	.word	0x200005d8
 8002aa0:	2000001c 	.word	0x2000001c

08002aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <NMI_Handler+0x4>

08002aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <MemManage_Handler+0x4>

08002abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <DMA1_Channel1_IRQHandler+0x10>)
 8002ae2:	f002 f8a9 	bl	8004c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200000e4 	.word	0x200000e4

08002af0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <CAN_RX0_IRQHandler+0x10>)
 8002af6:	f001 fce8 	bl	80044ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000128 	.word	0x20000128

08002b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <TIM2_IRQHandler+0x10>)
 8002b0a:	f004 fe37 	bl	800777c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200005d8 	.word	0x200005d8

08002b18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <SystemInit+0x20>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <SystemInit+0x20>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09a      	sub	sp, #104	@ 0x68
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	222c      	movs	r2, #44	@ 0x2c
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 f84c 	bl	8009c14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002cac <MX_TIM1_Init+0x170>)
 8002b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 8002b82:	4b49      	ldr	r3, [pc, #292]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002b84:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048-1;
 8002b90:	4b45      	ldr	r3, [pc, #276]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002b92:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b98:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b9e:	4b42      	ldr	r3, [pc, #264]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba4:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002baa:	483f      	ldr	r0, [pc, #252]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002bac:	f004 fbe4 	bl	8007378 <HAL_TIM_Base_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002bb6:	f7ff fe96 	bl	80028e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bc0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4838      	ldr	r0, [pc, #224]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002bc8:	f004 ffee 	bl	8007ba8 <HAL_TIM_ConfigClockSource>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002bd2:	f7ff fe88 	bl	80028e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bd6:	4834      	ldr	r0, [pc, #208]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002bd8:	f004 fc82 	bl	80074e0 <HAL_TIM_PWM_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002be2:	f7ff fe80 	bl	80028e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bf2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	482b      	ldr	r0, [pc, #172]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002bfa:	f005 fcb1 	bl	8008560 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002c04:	f7ff fe6f 	bl	80028e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c08:	2360      	movs	r3, #96	@ 0x60
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	481e      	ldr	r0, [pc, #120]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002c2e:	f004 fea7 	bl	8007980 <HAL_TIM_PWM_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002c38:	f7ff fe55 	bl	80028e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c40:	2204      	movs	r2, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4818      	ldr	r0, [pc, #96]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002c46:	f004 fe9b 	bl	8007980 <HAL_TIM_PWM_ConfigChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002c50:	f7ff fe49 	bl	80028e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002c8a:	f005 fcd7 	bl	800863c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002c94:	f7ff fe27 	bl	80028e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <MX_TIM1_Init+0x16c>)
 8002c9a:	f000 f829 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 8002c9e:	bf00      	nop
 8002ca0:	3768      	adds	r7, #104	@ 0x68
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000624 	.word	0x20000624
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <HAL_TIM_Base_MspInit+0x38>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10b      	bne.n	8002cda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_TIM_Base_MspInit+0x3c>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <HAL_TIM_Base_MspInit+0x3c>)
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <HAL_TIM_Base_MspInit+0x3c>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <HAL_TIM_MspPostInit+0x68>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11d      	bne.n	8002d4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <HAL_TIM_MspPostInit+0x6c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4a11      	ldr	r2, [pc, #68]	@ (8002d5c <HAL_TIM_MspPostInit+0x6c>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	6153      	str	r3, [r2, #20]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_TIM_MspPostInit+0x6c>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d4a:	f002 f867 	bl	8004e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40021000 	.word	0x40021000

08002d60 <Reset_Handler>:
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d98 <LoopForever+0x2>
 8002d64:	f7ff fed8 	bl	8002b18 <SystemInit>
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <LoopForever+0x6>)
 8002d6a:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <LoopForever+0xa>)
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <LoopForever+0xe>)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:
 8002d72:	58d4      	ldr	r4, [r2, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:
 8002d78:	18c4      	adds	r4, r0, r3
 8002d7a:	428c      	cmp	r4, r1
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <LoopForever+0x12>)
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <LoopForever+0x16>)
 8002d82:	2300      	movs	r3, #0
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:
 8002d8a:	42a2      	cmp	r2, r4
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>
 8002d8e:	f006 ff4f 	bl	8009c30 <__libc_init_array>
 8002d92:	f7ff fb7f 	bl	8002494 <main>

08002d96 <LoopForever>:
 8002d96:	e7fe      	b.n	8002d96 <LoopForever>
 8002d98:	20003000 	.word	0x20003000
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000078 	.word	0x20000078
 8002da4:	0800ac80 	.word	0x0800ac80
 8002da8:	20000078 	.word	0x20000078
 8002dac:	200014f8 	.word	0x200014f8

08002db0 <ADC1_2_IRQHandler>:
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_Init+0x28>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_Init+0x28>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f001 fe5c 	bl	8004a82 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	200f      	movs	r0, #15
 8002dcc:	f7ff fdf0 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fdc6 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000020 	.word	0x20000020
 8002e04:	20000670 	.word	0x20000670

08002e08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000670 	.word	0x20000670

08002e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b09a      	sub	sp, #104	@ 0x68
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e172      	b.n	800314e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d176      	bne.n	8002f68 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d152      	bne.n	8002f28 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd febd 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13b      	bne.n	8002f28 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fe83 	bl	8003bbc <ADC_Disable>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d12f      	bne.n	8002f28 <HAL_ADC_Init+0xe0>
 8002ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12b      	bne.n	8002f28 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ed8:	f023 0302 	bic.w	r3, r3, #2
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ef2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f02:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	4b94      	ldr	r3, [pc, #592]	@ (8003158 <HAL_ADC_Init+0x310>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a94      	ldr	r2, [pc, #592]	@ (800315c <HAL_ADC_Init+0x314>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9a      	lsrs	r2, r3, #18
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f44:	d110      	bne.n	8002f68 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f023 0312 	bic.w	r3, r3, #18
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 80df 	bne.w	8003134 <HAL_ADC_Init+0x2ec>
 8002f76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80da 	bne.w	8003134 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 80d2 	bne.w	8003134 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f98:	f043 0202 	orr.w	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8003160 <HAL_ADC_Init+0x318>)
 8002fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADC_Init+0x16c>
 8002fae:	4b6d      	ldr	r3, [pc, #436]	@ (8003164 <HAL_ADC_Init+0x31c>)
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e002      	b.n	8002fba <HAL_ADC_Init+0x172>
 8002fb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d108      	bne.n	8002fda <HAL_ADC_Init+0x192>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Init+0x192>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_Init+0x194>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11c      	bne.n	800301a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_ADC_Init+0x1ba>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x1ba>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_ADC_Init+0x1bc>
 8003002:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003004:	2b00      	cmp	r3, #0
 8003006:	d108      	bne.n	800301a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003018:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7e5b      	ldrb	r3, [r3, #25]
 800301e:	035b      	lsls	r3, r3, #13
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003024:	2a01      	cmp	r2, #1
 8003026:	d002      	beq.n	800302e <HAL_ADC_Init+0x1e6>
 8003028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800302c:	e000      	b.n	8003030 <HAL_ADC_Init+0x1e8>
 800302e:	2200      	movs	r2, #0
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003040:	4313      	orrs	r3, r2
 8003042:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11b      	bne.n	8003086 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7e5b      	ldrb	r3, [r3, #25]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	045a      	lsls	r2, r3, #17
 800305e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003060:	4313      	orrs	r3, r2
 8003062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003066:	663b      	str	r3, [r7, #96]	@ 0x60
 8003068:	e00d      	b.n	8003086 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	2b01      	cmp	r3, #1
 800308c:	d007      	beq.n	800309e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	4313      	orrs	r3, r2
 8003098:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800309a:	4313      	orrs	r3, r2
 800309c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d114      	bne.n	80030d6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ba:	f023 0302 	bic.w	r3, r3, #2
 80030be:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e1b      	ldrb	r3, [r3, #24]
 80030c4:	039a      	lsls	r2, r3, #14
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4313      	orrs	r3, r2
 80030d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030d2:	4313      	orrs	r3, r2
 80030d4:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <HAL_ADC_Init+0x320>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80030e6:	430b      	orrs	r3, r1
 80030e8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10c      	bne.n	800310c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	f023 010f 	bic.w	r1, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
 800310a:	e007      	b.n	800311c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 020f 	bic.w	r2, r2, #15
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	@ 0x40
 8003132:	e00a      	b.n	800314a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f023 0312 	bic.w	r3, r3, #18
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800314a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800314e:	4618      	mov	r0, r3
 8003150:	3768      	adds	r7, #104	@ 0x68
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000018 	.word	0x20000018
 800315c:	431bde83 	.word	0x431bde83
 8003160:	50000300 	.word	0x50000300
 8003164:	50000100 	.word	0x50000100
 8003168:	fff0c007 	.word	0xfff0c007

0800316c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 80b9 	bne.w	80032fe <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADC_Start_DMA+0x2e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0b4      	b.n	8003304 <HAL_ADC_Start_DMA+0x198>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80031a2:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <HAL_ADC_Start_DMA+0x1a0>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80a0 	bne.w	80032f0 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fc9f 	bl	8003af4 <ADC_Enable>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 8092 	bne.w	80032e6 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031d6:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <HAL_ADC_Start_DMA+0x1a0>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_Start_DMA+0x80>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ea:	d115      	bne.n	8003218 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d027      	beq.n	8003256 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800320e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003216:	e01e      	b.n	8003256 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322c:	d004      	beq.n	8003238 <HAL_ADC_Start_DMA+0xcc>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a37      	ldr	r2, [pc, #220]	@ (8003310 <HAL_ADC_Start_DMA+0x1a4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10e      	bne.n	8003256 <HAL_ADC_Start_DMA+0xea>
 8003238:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800324e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003262:	d106      	bne.n	8003272 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	f023 0206 	bic.w	r2, r3, #6
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	4a23      	ldr	r2, [pc, #140]	@ (8003314 <HAL_ADC_Start_DMA+0x1a8>)
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_ADC_Start_DMA+0x1ac>)
 800328e:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_ADC_Start_DMA+0x1b0>)
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	221c      	movs	r2, #28
 800329e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0210 	orr.w	r2, r2, #16
 80032ae:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3340      	adds	r3, #64	@ 0x40
 80032ca:	4619      	mov	r1, r3
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f001 fc53 	bl	8004b7a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0204 	orr.w	r2, r2, #4
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	e00d      	b.n	8003302 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032ee:	e008      	b.n	8003302 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032fc:	e001      	b.n	8003302 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003302:	7dfb      	ldrb	r3, [r7, #23]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	50000300 	.word	0x50000300
 8003310:	50000100 	.word	0x50000100
 8003314:	08003a29 	.word	0x08003a29
 8003318:	08003aa3 	.word	0x08003aa3
 800331c:	08003abf 	.word	0x08003abf

08003320 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b09b      	sub	sp, #108	@ 0x6c
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x22>
 800333e:	2302      	movs	r3, #2
 8003340:	e2a1      	b.n	8003886 <HAL_ADC_ConfigChannel+0x566>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 8285 	bne.w	8003864 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d81c      	bhi.n	800339c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	461a      	mov	r2, r3
 8003376:	231f      	movs	r3, #31
 8003378:	4093      	lsls	r3, r2
 800337a:	43db      	mvns	r3, r3
 800337c:	4019      	ands	r1, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa00 f203 	lsl.w	r2, r0, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
 800339a:	e063      	b.n	8003464 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	d81e      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	3b1e      	subs	r3, #30
 80033b8:	221f      	movs	r2, #31
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	4019      	ands	r1, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	3b1e      	subs	r3, #30
 80033d4:	fa00 f203 	lsl.w	r2, r0, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e0:	e040      	b.n	8003464 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b0e      	cmp	r3, #14
 80033e8:	d81e      	bhi.n	8003428 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	3b3c      	subs	r3, #60	@ 0x3c
 80033fe:	221f      	movs	r2, #31
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	4019      	ands	r1, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	3b3c      	subs	r3, #60	@ 0x3c
 800341a:	fa00 f203 	lsl.w	r2, r0, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
 8003426:	e01d      	b.n	8003464 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	3b5a      	subs	r3, #90	@ 0x5a
 800343c:	221f      	movs	r2, #31
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	4019      	ands	r1, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	3b5a      	subs	r3, #90	@ 0x5a
 8003458:	fa00 f203 	lsl.w	r2, r0, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 80e5 	bne.w	800363e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d91c      	bls.n	80034b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6999      	ldr	r1, [r3, #24]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	3b1e      	subs	r3, #30
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4019      	ands	r1, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6898      	ldr	r0, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	3b1e      	subs	r3, #30
 80034a8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	e019      	b.n	80034ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6959      	ldr	r1, [r3, #20]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	2207      	movs	r2, #7
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4019      	ands	r1, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6898      	ldr	r0, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	fa00 f203 	lsl.w	r2, r0, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	3b01      	subs	r3, #1
 8003508:	2b03      	cmp	r3, #3
 800350a:	d84f      	bhi.n	80035ac <HAL_ADC_ConfigChannel+0x28c>
 800350c:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <HAL_ADC_ConfigChannel+0x1f4>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003525 	.word	0x08003525
 8003518:	08003547 	.word	0x08003547
 800351c:	08003569 	.word	0x08003569
 8003520:	0800358b 	.word	0x0800358b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800352a:	4b9c      	ldr	r3, [pc, #624]	@ (800379c <HAL_ADC_ConfigChannel+0x47c>)
 800352c:	4013      	ands	r3, r2
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	0691      	lsls	r1, r2, #26
 8003534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003536:	430a      	orrs	r2, r1
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003542:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003544:	e07b      	b.n	800363e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800354c:	4b93      	ldr	r3, [pc, #588]	@ (800379c <HAL_ADC_ConfigChannel+0x47c>)
 800354e:	4013      	ands	r3, r2
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	0691      	lsls	r1, r2, #26
 8003556:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003558:	430a      	orrs	r2, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003564:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003566:	e06a      	b.n	800363e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800356e:	4b8b      	ldr	r3, [pc, #556]	@ (800379c <HAL_ADC_ConfigChannel+0x47c>)
 8003570:	4013      	ands	r3, r2
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	0691      	lsls	r1, r2, #26
 8003578:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800357a:	430a      	orrs	r2, r1
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003586:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003588:	e059      	b.n	800363e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003590:	4b82      	ldr	r3, [pc, #520]	@ (800379c <HAL_ADC_ConfigChannel+0x47c>)
 8003592:	4013      	ands	r3, r2
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	0691      	lsls	r1, r2, #26
 800359a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800359c:	430a      	orrs	r2, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035a8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035aa:	e048      	b.n	800363e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d107      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035f2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	069b      	lsls	r3, r3, #26
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003616:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	069b      	lsls	r3, r3, #26
 8003628:	429a      	cmp	r2, r3
 800362a:	d107      	bne.n	800363c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800363a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800363c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_ADC_ConfigChannel+0x33e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x33e>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_ADC_ConfigChannel+0x340>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 810a 	bne.w	800387a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d00f      	beq.n	800368e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43da      	mvns	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	400a      	ands	r2, r1
 8003688:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800368c:	e049      	b.n	8003722 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	409a      	lsls	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	d91c      	bls.n	80036ea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	3b1b      	subs	r3, #27
 80036c2:	2207      	movs	r2, #7
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	4019      	ands	r1, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6898      	ldr	r0, [r3, #8]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	3b1b      	subs	r3, #27
 80036dc:	fa00 f203 	lsl.w	r2, r0, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	619a      	str	r2, [r3, #24]
 80036e8:	e01b      	b.n	8003722 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6959      	ldr	r1, [r3, #20]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	2207      	movs	r2, #7
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	4019      	ands	r1, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6898      	ldr	r0, [r3, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	fa00 f203 	lsl.w	r2, r0, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003722:	4b1f      	ldr	r3, [pc, #124]	@ (80037a0 <HAL_ADC_ConfigChannel+0x480>)
 8003724:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d105      	bne.n	800373a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800372e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d015      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800373e:	2b11      	cmp	r3, #17
 8003740:	d105      	bne.n	800374e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003752:	2b12      	cmp	r3, #18
 8003754:	f040 8091 	bne.w	800387a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	f040 808a 	bne.w	800387a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376e:	d102      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x456>
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <HAL_ADC_ConfigChannel+0x484>)
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e002      	b.n	800377c <HAL_ADC_ConfigChannel+0x45c>
 8003776:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800377a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d10e      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x488>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x488>
 8003798:	2301      	movs	r3, #1
 800379a:	e006      	b.n	80037aa <HAL_ADC_ConfigChannel+0x48a>
 800379c:	83fff000 	.word	0x83fff000
 80037a0:	50000300 	.word	0x50000300
 80037a4:	50000100 	.word	0x50000100
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d150      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d010      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x4b0>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x4b0>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x4b2>
 80037d0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13c      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d11d      	bne.n	800381a <HAL_ADC_ConfigChannel+0x4fa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e6:	d118      	bne.n	800381a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80037f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037f4:	4b27      	ldr	r3, [pc, #156]	@ (8003894 <HAL_ADC_ConfigChannel+0x574>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <HAL_ADC_ConfigChannel+0x578>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0c9a      	lsrs	r2, r3, #18
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800380a:	e002      	b.n	8003812 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3b01      	subs	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f9      	bne.n	800380c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003818:	e02e      	b.n	8003878 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b11      	cmp	r3, #17
 8003820:	d10b      	bne.n	800383a <HAL_ADC_ConfigChannel+0x51a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382a:	d106      	bne.n	800383a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800382c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003836:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003838:	e01e      	b.n	8003878 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b12      	cmp	r3, #18
 8003840:	d11a      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800384a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800384c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800384e:	e013      	b.n	8003878 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003862:	e00a      	b.n	800387a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003876:	e000      	b.n	800387a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003878:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003882:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003886:	4618      	mov	r0, r3
 8003888:	376c      	adds	r7, #108	@ 0x6c
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000018 	.word	0x20000018
 8003898:	431bde83 	.word	0x431bde83

0800389c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800389c:	b480      	push	{r7}
 800389e:	b099      	sub	sp, #100	@ 0x64
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b4:	d102      	bne.n	80038bc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80038b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	e002      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80038bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038c0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a2      	b.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e09b      	b.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d17f      	bne.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d179      	bne.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038fc:	4b49      	ldr	r3, [pc, #292]	@ (8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80038fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d040      	beq.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800391a:	035b      	lsls	r3, r3, #13
 800391c:	430b      	orrs	r3, r1
 800391e:	431a      	orrs	r2, r3
 8003920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003922:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d108      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15c      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003966:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d14b      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800396c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003974:	f023 030f 	bic.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	430a      	orrs	r2, r1
 8003982:	431a      	orrs	r2, r3
 8003984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003986:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003988:	e03c      	b.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800398a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003994:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d108      	bne.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d123      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80039d8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d112      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039e6:	f023 030f 	bic.w	r3, r3, #15
 80039ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039ee:	e009      	b.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003a02:	e000      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a04:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8003a12:	4618      	mov	r0, r3
 8003a14:	3764      	adds	r7, #100	@ 0x64
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	50000100 	.word	0x50000100
 8003a24:	50000300 	.word	0x50000300

08003a28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d126      	bne.n	8003a90 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7fd fc6f 	bl	800136c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a8e:	e004      	b.n	8003a9a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff f9b5 	bl	8002e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff f9a5 	bl	8002e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <ADC_Enable+0x2c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <ADC_Enable+0x2c>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <ADC_Enable+0x2e>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d143      	bne.n	8003bae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <ADC_Enable+0xc4>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	f043 0210 	orr.w	r2, r3, #16
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e02f      	b.n	8003bb0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003b60:	f7ff f952 	bl	8002e08 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b66:	e01b      	b.n	8003ba0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b68:	f7ff f94e 	bl	8002e08 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d914      	bls.n	8003ba0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00d      	beq.n	8003ba0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d1dc      	bne.n	8003b68 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	8000003f 	.word	0x8000003f

08003bbc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <ADC_Disable+0x2c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <ADC_Disable+0x2c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <ADC_Disable+0x2e>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d047      	beq.n	8003c7e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030d 	and.w	r3, r3, #13
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10f      	bne.n	8003c1c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0202 	orr.w	r2, r2, #2
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2203      	movs	r2, #3
 8003c12:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c14:	f7ff f8f8 	bl	8002e08 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c1a:	e029      	b.n	8003c70 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e023      	b.n	8003c80 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c38:	f7ff f8e6 	bl	8002e08 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d914      	bls.n	8003c70 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10d      	bne.n	8003c70 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d0dc      	beq.n	8003c38 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0ed      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd f872 	bl	8000d90 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cbc:	f7ff f8a4 	bl	8002e08 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cc2:	e012      	b.n	8003cea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cc4:	f7ff f8a0 	bl	8002e08 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d90b      	bls.n	8003cea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0c5      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0e5      	beq.n	8003cc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0202 	bic.w	r2, r2, #2
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d08:	f7ff f87e 	bl	8002e08 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d0e:	e012      	b.n	8003d36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d10:	f7ff f87a 	bl	8002e08 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d90b      	bls.n	8003d36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e09f      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7e1b      	ldrb	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7e5b      	ldrb	r3, [r3, #25]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e007      	b.n	8003d98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7e9b      	ldrb	r3, [r3, #26]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e007      	b.n	8003dc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0220 	bic.w	r2, r2, #32
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7edb      	ldrb	r3, [r3, #27]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d108      	bne.n	8003ddc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0210 	bic.w	r2, r2, #16
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e007      	b.n	8003dec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0210 	orr.w	r2, r2, #16
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7f1b      	ldrb	r3, [r3, #28]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d108      	bne.n	8003e06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e007      	b.n	8003e16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0208 	bic.w	r2, r2, #8
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7f5b      	ldrb	r3, [r3, #29]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d108      	bne.n	8003e30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0204 	orr.w	r2, r2, #4
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e007      	b.n	8003e40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0204 	bic.w	r2, r2, #4
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d003      	beq.n	8003ea4 <HAL_CAN_ConfigFilter+0x26>
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	f040 80aa 	bne.w	8003ff8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d123      	bne.n	8003f26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	401a      	ands	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3248      	adds	r2, #72	@ 0x48
 8003f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	3348      	adds	r3, #72	@ 0x48
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d122      	bne.n	8003f74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3248      	adds	r2, #72	@ 0x48
 8003f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	3348      	adds	r3, #72	@ 0x48
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003f8e:	e007      	b.n	8003fa0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003fba:	e007      	b.n	8003fcc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e006      	b.n	8004006 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d12e      	bne.n	8004084 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800403e:	f7fe fee3 	bl	8002e08 <HAL_GetTick>
 8004042:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004044:	e012      	b.n	800406c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004046:	f7fe fedf 	bl	8002e08 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b0a      	cmp	r3, #10
 8004052:	d90b      	bls.n	800406c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2205      	movs	r2, #5
 8004064:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e012      	b.n	8004092 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e006      	b.n	8004092 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800409a:	b480      	push	{r7}
 800409c:	b089      	sub	sp, #36	@ 0x24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d003      	beq.n	80040c6 <HAL_CAN_AddTxMessage+0x2c>
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	f040 80ad 	bne.w	8004220 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8095 	beq.w	8004210 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	0e1b      	lsrs	r3, r3, #24
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040f0:	2201      	movs	r2, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	409a      	lsls	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	6809      	ldr	r1, [r1, #0]
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3318      	adds	r3, #24
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	440b      	add	r3, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e00f      	b.n	800413e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004128:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004132:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3318      	adds	r3, #24
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	440b      	add	r3, r1
 800413c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3318      	adds	r3, #24
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	440b      	add	r3, r1
 800414e:	3304      	adds	r3, #4
 8004150:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	7d1b      	ldrb	r3, [r3, #20]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d111      	bne.n	800417e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3318      	adds	r3, #24
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3318      	adds	r3, #24
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	440b      	add	r3, r1
 800417a:	3304      	adds	r3, #4
 800417c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3307      	adds	r3, #7
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	061a      	lsls	r2, r3, #24
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3306      	adds	r3, #6
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3305      	adds	r3, #5
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	4313      	orrs	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	3204      	adds	r2, #4
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	4610      	mov	r0, r2
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	ea43 0200 	orr.w	r2, r3, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	440b      	add	r3, r1
 80041b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80041b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3303      	adds	r3, #3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3302      	adds	r3, #2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3301      	adds	r3, #1
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	4313      	orrs	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	4610      	mov	r0, r2
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	ea43 0200 	orr.w	r2, r3, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80041ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3318      	adds	r3, #24
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3318      	adds	r3, #24
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	440b      	add	r3, r1
 800420a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e00e      	b.n	800422e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e006      	b.n	800422e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	@ 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800423a:	b480      	push	{r7}
 800423c:	b087      	sub	sp, #28
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <HAL_CAN_GetRxMessage+0x24>
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	2b02      	cmp	r3, #2
 800425a:	f040 8103 	bne.w	8004464 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10e      	bne.n	8004282 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d116      	bne.n	80042a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0f7      	b.n	8004472 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0e8      	b.n	8004472 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	331b      	adds	r3, #27
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0204 	and.w	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	331b      	adds	r3, #27
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0d5b      	lsrs	r3, r3, #21
 80042ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	331b      	adds	r3, #27
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	331b      	adds	r3, #27
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0202 	and.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	331b      	adds	r3, #27
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2208      	movs	r2, #8
 8004322:	611a      	str	r2, [r3, #16]
 8004324:	e00b      	b.n	800433e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	331b      	adds	r3, #27
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	331b      	adds	r3, #27
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	b2da      	uxtb	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	331b      	adds	r3, #27
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4413      	add	r3, r2
 800438e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0a1a      	lsrs	r2, r3, #8
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0c1a      	lsrs	r2, r3, #16
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	3302      	adds	r3, #2
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e1a      	lsrs	r2, r3, #24
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3303      	adds	r3, #3
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4413      	add	r3, r2
 80043dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0a1a      	lsrs	r2, r3, #8
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3305      	adds	r3, #5
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0c1a      	lsrs	r2, r3, #16
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	3306      	adds	r3, #6
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0e1a      	lsrs	r2, r3, #24
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3307      	adds	r3, #7
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0220 	orr.w	r2, r2, #32
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	e007      	b.n	8004460 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0220 	orr.w	r2, r2, #32
 800445e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e006      	b.n	8004472 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <HAL_CAN_ActivateNotification+0x1e>
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d109      	bne.n	80044b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6959      	ldr	r1, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e006      	b.n	80044be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b08a      	sub	sp, #40	@ 0x28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d07c      	beq.n	800460a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d023      	beq.n	8004562 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f983 	bl	8004838 <HAL_CAN_TxMailbox0CompleteCallback>
 8004532:	e016      	b.n	8004562 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e00c      	b.n	8004562 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	e002      	b.n	8004562 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f989 	bl	8004874 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d024      	beq.n	80045b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004574:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f963 	bl	800484c <HAL_CAN_TxMailbox1CompleteCallback>
 8004586:	e016      	b.n	80045b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	e00c      	b.n	80045b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ae:	e002      	b.n	80045b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f969 	bl	8004888 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d024      	beq.n	800460a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80045c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f943 	bl	8004860 <HAL_CAN_TxMailbox2CompleteCallback>
 80045da:	e016      	b.n	800460a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ee:	e00c      	b.n	800460a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
 8004602:	e002      	b.n	800460a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f949 	bl	800489c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00c      	beq.n	800462e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2210      	movs	r2, #16
 800462c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2208      	movs	r2, #8
 8004648:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f930 	bl	80048b0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fe5b 	bl	8001324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00c      	beq.n	8004692 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00b      	beq.n	80046b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d006      	beq.n	80046b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f912 	bl	80048d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8f9 	bl	80048c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d006      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2210      	movs	r2, #16
 80046ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8fc 	bl	80048ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8f5 	bl	8004900 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d07b      	beq.n	8004818 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d072      	beq.n	8004810 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004784:	2b00      	cmp	r3, #0
 8004786:	d043      	beq.n	8004810 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03e      	beq.n	8004810 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004798:	2b60      	cmp	r3, #96	@ 0x60
 800479a:	d02b      	beq.n	80047f4 <HAL_CAN_IRQHandler+0x32a>
 800479c:	2b60      	cmp	r3, #96	@ 0x60
 800479e:	d82e      	bhi.n	80047fe <HAL_CAN_IRQHandler+0x334>
 80047a0:	2b50      	cmp	r3, #80	@ 0x50
 80047a2:	d022      	beq.n	80047ea <HAL_CAN_IRQHandler+0x320>
 80047a4:	2b50      	cmp	r3, #80	@ 0x50
 80047a6:	d82a      	bhi.n	80047fe <HAL_CAN_IRQHandler+0x334>
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d019      	beq.n	80047e0 <HAL_CAN_IRQHandler+0x316>
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d826      	bhi.n	80047fe <HAL_CAN_IRQHandler+0x334>
 80047b0:	2b30      	cmp	r3, #48	@ 0x30
 80047b2:	d010      	beq.n	80047d6 <HAL_CAN_IRQHandler+0x30c>
 80047b4:	2b30      	cmp	r3, #48	@ 0x30
 80047b6:	d822      	bhi.n	80047fe <HAL_CAN_IRQHandler+0x334>
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d002      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x2f8>
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d005      	beq.n	80047cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047c0:	e01d      	b.n	80047fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047ca:	e019      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	f043 0310 	orr.w	r3, r3, #16
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047d4:	e014      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047de:	e00f      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047e8:	e00a      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047f2:	e005      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80047fc:	e000      	b.n	8004800 <HAL_CAN_IRQHandler+0x336>
            break;
 80047fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800480e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2204      	movs	r2, #4
 8004816:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f872 	bl	8004914 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004830:	bf00      	nop
 8004832:	3728      	adds	r7, #40	@ 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <__NVIC_GetPriorityGrouping+0x18>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 0307 	and.w	r3, r3, #7
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db0b      	blt.n	80049b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <__NVIC_EnableIRQ+0x38>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2001      	movs	r0, #1
 80049ae:	fa00 f202 	lsl.w	r2, r0, r2
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000e100 	.word	0xe000e100

080049c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db0a      	blt.n	80049f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	490c      	ldr	r1, [pc, #48]	@ (8004a14 <__NVIC_SetPriority+0x4c>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	440b      	add	r3, r1
 80049ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f0:	e00a      	b.n	8004a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4908      	ldr	r1, [pc, #32]	@ (8004a18 <__NVIC_SetPriority+0x50>)
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3b04      	subs	r3, #4
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	440b      	add	r3, r1
 8004a06:	761a      	strb	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1c3 0307 	rsb	r3, r3, #7
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	bf28      	it	cs
 8004a3a:	2304      	movcs	r3, #4
 8004a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d902      	bls.n	8004a4c <NVIC_EncodePriority+0x30>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3b03      	subs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <NVIC_EncodePriority+0x32>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	401a      	ands	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43d9      	mvns	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	4313      	orrs	r3, r2
         );
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3724      	adds	r7, #36	@ 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ff4c 	bl	8004928 <__NVIC_SetPriorityGrouping>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aaa:	f7ff ff61 	bl	8004970 <__NVIC_GetPriorityGrouping>
 8004aae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f7ff ffb1 	bl	8004a1c <NVIC_EncodePriority>
 8004aba:	4602      	mov	r2, r0
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff80 	bl	80049c8 <__NVIC_SetPriority>
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff ff54 	bl	800498c <__NVIC_EnableIRQ>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e037      	b.n	8004b72 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004b18:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004b1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f941 	bl	8004ddc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Start_IT+0x20>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e04a      	b.n	8004c30 <HAL_DMA_Start_IT+0xb6>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d13a      	bne.n	8004c22 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f8d4 	bl	8004d7e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 020e 	orr.w	r2, r2, #14
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e00f      	b.n	8004c10 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 020a 	orr.w	r2, r2, #10
 8004bfe:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e005      	b.n	8004c2e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	2204      	movs	r2, #4
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d024      	beq.n	8004caa <HAL_DMA_IRQHandler+0x72>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01f      	beq.n	8004caa <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c90:	2104      	movs	r1, #4
 8004c92:	fa01 f202 	lsl.w	r2, r1, r2
 8004c96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d06a      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca8:	e065      	b.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2202      	movs	r2, #2
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02c      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xdc>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d027      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 020a 	bic.w	r2, r2, #10
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d035      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d12:	e030      	b.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	2208      	movs	r2, #8
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d028      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d023      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 020e 	bic.w	r2, r2, #14
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	2101      	movs	r1, #1
 8004d48:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
    }
  }
}
 8004d74:	e7ff      	b.n	8004d76 <HAL_DMA_IRQHandler+0x13e>
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f202 	lsl.w	r2, r1, r2
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d108      	bne.n	8004dbe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dbc:	e007      	b.n	8004dce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <DMA_CalcBaseAndBitshift+0x34>)
 8004dec:	4413      	add	r3, r2
 8004dee:	4a09      	ldr	r2, [pc, #36]	@ (8004e14 <DMA_CalcBaseAndBitshift+0x38>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	009a      	lsls	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a06      	ldr	r2, [pc, #24]	@ (8004e18 <DMA_CalcBaseAndBitshift+0x3c>)
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	bffdfff8 	.word	0xbffdfff8
 8004e14:	cccccccd 	.word	0xcccccccd
 8004e18:	40020000 	.word	0x40020000

08004e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e2a:	e14e      	b.n	80050ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8140 	beq.w	80050c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d005      	beq.n	8004e5c <HAL_GPIO_Init+0x40>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d130      	bne.n	8004ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e92:	2201      	movs	r2, #1
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0201 	and.w	r2, r3, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d017      	beq.n	8004efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d123      	bne.n	8004f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	08da      	lsrs	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3208      	adds	r2, #8
 8004f48:	6939      	ldr	r1, [r7, #16]
 8004f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 0203 	and.w	r2, r3, #3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 809a 	beq.w	80050c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f90:	4b55      	ldr	r3, [pc, #340]	@ (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	4a54      	ldr	r2, [pc, #336]	@ (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6193      	str	r3, [r2, #24]
 8004f9c:	4b52      	ldr	r3, [pc, #328]	@ (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fa8:	4a50      	ldr	r2, [pc, #320]	@ (80050ec <HAL_GPIO_Init+0x2d0>)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3302      	adds	r3, #2
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	220f      	movs	r2, #15
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fd2:	d013      	beq.n	8004ffc <HAL_GPIO_Init+0x1e0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a46      	ldr	r2, [pc, #280]	@ (80050f0 <HAL_GPIO_Init+0x2d4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00d      	beq.n	8004ff8 <HAL_GPIO_Init+0x1dc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a45      	ldr	r2, [pc, #276]	@ (80050f4 <HAL_GPIO_Init+0x2d8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <HAL_GPIO_Init+0x1d8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a44      	ldr	r2, [pc, #272]	@ (80050f8 <HAL_GPIO_Init+0x2dc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <HAL_GPIO_Init+0x1d4>
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff0:	2305      	movs	r3, #5
 8004ff2:	e004      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e002      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f002 0203 	and.w	r2, r2, #3
 8005004:	0092      	lsls	r2, r2, #2
 8005006:	4093      	lsls	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800500e:	4937      	ldr	r1, [pc, #220]	@ (80050ec <HAL_GPIO_Init+0x2d0>)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	089b      	lsrs	r3, r3, #2
 8005014:	3302      	adds	r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800501c:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	43db      	mvns	r3, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4013      	ands	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005040:	4a2e      	ldr	r2, [pc, #184]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005046:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800506a:	4a24      	ldr	r2, [pc, #144]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005070:	4b22      	ldr	r3, [pc, #136]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	43db      	mvns	r3, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800509a:	4b18      	ldr	r3, [pc, #96]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050be:	4a0f      	ldr	r2, [pc, #60]	@ (80050fc <HAL_GPIO_Init+0x2e0>)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3301      	adds	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f47f aea9 	bne.w	8004e2c <HAL_GPIO_Init+0x10>
  }
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40010000 	.word	0x40010000
 80050f0:	48000400 	.word	0x48000400
 80050f4:	48000800 	.word	0x48000800
 80050f8:	48000c00 	.word	0x48000c00
 80050fc:	40010400 	.word	0x40010400

08005100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e08d      	b.n	800522e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fa02 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	@ 0x24
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	e006      	b.n	8005188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d108      	bne.n	80051a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	e007      	b.n	80051b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	461a      	mov	r2, r3
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
 8005248:	4613      	mov	r3, r2
 800524a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	f040 80fd 	bne.w	8005454 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_I2C_Master_Transmit+0x30>
 8005264:	2302      	movs	r3, #2
 8005266:	e0f6      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005270:	f7fd fdca 	bl	8002e08 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2319      	movs	r3, #25
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa0a 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0e1      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2221      	movs	r2, #33	@ 0x21
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2210      	movs	r2, #16
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	893a      	ldrh	r2, [r7, #8]
 80052b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2bff      	cmp	r3, #255	@ 0xff
 80052c2:	d906      	bls.n	80052d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	22ff      	movs	r2, #255	@ 0xff
 80052c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80052ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e007      	b.n	80052e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80052dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d024      	beq.n	8005334 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	b2db      	uxtb	r3, r3
 8005320:	3301      	adds	r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	8979      	ldrh	r1, [r7, #10]
 8005326:	4b4e      	ldr	r3, [pc, #312]	@ (8005460 <HAL_I2C_Master_Transmit+0x228>)
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fc05 	bl	8005b3c <I2C_TransferConfig>
 8005332:	e066      	b.n	8005402 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	4b48      	ldr	r3, [pc, #288]	@ (8005460 <HAL_I2C_Master_Transmit+0x228>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fbfa 	bl	8005b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005348:	e05b      	b.n	8005402 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	6a39      	ldr	r1, [r7, #32]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f9fd 	bl	800574e <I2C_WaitOnTXISFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e07b      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d034      	beq.n	8005402 <HAL_I2C_Master_Transmit+0x1ca>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d130      	bne.n	8005402 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2180      	movs	r1, #128	@ 0x80
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f976 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e04d      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2bff      	cmp	r3, #255	@ 0xff
 80053c2:	d90e      	bls.n	80053e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	22ff      	movs	r2, #255	@ 0xff
 80053c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	8979      	ldrh	r1, [r7, #10]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fbae 	bl	8005b3c <I2C_TransferConfig>
 80053e0:	e00f      	b.n	8005402 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	8979      	ldrh	r1, [r7, #10]
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fb9d 	bl	8005b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d19e      	bne.n	800534a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	6a39      	ldr	r1, [r7, #32]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f9e3 	bl	80057dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e01a      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2220      	movs	r2, #32
 8005426:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <HAL_I2C_Master_Transmit+0x22c>)
 8005434:	400b      	ands	r3, r1
 8005436:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	80002000 	.word	0x80002000
 8005464:	fe00e800 	.word	0xfe00e800

08005468 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	461a      	mov	r2, r3
 8005474:	460b      	mov	r3, r1
 8005476:	817b      	strh	r3, [r7, #10]
 8005478:	4613      	mov	r3, r2
 800547a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 80db 	bne.w	8005640 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2C_Master_Receive+0x30>
 8005494:	2302      	movs	r3, #2
 8005496:	e0d4      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054a0:	f7fd fcb2 	bl	8002e08 <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2319      	movs	r3, #25
 80054ac:	2201      	movs	r2, #1
 80054ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f8f2 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e0bf      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2222      	movs	r2, #34	@ 0x22
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2210      	movs	r2, #16
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	893a      	ldrh	r2, [r7, #8]
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2bff      	cmp	r3, #255	@ 0xff
 80054f2:	d90e      	bls.n	8005512 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	8979      	ldrh	r1, [r7, #10]
 8005502:	4b52      	ldr	r3, [pc, #328]	@ (800564c <HAL_I2C_Master_Receive+0x1e4>)
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fb16 	bl	8005b3c <I2C_TransferConfig>
 8005510:	e06d      	b.n	80055ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	b2da      	uxtb	r2, r3
 8005522:	8979      	ldrh	r1, [r7, #10]
 8005524:	4b49      	ldr	r3, [pc, #292]	@ (800564c <HAL_I2C_Master_Receive+0x1e4>)
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fb05 	bl	8005b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005532:	e05c      	b.n	80055ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	6a39      	ldr	r1, [r7, #32]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f993 	bl	8005864 <I2C_WaitOnRXNEFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e07c      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d034      	beq.n	80055ee <HAL_I2C_Master_Receive+0x186>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d130      	bne.n	80055ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2200      	movs	r2, #0
 8005594:	2180      	movs	r1, #128	@ 0x80
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f880 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e04d      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2bff      	cmp	r3, #255	@ 0xff
 80055ae:	d90e      	bls.n	80055ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	22ff      	movs	r2, #255	@ 0xff
 80055b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	8979      	ldrh	r1, [r7, #10]
 80055be:	2300      	movs	r3, #0
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fab8 	bl	8005b3c <I2C_TransferConfig>
 80055cc:	e00f      	b.n	80055ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	8979      	ldrh	r1, [r7, #10]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 faa7 	bl	8005b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d19d      	bne.n	8005534 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	6a39      	ldr	r1, [r7, #32]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f8ed 	bl	80057dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e01a      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2220      	movs	r2, #32
 8005612:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_I2C_Master_Receive+0x1e8>)
 8005620:	400b      	ands	r3, r1
 8005622:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	80002400 	.word	0x80002400
 8005650:	fe00e800 	.word	0xfe00e800

08005654 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d103      	bne.n	8005672 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d007      	beq.n	8005690 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	619a      	str	r2, [r3, #24]
  }
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ac:	e03b      	b.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f962 	bl	800597c <I2C_IsErrorOccurred>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e041      	b.n	8005746 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d02d      	beq.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fd fb9d 	bl	8002e08 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d122      	bne.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d113      	bne.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e00f      	b.n	8005746 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d0b4      	beq.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800575a:	e033      	b.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f90b 	bl	800597c <I2C_IsErrorOccurred>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e031      	b.n	80057d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d025      	beq.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005778:	f7fd fb46 	bl	8002e08 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11a      	bne.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d013      	beq.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e007      	b.n	80057d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d1c4      	bne.n	800575c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057e8:	e02f      	b.n	800584a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f8c4 	bl	800597c <I2C_IsErrorOccurred>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e02d      	b.n	800585a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fd fb03 	bl	8002e08 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11a      	bne.n	800584a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d013      	beq.n	800584a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e007      	b.n	800585a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b20      	cmp	r3, #32
 8005856:	d1c8      	bne.n	80057ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005874:	e071      	b.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f87e 	bl	800597c <I2C_IsErrorOccurred>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b20      	cmp	r3, #32
 8005896:	d13b      	bne.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d138      	bne.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d105      	bne.n	80058b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d121      	bne.n	800590a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2210      	movs	r2, #16
 80058cc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2204      	movs	r2, #4
 80058d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2220      	movs	r2, #32
 80058da:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b24      	ldr	r3, [pc, #144]	@ (8005978 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80058e8:	400b      	ands	r3, r1
 80058ea:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
 8005908:	e002      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005910:	f7fd fa7a 	bl	8002e08 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d119      	bne.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d116      	bne.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b04      	cmp	r3, #4
 8005938:	d00f      	beq.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d002      	beq.n	800596e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d083      	beq.n	8005876 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	fe00e800 	.word	0xfe00e800

0800597c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d068      	beq.n	8005a7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2210      	movs	r2, #16
 80059ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059b0:	e049      	b.n	8005a46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d045      	beq.n	8005a46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059ba:	f7fd fa25 	bl	8002e08 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <I2C_IsErrorOccurred+0x54>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d13a      	bne.n	8005a46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f2:	d121      	bne.n	8005a38 <I2C_IsErrorOccurred+0xbc>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059fa:	d01d      	beq.n	8005a38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d01a      	beq.n	8005a38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a12:	f7fd f9f9 	bl	8002e08 <HAL_GetTick>
 8005a16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a18:	e00e      	b.n	8005a38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a1a:	f7fd f9f5 	bl	8002e08 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b19      	cmp	r3, #25
 8005a26:	d907      	bls.n	8005a38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	f043 0320 	orr.w	r3, r3, #32
 8005a2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a36:	e006      	b.n	8005a46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d1e9      	bne.n	8005a1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d003      	beq.n	8005a5c <I2C_IsErrorOccurred+0xe0>
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0aa      	beq.n	80059b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f043 0308 	orr.w	r3, r3, #8
 8005ab4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f043 0302 	orr.w	r3, r3, #2
 8005ad6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fdaf 	bl	8005654 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <I2C_IsErrorOccurred+0x1bc>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3728      	adds	r7, #40	@ 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	fe00e800 	.word	0xfe00e800

08005b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	817b      	strh	r3, [r7, #10]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b4e:	897b      	ldrh	r3, [r7, #10]
 8005b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b54:	7a7b      	ldrb	r3, [r7, #9]
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	0d5b      	lsrs	r3, r3, #21
 8005b76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b7a:	4b08      	ldr	r3, [pc, #32]	@ (8005b9c <I2C_TransferConfig+0x60>)
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	ea02 0103 	and.w	r1, r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	03ff63ff 	.word	0x03ff63ff

08005ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d138      	bne.n	8005c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e032      	b.n	8005c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d139      	bne.n	8005cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e033      	b.n	8005cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	@ 0x24
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ce0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f000 bff4 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 816d 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d0c:	4bb4      	ldr	r3, [pc, #720]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d00c      	beq.n	8005d32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d18:	4bb1      	ldr	r3, [pc, #708]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 030c 	and.w	r3, r3, #12
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d157      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x104>
 8005d24:	4bae      	ldr	r3, [pc, #696]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d30:	d150      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x104>
 8005d32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d36:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005d3e:	fa93 f3a3 	rbit	r3, r3
 8005d42:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d52:	d802      	bhi.n	8005d5a <HAL_RCC_OscConfig+0x8a>
 8005d54:	4ba2      	ldr	r3, [pc, #648]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	e015      	b.n	8005d86 <HAL_RCC_OscConfig+0xb6>
 8005d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d5e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005d6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d72:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005d76:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005d7a:	fa93 f3a3 	rbit	r3, r3
 8005d7e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005d82:	4b97      	ldr	r3, [pc, #604]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d8a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005d8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005d92:	fa92 f2a2 	rbit	r2, r2
 8005d96:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005d9a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005d9e:	fab2 f282 	clz	r2, r2
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	f042 0220 	orr.w	r2, r2, #32
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	f002 021f 	and.w	r2, r2, #31
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f202 	lsl.w	r2, r1, r2
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8114 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x314>
 8005dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 810b 	bne.w	8005fe4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f000 bf85 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de4:	d106      	bne.n	8005df4 <HAL_RCC_OscConfig+0x124>
 8005de6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a7d      	ldr	r2, [pc, #500]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e036      	b.n	8005e62 <HAL_RCC_OscConfig+0x192>
 8005df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10c      	bne.n	8005e1e <HAL_RCC_OscConfig+0x14e>
 8005e04:	4b76      	ldr	r3, [pc, #472]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a75      	ldr	r2, [pc, #468]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	4b73      	ldr	r3, [pc, #460]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a72      	ldr	r2, [pc, #456]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e021      	b.n	8005e62 <HAL_RCC_OscConfig+0x192>
 8005e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x17a>
 8005e30:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a6a      	ldr	r2, [pc, #424]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b68      	ldr	r3, [pc, #416]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a67      	ldr	r2, [pc, #412]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e00b      	b.n	8005e62 <HAL_RCC_OscConfig+0x192>
 8005e4a:	4b65      	ldr	r3, [pc, #404]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a64      	ldr	r2, [pc, #400]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b62      	ldr	r3, [pc, #392]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a61      	ldr	r2, [pc, #388]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e62:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	f023 020f 	bic.w	r2, r3, #15
 8005e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	495a      	ldr	r1, [pc, #360]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d054      	beq.n	8005f36 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fc ffbc 	bl	8002e08 <HAL_GetTick>
 8005e90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e94:	e00a      	b.n	8005eac <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e96:	f7fc ffb7 	bl	8002e08 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	@ 0x64
 8005ea4:	d902      	bls.n	8005eac <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	f000 bf19 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 8005eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eb0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005ec0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec4:	fab3 f383 	clz	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ecc:	d802      	bhi.n	8005ed4 <HAL_RCC_OscConfig+0x204>
 8005ece:	4b44      	ldr	r3, [pc, #272]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	e015      	b.n	8005f00 <HAL_RCC_OscConfig+0x230>
 8005ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ed8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005ee8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005ef0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005efc:	4b38      	ldr	r3, [pc, #224]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f04:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005f08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005f0c:	fa92 f2a2 	rbit	r2, r2
 8005f10:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005f14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005f18:	fab2 f282 	clz	r2, r2
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	f042 0220 	orr.w	r2, r2, #32
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	f002 021f 	and.w	r2, r2, #31
 8005f28:	2101      	movs	r1, #1
 8005f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0b0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x1c6>
 8005f34:	e057      	b.n	8005fe6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fc ff67 	bl	8002e08 <HAL_GetTick>
 8005f3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fc ff62 	bl	8002e08 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b64      	cmp	r3, #100	@ 0x64
 8005f4e:	d902      	bls.n	8005f56 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	f000 bec4 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 8005f56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f5a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005f6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f76:	d802      	bhi.n	8005f7e <HAL_RCC_OscConfig+0x2ae>
 8005f78:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	e015      	b.n	8005faa <HAL_RCC_OscConfig+0x2da>
 8005f7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f82:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f86:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005f8a:	fa93 f3a3 	rbit	r3, r3
 8005f8e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005f92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f96:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005f9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005f9e:	fa93 f3a3 	rbit	r3, r3
 8005fa2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <HAL_RCC_OscConfig+0x310>)
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005fae:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005fb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005fb6:	fa92 f2a2 	rbit	r2, r2
 8005fba:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005fbe:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005fc2:	fab2 f282 	clz	r2, r2
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	f042 0220 	orr.w	r2, r2, #32
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	f002 021f 	and.w	r2, r2, #31
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1b0      	bne.n	8005f40 <HAL_RCC_OscConfig+0x270>
 8005fde:	e002      	b.n	8005fe6 <HAL_RCC_OscConfig+0x316>
 8005fe0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 816c 	beq.w	80062d4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ffc:	4bcc      	ldr	r3, [pc, #816]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 030c 	and.w	r3, r3, #12
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006008:	4bc9      	ldr	r3, [pc, #804]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b08      	cmp	r3, #8
 8006012:	d16d      	bne.n	80060f0 <HAL_RCC_OscConfig+0x420>
 8006014:	4bc6      	ldr	r3, [pc, #792]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d167      	bne.n	80060f0 <HAL_RCC_OscConfig+0x420>
 8006020:	2302      	movs	r3, #2
 8006022:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800602a:	fa93 f3a3 	rbit	r3, r3
 800602e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8006032:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006036:	fab3 f383 	clz	r3, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b3f      	cmp	r3, #63	@ 0x3f
 800603e:	d802      	bhi.n	8006046 <HAL_RCC_OscConfig+0x376>
 8006040:	4bbb      	ldr	r3, [pc, #748]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	e013      	b.n	800606e <HAL_RCC_OscConfig+0x39e>
 8006046:	2302      	movs	r3, #2
 8006048:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006050:	fa93 f3a3 	rbit	r3, r3
 8006054:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8006058:	2302      	movs	r3, #2
 800605a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800605e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800606a:	4bb1      	ldr	r3, [pc, #708]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	2202      	movs	r2, #2
 8006070:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8006074:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006078:	fa92 f2a2 	rbit	r2, r2
 800607c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8006080:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8006084:	fab2 f282 	clz	r2, r2
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	f042 0220 	orr.w	r2, r2, #32
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	f002 021f 	and.w	r2, r2, #31
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f202 	lsl.w	r2, r1, r2
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_RCC_OscConfig+0x3e6>
 80060a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f000 be14 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b6:	4b9e      	ldr	r3, [pc, #632]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	21f8      	movs	r1, #248	@ 0xf8
 80060cc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80060d4:	fa91 f1a1 	rbit	r1, r1
 80060d8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80060dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80060e0:	fab1 f181 	clz	r1, r1
 80060e4:	b2c9      	uxtb	r1, r1
 80060e6:	408b      	lsls	r3, r1
 80060e8:	4991      	ldr	r1, [pc, #580]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	e0f1      	b.n	80062d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8083 	beq.w	8006208 <HAL_RCC_OscConfig+0x538>
 8006102:	2301      	movs	r3, #1
 8006104:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006114:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006122:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	461a      	mov	r2, r3
 800612a:	2301      	movs	r3, #1
 800612c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612e:	f7fc fe6b 	bl	8002e08 <HAL_GetTick>
 8006132:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006136:	e00a      	b.n	800614e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006138:	f7fc fe66 	bl	8002e08 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d902      	bls.n	800614e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	f000 bdc8 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 800614e:	2302      	movs	r3, #2
 8006150:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006154:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006158:	fa93 f3a3 	rbit	r3, r3
 800615c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006160:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b3f      	cmp	r3, #63	@ 0x3f
 800616c:	d802      	bhi.n	8006174 <HAL_RCC_OscConfig+0x4a4>
 800616e:	4b70      	ldr	r3, [pc, #448]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	e013      	b.n	800619c <HAL_RCC_OscConfig+0x4cc>
 8006174:	2302      	movs	r3, #2
 8006176:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800617e:	fa93 f3a3 	rbit	r3, r3
 8006182:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006186:	2302      	movs	r3, #2
 8006188:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800618c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8006190:	fa93 f3a3 	rbit	r3, r3
 8006194:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8006198:	4b65      	ldr	r3, [pc, #404]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	2202      	movs	r2, #2
 800619e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80061a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80061a6:	fa92 f2a2 	rbit	r2, r2
 80061aa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80061ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80061b2:	fab2 f282 	clz	r2, r2
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	f042 0220 	orr.w	r2, r2, #32
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	f002 021f 	and.w	r2, r2, #31
 80061c2:	2101      	movs	r1, #1
 80061c4:	fa01 f202 	lsl.w	r2, r1, r2
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0b4      	beq.n	8006138 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ce:	4b58      	ldr	r3, [pc, #352]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	21f8      	movs	r1, #248	@ 0xf8
 80061e4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80061ec:	fa91 f1a1 	rbit	r1, r1
 80061f0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80061f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80061f8:	fab1 f181 	clz	r1, r1
 80061fc:	b2c9      	uxtb	r1, r1
 80061fe:	408b      	lsls	r3, r1
 8006200:	494b      	ldr	r1, [pc, #300]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8006202:	4313      	orrs	r3, r2
 8006204:	600b      	str	r3, [r1, #0]
 8006206:	e065      	b.n	80062d4 <HAL_RCC_OscConfig+0x604>
 8006208:	2301      	movs	r3, #1
 800620a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800621a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800621e:	fab3 f383 	clz	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006228:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006234:	f7fc fde8 	bl	8002e08 <HAL_GetTick>
 8006238:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623c:	e00a      	b.n	8006254 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800623e:	f7fc fde3 	bl	8002e08 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d902      	bls.n	8006254 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	f000 bd45 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 8006254:	2302      	movs	r3, #2
 8006256:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800625e:	fa93 f3a3 	rbit	r3, r3
 8006262:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626a:	fab3 f383 	clz	r3, r3
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b3f      	cmp	r3, #63	@ 0x3f
 8006272:	d802      	bhi.n	800627a <HAL_RCC_OscConfig+0x5aa>
 8006274:	4b2e      	ldr	r3, [pc, #184]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	e013      	b.n	80062a2 <HAL_RCC_OscConfig+0x5d2>
 800627a:	2302      	movs	r3, #2
 800627c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006280:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006284:	fa93 f3a3 	rbit	r3, r3
 8006288:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800628c:	2302      	movs	r3, #2
 800628e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006292:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006296:	fa93 f3a3 	rbit	r3, r3
 800629a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800629e:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_RCC_OscConfig+0x660>)
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2202      	movs	r2, #2
 80062a4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80062a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80062ac:	fa92 f2a2 	rbit	r2, r2
 80062b0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80062b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80062b8:	fab2 f282 	clz	r2, r2
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	f042 0220 	orr.w	r2, r2, #32
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	f002 021f 	and.w	r2, r2, #31
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f202 	lsl.w	r2, r1, r2
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1b4      	bne.n	800623e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8115 	beq.w	8006514 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d07e      	beq.n	80063f8 <HAL_RCC_OscConfig+0x728>
 80062fa:	2301      	movs	r3, #1
 80062fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006304:	fa93 f3a3 	rbit	r3, r3
 8006308:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <HAL_RCC_OscConfig+0x664>)
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	461a      	mov	r2, r3
 8006320:	2301      	movs	r3, #1
 8006322:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006324:	f7fc fd70 	bl	8002e08 <HAL_GetTick>
 8006328:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632c:	e00f      	b.n	800634e <HAL_RCC_OscConfig+0x67e>
 800632e:	bf00      	nop
 8006330:	40021000 	.word	0x40021000
 8006334:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006338:	f7fc fd66 	bl	8002e08 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d902      	bls.n	800634e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f000 bcc8 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 800634e:	2302      	movs	r3, #2
 8006350:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006354:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006358:	fa93 f3a3 	rbit	r3, r3
 800635c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006364:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006368:	2202      	movs	r2, #2
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006370:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	fa93 f2a3 	rbit	r2, r3
 800637a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638c:	2202      	movs	r2, #2
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	fa93 f2a3 	rbit	r2, r3
 800639e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80063a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a8:	4bb0      	ldr	r3, [pc, #704]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80063aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80063b4:	2102      	movs	r1, #2
 80063b6:	6019      	str	r1, [r3, #0]
 80063b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	fa93 f1a3 	rbit	r1, r3
 80063c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80063ce:	6019      	str	r1, [r3, #0]
  return result;
 80063d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	fab3 f383 	clz	r3, r3
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2101      	movs	r1, #1
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0a0      	beq.n	8006338 <HAL_RCC_OscConfig+0x668>
 80063f6:	e08d      	b.n	8006514 <HAL_RCC_OscConfig+0x844>
 80063f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006408:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	fa93 f2a3 	rbit	r2, r3
 8006412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006416:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800641a:	601a      	str	r2, [r3, #0]
  return result;
 800641c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006420:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006424:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	4b90      	ldr	r3, [pc, #576]	@ (8006670 <HAL_RCC_OscConfig+0x9a0>)
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643a:	f7fc fce5 	bl	8002e08 <HAL_GetTick>
 800643e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006442:	e00a      	b.n	800645a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006444:	f7fc fce0 	bl	8002e08 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d902      	bls.n	800645a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	f000 bc42 	b.w	8006cde <HAL_RCC_OscConfig+0x100e>
 800645a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800645e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006462:	2202      	movs	r2, #2
 8006464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800646a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	fa93 f2a3 	rbit	r2, r3
 8006474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006478:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006482:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006486:	2202      	movs	r2, #2
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800648e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	fa93 f2a3 	rbit	r2, r3
 8006498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800649c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80064aa:	2202      	movs	r2, #2
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	fa93 f2a3 	rbit	r2, r3
 80064bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80064c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c6:	4b69      	ldr	r3, [pc, #420]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80064c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80064d2:	2102      	movs	r1, #2
 80064d4:	6019      	str	r1, [r3, #0]
 80064d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	fa93 f1a3 	rbit	r1, r3
 80064e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80064ec:	6019      	str	r1, [r3, #0]
  return result;
 80064ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d197      	bne.n	8006444 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 819e 	beq.w	8006866 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006530:	4b4e      	ldr	r3, [pc, #312]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d116      	bne.n	800656a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653c:	4b4b      	ldr	r3, [pc, #300]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4a4a      	ldr	r2, [pc, #296]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006546:	61d3      	str	r3, [r2, #28]
 8006548:	4b48      	ldr	r3, [pc, #288]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006554:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800655e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006562:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656a:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <HAL_RCC_OscConfig+0x9a4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d11a      	bne.n	80065ac <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006576:	4b3f      	ldr	r3, [pc, #252]	@ (8006674 <HAL_RCC_OscConfig+0x9a4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3e      	ldr	r2, [pc, #248]	@ (8006674 <HAL_RCC_OscConfig+0x9a4>)
 800657c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006580:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006582:	f7fc fc41 	bl	8002e08 <HAL_GetTick>
 8006586:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658a:	e009      	b.n	80065a0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658c:	f7fc fc3c 	bl	8002e08 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b64      	cmp	r3, #100	@ 0x64
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e39e      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a0:	4b34      	ldr	r3, [pc, #208]	@ (8006674 <HAL_RCC_OscConfig+0x9a4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ef      	beq.n	800658c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x8fa>
 80065bc:	4b2b      	ldr	r3, [pc, #172]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	4a2a      	ldr	r2, [pc, #168]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6213      	str	r3, [r2, #32]
 80065c8:	e035      	b.n	8006636 <HAL_RCC_OscConfig+0x966>
 80065ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x924>
 80065da:	4b24      	ldr	r3, [pc, #144]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4a23      	ldr	r2, [pc, #140]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	6213      	str	r3, [r2, #32]
 80065e6:	4b21      	ldr	r3, [pc, #132]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	4a20      	ldr	r2, [pc, #128]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	6213      	str	r3, [r2, #32]
 80065f2:	e020      	b.n	8006636 <HAL_RCC_OscConfig+0x966>
 80065f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	2b05      	cmp	r3, #5
 8006602:	d10c      	bne.n	800661e <HAL_RCC_OscConfig+0x94e>
 8006604:	4b19      	ldr	r3, [pc, #100]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	4a18      	ldr	r2, [pc, #96]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	6213      	str	r3, [r2, #32]
 8006610:	4b16      	ldr	r3, [pc, #88]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	4a15      	ldr	r2, [pc, #84]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6213      	str	r3, [r2, #32]
 800661c:	e00b      	b.n	8006636 <HAL_RCC_OscConfig+0x966>
 800661e:	4b13      	ldr	r3, [pc, #76]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4a12      	ldr	r2, [pc, #72]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6213      	str	r3, [r2, #32]
 800662a:	4b10      	ldr	r3, [pc, #64]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	4a0f      	ldr	r2, [pc, #60]	@ (800666c <HAL_RCC_OscConfig+0x99c>)
 8006630:	f023 0304 	bic.w	r3, r3, #4
 8006634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800663a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8087 	beq.w	8006756 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006648:	f7fc fbde 	bl	8002e08 <HAL_GetTick>
 800664c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006650:	e012      	b.n	8006678 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006652:	f7fc fbd9 	bl	8002e08 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d908      	bls.n	8006678 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e339      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000
 8006670:	10908120 	.word	0x10908120
 8006674:	40007000 	.word	0x40007000
 8006678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800667c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006680:	2202      	movs	r2, #2
 8006682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006688:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	fa93 f2a3 	rbit	r2, r3
 8006692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006696:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066a4:	2202      	movs	r2, #2
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	fa93 f2a3 	rbit	r2, r3
 80066b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80066be:	601a      	str	r2, [r3, #0]
  return result;
 80066c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80066c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ca:	fab3 f383 	clz	r3, r3
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <HAL_RCC_OscConfig+0xa10>
 80066da:	4b98      	ldr	r3, [pc, #608]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	e013      	b.n	8006708 <HAL_RCC_OscConfig+0xa38>
 80066e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80066e8:	2202      	movs	r2, #2
 80066ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	fa93 f2a3 	rbit	r2, r3
 80066fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	4b8d      	ldr	r3, [pc, #564]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800670c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006710:	2102      	movs	r1, #2
 8006712:	6011      	str	r1, [r2, #0]
 8006714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006718:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	fa92 f1a2 	rbit	r1, r2
 8006722:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006726:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800672a:	6011      	str	r1, [r2, #0]
  return result;
 800672c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006730:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	fab2 f282 	clz	r2, r2
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	f002 021f 	and.w	r2, r2, #31
 8006746:	2101      	movs	r1, #1
 8006748:	fa01 f202 	lsl.w	r2, r1, r2
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	f43f af7f 	beq.w	8006652 <HAL_RCC_OscConfig+0x982>
 8006754:	e07d      	b.n	8006852 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006756:	f7fc fb57 	bl	8002e08 <HAL_GetTick>
 800675a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006760:	f7fc fb52 	bl	8002e08 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e2b2      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 8006778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800677c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006780:	2202      	movs	r2, #2
 8006782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006788:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	fa93 f2a3 	rbit	r2, r3
 8006792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006796:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067a0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80067a4:	2202      	movs	r2, #2
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	fa93 f2a3 	rbit	r2, r3
 80067b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80067be:	601a      	str	r2, [r3, #0]
  return result;
 80067c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80067c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ca:	fab3 f383 	clz	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_RCC_OscConfig+0xb10>
 80067da:	4b58      	ldr	r3, [pc, #352]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	e013      	b.n	8006808 <HAL_RCC_OscConfig+0xb38>
 80067e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80067e8:	2202      	movs	r2, #2
 80067ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	fa93 f2a3 	rbit	r2, r3
 80067fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	4b4d      	ldr	r3, [pc, #308]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800680c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006810:	2102      	movs	r1, #2
 8006812:	6011      	str	r1, [r2, #0]
 8006814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006818:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	fa92 f1a2 	rbit	r1, r2
 8006822:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006826:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800682a:	6011      	str	r1, [r2, #0]
  return result;
 800682c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006830:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	fab2 f282 	clz	r2, r2
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	f002 021f 	and.w	r2, r2, #31
 8006846:	2101      	movs	r1, #1
 8006848:	fa01 f202 	lsl.w	r2, r1, r2
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d186      	bne.n	8006760 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006852:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685a:	4b38      	ldr	r3, [pc, #224]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	4a37      	ldr	r2, [pc, #220]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006864:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800686a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8232 	beq.w	8006cdc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006878:	4b30      	ldr	r3, [pc, #192]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 030c 	and.w	r3, r3, #12
 8006880:	2b08      	cmp	r3, #8
 8006882:	f000 8201 	beq.w	8006c88 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800688a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b02      	cmp	r3, #2
 8006894:	f040 8157 	bne.w	8006b46 <HAL_RCC_OscConfig+0xe76>
 8006898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80068a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068aa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	fa93 f2a3 	rbit	r2, r3
 80068b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80068bc:	601a      	str	r2, [r3, #0]
  return result;
 80068be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80068c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c8:	fab3 f383 	clz	r3, r3
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80068d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068de:	f7fc fa93 	bl	8002e08 <HAL_GetTick>
 80068e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e6:	e009      	b.n	80068fc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e8:	f7fc fa8e 	bl	8002e08 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e1f0      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 80068fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006900:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800690e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	fa93 f2a3 	rbit	r2, r3
 8006918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006920:	601a      	str	r2, [r3, #0]
  return result;
 8006922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006926:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800692a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800692c:	fab3 f383 	clz	r3, r3
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b3f      	cmp	r3, #63	@ 0x3f
 8006934:	d804      	bhi.n	8006940 <HAL_RCC_OscConfig+0xc70>
 8006936:	4b01      	ldr	r3, [pc, #4]	@ (800693c <HAL_RCC_OscConfig+0xc6c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	e029      	b.n	8006990 <HAL_RCC_OscConfig+0xcc0>
 800693c:	40021000 	.word	0x40021000
 8006940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006944:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800694c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006952:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	fa93 f2a3 	rbit	r2, r3
 800695c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006960:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800696a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800696e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006978:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	fa93 f2a3 	rbit	r2, r3
 8006982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006986:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	4bc3      	ldr	r3, [pc, #780]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006994:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006998:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80069a2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	fa92 f1a2 	rbit	r1, r2
 80069ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80069b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80069b4:	6011      	str	r1, [r2, #0]
  return result;
 80069b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80069ba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	fab2 f282 	clz	r2, r2
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	f042 0220 	orr.w	r2, r2, #32
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	f002 021f 	and.w	r2, r2, #31
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f202 	lsl.w	r2, r1, r2
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d185      	bne.n	80068e8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069dc:	4baf      	ldr	r3, [pc, #700]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80069e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	49a7      	ldr	r1, [pc, #668]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
 8006a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a08:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a16:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	fa93 f2a3 	rbit	r2, r3
 8006a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a24:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006a28:	601a      	str	r2, [r3, #0]
  return result;
 8006a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006a32:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a34:	fab3 f383 	clz	r3, r3
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006a3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	461a      	mov	r2, r3
 8006a46:	2301      	movs	r3, #1
 8006a48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4a:	f7fc f9dd 	bl	8002e08 <HAL_GetTick>
 8006a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a52:	e009      	b.n	8006a68 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fc f9d8 	bl	8002e08 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e13a      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 8006a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a6c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006a70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a7a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	fa93 f2a3 	rbit	r2, r3
 8006a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a88:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006a8c:	601a      	str	r2, [r3, #0]
  return result;
 8006a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a92:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006a96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a98:	fab3 f383 	clz	r3, r3
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006aa0:	d802      	bhi.n	8006aa8 <HAL_RCC_OscConfig+0xdd8>
 8006aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	e027      	b.n	8006af8 <HAL_RCC_OscConfig+0xe28>
 8006aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	fa93 f2a3 	rbit	r2, r3
 8006ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ac8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ad2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006ad6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	fa93 f2a3 	rbit	r2, r3
 8006aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	4b69      	ldr	r3, [pc, #420]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006afc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006b04:	6011      	str	r1, [r2, #0]
 8006b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b0a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	fa92 f1a2 	rbit	r1, r2
 8006b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b18:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b1c:	6011      	str	r1, [r2, #0]
  return result;
 8006b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b22:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	fab2 f282 	clz	r2, r2
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	f042 0220 	orr.w	r2, r2, #32
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	f002 021f 	and.w	r2, r2, #31
 8006b38:	2101      	movs	r1, #1
 8006b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d087      	beq.n	8006a54 <HAL_RCC_OscConfig+0xd84>
 8006b44:	e0ca      	b.n	8006cdc <HAL_RCC_OscConfig+0x100c>
 8006b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b58:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	fa93 f2a3 	rbit	r2, r3
 8006b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b66:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006b6a:	601a      	str	r2, [r3, #0]
  return result;
 8006b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b70:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006b74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b76:	fab3 f383 	clz	r3, r3
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fc f93c 	bl	8002e08 <HAL_GetTick>
 8006b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b94:	e009      	b.n	8006baa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b96:	f7fc f937 	bl	8002e08 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e099      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 8006baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bbc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	fa93 f2a3 	rbit	r2, r3
 8006bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006bce:	601a      	str	r2, [r3, #0]
  return result;
 8006bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bd4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bda:	fab3 f383 	clz	r3, r3
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b3f      	cmp	r3, #63	@ 0x3f
 8006be2:	d802      	bhi.n	8006bea <HAL_RCC_OscConfig+0xf1a>
 8006be4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	e027      	b.n	8006c3a <HAL_RCC_OscConfig+0xf6a>
 8006bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006bf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bfc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	fa93 f2a3 	rbit	r2, r3
 8006c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c0a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c14:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c22:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	fa93 f2a3 	rbit	r2, r3
 8006c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c30:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <HAL_RCC_OscConfig+0xfcc>)
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c3e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006c42:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006c46:	6011      	str	r1, [r2, #0]
 8006c48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c4c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	fa92 f1a2 	rbit	r1, r2
 8006c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006c5e:	6011      	str	r1, [r2, #0]
  return result;
 8006c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c64:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	fab2 f282 	clz	r2, r2
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	f042 0220 	orr.w	r2, r2, #32
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	f002 021f 	and.w	r2, r2, #31
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d187      	bne.n	8006b96 <HAL_RCC_OscConfig+0xec6>
 8006c86:	e029      	b.n	8006cdc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d103      	bne.n	8006ca0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e020      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
 8006c9c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ca0:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <HAL_RCC_OscConfig+0x1018>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ca8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006cac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006cc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006cc4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000

08006cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b09e      	sub	sp, #120	@ 0x78
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e154      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d04:	4b89      	ldr	r3, [pc, #548]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d910      	bls.n	8006d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d12:	4b86      	ldr	r3, [pc, #536]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f023 0207 	bic.w	r2, r3, #7
 8006d1a:	4984      	ldr	r1, [pc, #528]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d22:	4b82      	ldr	r3, [pc, #520]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e13c      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b7b      	ldr	r3, [pc, #492]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4978      	ldr	r1, [pc, #480]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80cd 	beq.w	8006efa <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d137      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0xec>
 8006d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d70:	fa93 f3a3 	rbit	r3, r3
 8006d74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d78:	fab3 f383 	clz	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d80:	d802      	bhi.n	8006d88 <HAL_RCC_ClockConfig+0x9c>
 8006d82:	4b6b      	ldr	r3, [pc, #428]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	e00f      	b.n	8006da8 <HAL_RCC_ClockConfig+0xbc>
 8006d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d90:	fa93 f3a3 	rbit	r3, r3
 8006d94:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d9e:	fa93 f3a3 	rbit	r3, r3
 8006da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006da4:	4b62      	ldr	r3, [pc, #392]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006dac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006db0:	fa92 f2a2 	rbit	r2, r2
 8006db4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006db6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006db8:	fab2 f282 	clz	r2, r2
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	f042 0220 	orr.w	r2, r2, #32
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	f002 021f 	and.w	r2, r2, #31
 8006dc8:	2101      	movs	r1, #1
 8006dca:	fa01 f202 	lsl.w	r2, r1, r2
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d171      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0ea      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d137      	bne.n	8006e50 <HAL_RCC_ClockConfig+0x164>
 8006de0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006de4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de8:	fa93 f3a3 	rbit	r3, r3
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df0:	fab3 f383 	clz	r3, r3
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006df8:	d802      	bhi.n	8006e00 <HAL_RCC_ClockConfig+0x114>
 8006dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	e00f      	b.n	8006e20 <HAL_RCC_ClockConfig+0x134>
 8006e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e08:	fa93 f3a3 	rbit	r3, r3
 8006e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e16:	fa93 f3a3 	rbit	r3, r3
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e1c:	4b44      	ldr	r3, [pc, #272]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e24:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e28:	fa92 f2a2 	rbit	r2, r2
 8006e2c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e30:	fab2 f282 	clz	r2, r2
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	f042 0220 	orr.w	r2, r2, #32
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	f002 021f 	and.w	r2, r2, #31
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f202 	lsl.w	r2, r1, r2
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d135      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0ae      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
 8006e50:	2302      	movs	r3, #2
 8006e52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	fa93 f3a3 	rbit	r3, r3
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5e:	fab3 f383 	clz	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e66:	d802      	bhi.n	8006e6e <HAL_RCC_ClockConfig+0x182>
 8006e68:	4b31      	ldr	r3, [pc, #196]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	e00d      	b.n	8006e8a <HAL_RCC_ClockConfig+0x19e>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e74:	fa93 f3a3 	rbit	r3, r3
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	623b      	str	r3, [r7, #32]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	fa93 f3a3 	rbit	r3, r3
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	4b2a      	ldr	r3, [pc, #168]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	61ba      	str	r2, [r7, #24]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	fa92 f2a2 	rbit	r2, r2
 8006e94:	617a      	str	r2, [r7, #20]
  return result;
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	fab2 f282 	clz	r2, r2
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	f042 0220 	orr.w	r2, r2, #32
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	f002 021f 	and.w	r2, r2, #31
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e07a      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f023 0203 	bic.w	r2, r3, #3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	491a      	ldr	r1, [pc, #104]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eca:	f7fb ff9d 	bl	8002e08 <HAL_GetTick>
 8006ece:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed2:	f7fb ff99 	bl	8002e08 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e062      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee8:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 020c 	and.w	r2, r3, #12
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d1eb      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006efa:	4b0c      	ldr	r3, [pc, #48]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d215      	bcs.n	8006f34 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f08:	4b08      	ldr	r3, [pc, #32]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f023 0207 	bic.w	r2, r3, #7
 8006f10:	4906      	ldr	r1, [pc, #24]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f18:	4b04      	ldr	r3, [pc, #16]	@ (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d006      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e041      	b.n	8006fae <HAL_RCC_ClockConfig+0x2c2>
 8006f2a:	bf00      	nop
 8006f2c:	40022000 	.word	0x40022000
 8006f30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <HAL_RCC_ClockConfig+0x2cc>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	491a      	ldr	r1, [pc, #104]	@ (8006fb8 <HAL_RCC_ClockConfig+0x2cc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f5e:	4b16      	ldr	r3, [pc, #88]	@ (8006fb8 <HAL_RCC_ClockConfig+0x2cc>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4912      	ldr	r1, [pc, #72]	@ (8006fb8 <HAL_RCC_ClockConfig+0x2cc>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006f72:	f000 f829 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8006f76:	4601      	mov	r1, r0
 8006f78:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <HAL_RCC_ClockConfig+0x2cc>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f80:	22f0      	movs	r2, #240	@ 0xf0
 8006f82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	fa92 f2a2 	rbit	r2, r2
 8006f8a:	60fa      	str	r2, [r7, #12]
  return result;
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	fab2 f282 	clz	r2, r2
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	40d3      	lsrs	r3, r2
 8006f96:	4a09      	ldr	r2, [pc, #36]	@ (8006fbc <HAL_RCC_ClockConfig+0x2d0>)
 8006f98:	5cd3      	ldrb	r3, [r2, r3]
 8006f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8006f9e:	4a08      	ldr	r2, [pc, #32]	@ (8006fc0 <HAL_RCC_ClockConfig+0x2d4>)
 8006fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006fa2:	4b08      	ldr	r3, [pc, #32]	@ (8006fc4 <HAL_RCC_ClockConfig+0x2d8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fb fd02 	bl	80029b0 <HAL_InitTick>
  
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3778      	adds	r7, #120	@ 0x78
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	0800abfc 	.word	0x0800abfc
 8006fc0:	20000018 	.word	0x20000018
 8006fc4:	2000001c 	.word	0x2000001c

08006fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800705c <HAL_RCC_GetSysClockFreq+0x94>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d002      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCC_GetSysClockFreq+0x36>
 8006ff6:	e026      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ff8:	4b19      	ldr	r3, [pc, #100]	@ (8007060 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ffa:	613b      	str	r3, [r7, #16]
      break;
 8006ffc:	e026      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0c9b      	lsrs	r3, r3, #18
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	4a17      	ldr	r2, [pc, #92]	@ (8007064 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007008:	5cd3      	ldrb	r3, [r2, r3]
 800700a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800700c:	4b13      	ldr	r3, [pc, #76]	@ (800705c <HAL_RCC_GetSysClockFreq+0x94>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	4a14      	ldr	r2, [pc, #80]	@ (8007068 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007016:	5cd3      	ldrb	r3, [r2, r3]
 8007018:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007024:	4a0e      	ldr	r2, [pc, #56]	@ (8007060 <HAL_RCC_GetSysClockFreq+0x98>)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	fbb2 f2f3 	udiv	r2, r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e004      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a0c      	ldr	r2, [pc, #48]	@ (800706c <HAL_RCC_GetSysClockFreq+0xa4>)
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	613b      	str	r3, [r7, #16]
      break;
 8007044:	e002      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007046:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <HAL_RCC_GetSysClockFreq+0x98>)
 8007048:	613b      	str	r3, [r7, #16]
      break;
 800704a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800704c:	693b      	ldr	r3, [r7, #16]
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40021000 	.word	0x40021000
 8007060:	007a1200 	.word	0x007a1200
 8007064:	0800ac14 	.word	0x0800ac14
 8007068:	0800ac24 	.word	0x0800ac24
 800706c:	003d0900 	.word	0x003d0900

08007070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007074:	4b03      	ldr	r3, [pc, #12]	@ (8007084 <HAL_RCC_GetHCLKFreq+0x14>)
 8007076:	681b      	ldr	r3, [r3, #0]
}
 8007078:	4618      	mov	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000018 	.word	0x20000018

08007088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800708e:	f7ff ffef 	bl	8007070 <HAL_RCC_GetHCLKFreq>
 8007092:	4601      	mov	r1, r0
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800709c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80070a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	fa92 f2a2 	rbit	r2, r2
 80070a8:	603a      	str	r2, [r7, #0]
  return result;
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	fab2 f282 	clz	r2, r2
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	40d3      	lsrs	r3, r2
 80070b4:	4a04      	ldr	r2, [pc, #16]	@ (80070c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
 80070b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40021000 	.word	0x40021000
 80070c8:	0800ac0c 	.word	0x0800ac0c

080070cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220f      	movs	r2, #15
 80070da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070dc:	4b12      	ldr	r3, [pc, #72]	@ (8007128 <HAL_RCC_GetClockConfig+0x5c>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 0203 	and.w	r2, r3, #3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80070e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <HAL_RCC_GetClockConfig+0x5c>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <HAL_RCC_GetClockConfig+0x5c>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <HAL_RCC_GetClockConfig+0x5c>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	08db      	lsrs	r3, r3, #3
 8007106:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800710e:	4b07      	ldr	r3, [pc, #28]	@ (800712c <HAL_RCC_GetClockConfig+0x60>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0207 	and.w	r2, r3, #7
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	601a      	str	r2, [r3, #0]
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40021000 	.word	0x40021000
 800712c:	40022000 	.word	0x40022000

08007130 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b092      	sub	sp, #72	@ 0x48
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007140:	2300      	movs	r3, #0
 8007142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80cb 	beq.w	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007154:	4b85      	ldr	r3, [pc, #532]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10e      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007160:	4b82      	ldr	r3, [pc, #520]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	4a81      	ldr	r2, [pc, #516]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800716a:	61d3      	str	r3, [r2, #28]
 800716c:	4b7f      	ldr	r3, [pc, #508]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800717e:	4b7c      	ldr	r3, [pc, #496]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d118      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800718a:	4b79      	ldr	r3, [pc, #484]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a78      	ldr	r2, [pc, #480]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007196:	f7fb fe37 	bl	8002e08 <HAL_GetTick>
 800719a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800719c:	e008      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800719e:	f7fb fe33 	bl	8002e08 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b64      	cmp	r3, #100	@ 0x64
 80071aa:	d901      	bls.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e0d9      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071bc:	4b6b      	ldr	r3, [pc, #428]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d07b      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d074      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071da:	4b64      	ldr	r3, [pc, #400]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	fa93 f3a3 	rbit	r3, r3
 80071f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80071f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071f4:	fab3 f383 	clz	r3, r3
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007374 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	461a      	mov	r2, r3
 8007204:	2301      	movs	r3, #1
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	fa93 f3a3 	rbit	r3, r3
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007218:	fab3 f383 	clz	r3, r3
 800721c:	b2db      	uxtb	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	4b54      	ldr	r3, [pc, #336]	@ (8007374 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800722c:	4a4f      	ldr	r2, [pc, #316]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800722e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007230:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d043      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723c:	f7fb fde4 	bl	8002e08 <HAL_GetTick>
 8007240:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007242:	e00a      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007244:	f7fb fde0 	bl	8002e08 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e084      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800725a:	2302      	movs	r3, #2
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	fa93 f3a3 	rbit	r3, r3
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
 8007266:	2302      	movs	r3, #2
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	fa93 f3a3 	rbit	r3, r3
 8007270:	61fb      	str	r3, [r7, #28]
  return result;
 8007272:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	fab3 f383 	clz	r3, r3
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007284:	4b39      	ldr	r3, [pc, #228]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	e007      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800728a:	2302      	movs	r3, #2
 800728c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	fa93 f3a3 	rbit	r3, r3
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	4b35      	ldr	r3, [pc, #212]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	2202      	movs	r2, #2
 800729c:	613a      	str	r2, [r7, #16]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	fa92 f2a2 	rbit	r2, r2
 80072a4:	60fa      	str	r2, [r7, #12]
  return result;
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	fab2 f282 	clz	r2, r2
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	f002 021f 	and.w	r2, r2, #31
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f202 	lsl.w	r2, r1, r2
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0bf      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80072c4:	4b29      	ldr	r3, [pc, #164]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4926      	ldr	r1, [pc, #152]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d105      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072de:	4b23      	ldr	r3, [pc, #140]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	4a22      	ldr	r2, [pc, #136]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80072e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d008      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072f6:	4b1d      	ldr	r3, [pc, #116]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	491a      	ldr	r1, [pc, #104]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007304:	4313      	orrs	r3, r2
 8007306:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007314:	4b15      	ldr	r3, [pc, #84]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	f023 0210 	bic.w	r2, r3, #16
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4912      	ldr	r1, [pc, #72]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007332:	4b0e      	ldr	r3, [pc, #56]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	490b      	ldr	r1, [pc, #44]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007340:	4313      	orrs	r3, r2
 8007342:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007350:	4b06      	ldr	r3, [pc, #24]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	4903      	ldr	r1, [pc, #12]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800735e:	4313      	orrs	r3, r2
 8007360:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3748      	adds	r7, #72	@ 0x48
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	40021000 	.word	0x40021000
 8007370:	40007000 	.word	0x40007000
 8007374:	10908100 	.word	0x10908100

08007378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e049      	b.n	800741e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fb fc86 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f000 fce8 	bl	8007d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b01      	cmp	r3, #1
 800743a:	d001      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e040      	b.n	80074c2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1c      	ldr	r2, [pc, #112]	@ (80074d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <HAL_TIM_Base_Start_IT+0x58>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746a:	d009      	beq.n	8007480 <HAL_TIM_Base_Start_IT+0x58>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <HAL_TIM_Base_Start_IT+0xac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_TIM_Base_Start_IT+0x58>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d115      	bne.n	80074ac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <HAL_TIM_Base_Start_IT+0xb4>)
 8007488:	4013      	ands	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b06      	cmp	r3, #6
 8007490:	d015      	beq.n	80074be <HAL_TIM_Base_Start_IT+0x96>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007498:	d011      	beq.n	80074be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074aa:	e008      	b.n	80074be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e000      	b.n	80074c0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	00010007 	.word	0x00010007

080074e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e049      	b.n	8007586 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f841 	bl	800758e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3304      	adds	r3, #4
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f000 fc34 	bl	8007d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x24>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e03c      	b.n	8007642 <HAL_TIM_PWM_Start+0x9e>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x3e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e02f      	b.n	8007642 <HAL_TIM_PWM_Start+0x9e>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x58>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e022      	b.n	8007642 <HAL_TIM_PWM_Start+0x9e>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d109      	bne.n	8007616 <HAL_TIM_PWM_Start+0x72>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b01      	cmp	r3, #1
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	e015      	b.n	8007642 <HAL_TIM_PWM_Start+0x9e>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b10      	cmp	r3, #16
 800761a:	d109      	bne.n	8007630 <HAL_TIM_PWM_Start+0x8c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	e008      	b.n	8007642 <HAL_TIM_PWM_Start+0x9e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	bf14      	ite	ne
 800763c:	2301      	movne	r3, #1
 800763e:	2300      	moveq	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e088      	b.n	800775c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Start+0xb6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007658:	e023      	b.n	80076a2 <HAL_TIM_PWM_Start+0xfe>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b04      	cmp	r3, #4
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Start+0xc6>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007668:	e01b      	b.n	80076a2 <HAL_TIM_PWM_Start+0xfe>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Start+0xd6>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007678:	e013      	b.n	80076a2 <HAL_TIM_PWM_Start+0xfe>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d104      	bne.n	800768a <HAL_TIM_PWM_Start+0xe6>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007688:	e00b      	b.n	80076a2 <HAL_TIM_PWM_Start+0xfe>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b10      	cmp	r3, #16
 800768e:	d104      	bne.n	800769a <HAL_TIM_PWM_Start+0xf6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007698:	e003      	b.n	80076a2 <HAL_TIM_PWM_Start+0xfe>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2201      	movs	r2, #1
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 ff32 	bl	8008514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2b      	ldr	r2, [pc, #172]	@ (8007764 <HAL_TIM_PWM_Start+0x1c0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x134>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2a      	ldr	r2, [pc, #168]	@ (8007768 <HAL_TIM_PWM_Start+0x1c4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x134>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a28      	ldr	r2, [pc, #160]	@ (800776c <HAL_TIM_PWM_Start+0x1c8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x134>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a27      	ldr	r2, [pc, #156]	@ (8007770 <HAL_TIM_PWM_Start+0x1cc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_PWM_Start+0x138>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <HAL_TIM_PWM_Start+0x13a>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <HAL_TIM_PWM_Start+0x1c0>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00e      	beq.n	800771a <HAL_TIM_PWM_Start+0x176>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d009      	beq.n	800771a <HAL_TIM_PWM_Start+0x176>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1a      	ldr	r2, [pc, #104]	@ (8007774 <HAL_TIM_PWM_Start+0x1d0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_TIM_PWM_Start+0x176>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a14      	ldr	r2, [pc, #80]	@ (8007768 <HAL_TIM_PWM_Start+0x1c4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d115      	bne.n	8007746 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <HAL_TIM_PWM_Start+0x1d4>)
 8007722:	4013      	ands	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b06      	cmp	r3, #6
 800772a:	d015      	beq.n	8007758 <HAL_TIM_PWM_Start+0x1b4>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007732:	d011      	beq.n	8007758 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007744:	e008      	b.n	8007758 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e000      	b.n	800775a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800
 8007774:	40000400 	.word	0x40000400
 8007778:	00010007 	.word	0x00010007

0800777c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01b      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0202 	mvn.w	r2, #2
 80077b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fac1 	bl	8007d4e <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fab3 	bl	8007d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fac4 	bl	8007d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d020      	beq.n	800782c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01b      	beq.n	800782c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0204 	mvn.w	r2, #4
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa9b 	bl	8007d4e <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa8d 	bl	8007d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa9e 	bl	8007d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d020      	beq.n	8007878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01b      	beq.n	8007878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0208 	mvn.w	r2, #8
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2204      	movs	r2, #4
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa75 	bl	8007d4e <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa67 	bl	8007d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa78 	bl	8007d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d020      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01b      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0210 	mvn.w	r2, #16
 8007894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2208      	movs	r2, #8
 800789a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa4f 	bl	8007d4e <HAL_TIM_IC_CaptureCallback>
 80078b0:	e005      	b.n	80078be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa41 	bl	8007d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa52 	bl	8007d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0201 	mvn.w	r2, #1
 80078e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fa fff0 	bl	80028c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 ff1a 	bl	8008740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00c      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 ff12 	bl	8008754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00c      	beq.n	8007954 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa11 	bl	8007d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0220 	mvn.w	r2, #32
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 feda 	bl	800872c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800799a:	2302      	movs	r3, #2
 800799c:	e0ff      	b.n	8007b9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b14      	cmp	r3, #20
 80079aa:	f200 80f0 	bhi.w	8007b8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007b8f 	.word	0x08007b8f
 80079bc:	08007b8f 	.word	0x08007b8f
 80079c0:	08007b8f 	.word	0x08007b8f
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007b8f 	.word	0x08007b8f
 80079cc:	08007b8f 	.word	0x08007b8f
 80079d0:	08007b8f 	.word	0x08007b8f
 80079d4:	08007a8b 	.word	0x08007a8b
 80079d8:	08007b8f 	.word	0x08007b8f
 80079dc:	08007b8f 	.word	0x08007b8f
 80079e0:	08007b8f 	.word	0x08007b8f
 80079e4:	08007acb 	.word	0x08007acb
 80079e8:	08007b8f 	.word	0x08007b8f
 80079ec:	08007b8f 	.word	0x08007b8f
 80079f0:	08007b8f 	.word	0x08007b8f
 80079f4:	08007b0d 	.word	0x08007b0d
 80079f8:	08007b8f 	.word	0x08007b8f
 80079fc:	08007b8f 	.word	0x08007b8f
 8007a00:	08007b8f 	.word	0x08007b8f
 8007a04:	08007b4d 	.word	0x08007b4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fa40 	bl	8007e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0208 	orr.w	r2, r2, #8
 8007a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0204 	bic.w	r2, r2, #4
 8007a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6999      	ldr	r1, [r3, #24]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	619a      	str	r2, [r3, #24]
      break;
 8007a46:	e0a5      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 faa6 	bl	8007fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6999      	ldr	r1, [r3, #24]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	021a      	lsls	r2, r3, #8
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	619a      	str	r2, [r3, #24]
      break;
 8007a88:	e084      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fb05 	bl	80080a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0208 	orr.w	r2, r2, #8
 8007aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0204 	bic.w	r2, r2, #4
 8007ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69d9      	ldr	r1, [r3, #28]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	61da      	str	r2, [r3, #28]
      break;
 8007ac8:	e064      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fb63 	bl	800819c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	021a      	lsls	r2, r3, #8
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	61da      	str	r2, [r3, #28]
      break;
 8007b0a:	e043      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fba6 	bl	8008264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0204 	bic.w	r2, r2, #4
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b4a:	e023      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fbe4 	bl	8008320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b8c:	e002      	b.n	8007b94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
      break;
 8007b92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop

08007ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e0b6      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x18a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c00:	d03e      	beq.n	8007c80 <HAL_TIM_ConfigClockSource+0xd8>
 8007c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c06:	f200 8087 	bhi.w	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0e:	f000 8086 	beq.w	8007d1e <HAL_TIM_ConfigClockSource+0x176>
 8007c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c16:	d87f      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c18:	2b70      	cmp	r3, #112	@ 0x70
 8007c1a:	d01a      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0xaa>
 8007c1c:	2b70      	cmp	r3, #112	@ 0x70
 8007c1e:	d87b      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c20:	2b60      	cmp	r3, #96	@ 0x60
 8007c22:	d050      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x11e>
 8007c24:	2b60      	cmp	r3, #96	@ 0x60
 8007c26:	d877      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c28:	2b50      	cmp	r3, #80	@ 0x50
 8007c2a:	d03c      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0xfe>
 8007c2c:	2b50      	cmp	r3, #80	@ 0x50
 8007c2e:	d873      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c30:	2b40      	cmp	r3, #64	@ 0x40
 8007c32:	d058      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x13e>
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d86f      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c38:	2b30      	cmp	r3, #48	@ 0x30
 8007c3a:	d064      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0x15e>
 8007c3c:	2b30      	cmp	r3, #48	@ 0x30
 8007c3e:	d86b      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d060      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0x15e>
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d867      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d05c      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0x15e>
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d05a      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0x15e>
 8007c50:	e062      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c62:	f000 fc37 	bl	80084d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	609a      	str	r2, [r3, #8]
      break;
 8007c7e:	e04f      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c90:	f000 fc20 	bl	80084d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ca2:	609a      	str	r2, [r3, #8]
      break;
 8007ca4:	e03c      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f000 fb94 	bl	80083e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2150      	movs	r1, #80	@ 0x50
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fbed 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007cc4:	e02c      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f000 fbb3 	bl	800843e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2160      	movs	r1, #96	@ 0x60
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fbdd 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007ce4:	e01c      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f000 fb74 	bl	80083e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2140      	movs	r1, #64	@ 0x40
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fbcd 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007d04:	e00c      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f000 fbc4 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007d16:	e003      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1c:	e000      	b.n	8007d20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a38      	ldr	r2, [pc, #224]	@ (8007e80 <TIM_Base_SetConfig+0xf4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d007      	beq.n	8007db4 <TIM_Base_SetConfig+0x28>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007daa:	d003      	beq.n	8007db4 <TIM_Base_SetConfig+0x28>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a35      	ldr	r2, [pc, #212]	@ (8007e84 <TIM_Base_SetConfig+0xf8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d108      	bne.n	8007dc6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e80 <TIM_Base_SetConfig+0xf4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <TIM_Base_SetConfig+0x6a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd4:	d00f      	beq.n	8007df6 <TIM_Base_SetConfig+0x6a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8007e84 <TIM_Base_SetConfig+0xf8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <TIM_Base_SetConfig+0x6a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a29      	ldr	r2, [pc, #164]	@ (8007e88 <TIM_Base_SetConfig+0xfc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d007      	beq.n	8007df6 <TIM_Base_SetConfig+0x6a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a28      	ldr	r2, [pc, #160]	@ (8007e8c <TIM_Base_SetConfig+0x100>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_Base_SetConfig+0x6a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a27      	ldr	r2, [pc, #156]	@ (8007e90 <TIM_Base_SetConfig+0x104>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d108      	bne.n	8007e08 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a14      	ldr	r2, [pc, #80]	@ (8007e80 <TIM_Base_SetConfig+0xf4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00b      	beq.n	8007e4c <TIM_Base_SetConfig+0xc0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a14      	ldr	r2, [pc, #80]	@ (8007e88 <TIM_Base_SetConfig+0xfc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d007      	beq.n	8007e4c <TIM_Base_SetConfig+0xc0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a13      	ldr	r2, [pc, #76]	@ (8007e8c <TIM_Base_SetConfig+0x100>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_Base_SetConfig+0xc0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a12      	ldr	r2, [pc, #72]	@ (8007e90 <TIM_Base_SetConfig+0x104>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d103      	bne.n	8007e54 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d105      	bne.n	8007e72 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f023 0201 	bic.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]
  }
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800

08007e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	f023 0201 	bic.w	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f023 0302 	bic.w	r3, r3, #2
 8007ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a28      	ldr	r2, [pc, #160]	@ (8007f90 <TIM_OC1_SetConfig+0xfc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00b      	beq.n	8007f0c <TIM_OC1_SetConfig+0x78>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a27      	ldr	r2, [pc, #156]	@ (8007f94 <TIM_OC1_SetConfig+0x100>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d007      	beq.n	8007f0c <TIM_OC1_SetConfig+0x78>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a26      	ldr	r2, [pc, #152]	@ (8007f98 <TIM_OC1_SetConfig+0x104>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_OC1_SetConfig+0x78>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a25      	ldr	r2, [pc, #148]	@ (8007f9c <TIM_OC1_SetConfig+0x108>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d10c      	bne.n	8007f26 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 0308 	bic.w	r3, r3, #8
 8007f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f023 0304 	bic.w	r3, r3, #4
 8007f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a19      	ldr	r2, [pc, #100]	@ (8007f90 <TIM_OC1_SetConfig+0xfc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_OC1_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a18      	ldr	r2, [pc, #96]	@ (8007f94 <TIM_OC1_SetConfig+0x100>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_OC1_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a17      	ldr	r2, [pc, #92]	@ (8007f98 <TIM_OC1_SetConfig+0x104>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_OC1_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a16      	ldr	r2, [pc, #88]	@ (8007f9c <TIM_OC1_SetConfig+0x108>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d111      	bne.n	8007f6a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400
 8007f9c:	40014800 	.word	0x40014800

08007fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f023 0210 	bic.w	r2, r3, #16
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 0320 	bic.w	r3, r3, #32
 8007fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a24      	ldr	r2, [pc, #144]	@ (8008090 <TIM_OC2_SetConfig+0xf0>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d10d      	bne.n	8008020 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800800a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800801e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a1b      	ldr	r2, [pc, #108]	@ (8008090 <TIM_OC2_SetConfig+0xf0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00b      	beq.n	8008040 <TIM_OC2_SetConfig+0xa0>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a1a      	ldr	r2, [pc, #104]	@ (8008094 <TIM_OC2_SetConfig+0xf4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d007      	beq.n	8008040 <TIM_OC2_SetConfig+0xa0>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <TIM_OC2_SetConfig+0xf8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d003      	beq.n	8008040 <TIM_OC2_SetConfig+0xa0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a18      	ldr	r2, [pc, #96]	@ (800809c <TIM_OC2_SetConfig+0xfc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d113      	bne.n	8008068 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008046:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800804e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	40014800 	.word	0x40014800

080080a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a23      	ldr	r2, [pc, #140]	@ (800818c <TIM_OC3_SetConfig+0xec>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1a      	ldr	r2, [pc, #104]	@ (800818c <TIM_OC3_SetConfig+0xec>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00b      	beq.n	800813e <TIM_OC3_SetConfig+0x9e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a19      	ldr	r2, [pc, #100]	@ (8008190 <TIM_OC3_SetConfig+0xf0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_OC3_SetConfig+0x9e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a18      	ldr	r2, [pc, #96]	@ (8008194 <TIM_OC3_SetConfig+0xf4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_OC3_SetConfig+0x9e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a17      	ldr	r2, [pc, #92]	@ (8008198 <TIM_OC3_SetConfig+0xf8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d113      	bne.n	8008166 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800814c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800

0800819c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	031b      	lsls	r3, r3, #12
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a16      	ldr	r2, [pc, #88]	@ (8008254 <TIM_OC4_SetConfig+0xb8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_OC4_SetConfig+0x7c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a15      	ldr	r2, [pc, #84]	@ (8008258 <TIM_OC4_SetConfig+0xbc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_OC4_SetConfig+0x7c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a14      	ldr	r2, [pc, #80]	@ (800825c <TIM_OC4_SetConfig+0xc0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC4_SetConfig+0x7c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a13      	ldr	r2, [pc, #76]	@ (8008260 <TIM_OC4_SetConfig+0xc4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d109      	bne.n	800822c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800821e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	019b      	lsls	r3, r3, #6
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800

08008264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	041b      	lsls	r3, r3, #16
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <TIM_OC5_SetConfig+0xac>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_OC5_SetConfig+0x72>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a14      	ldr	r2, [pc, #80]	@ (8008314 <TIM_OC5_SetConfig+0xb0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_OC5_SetConfig+0x72>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a13      	ldr	r2, [pc, #76]	@ (8008318 <TIM_OC5_SetConfig+0xb4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC5_SetConfig+0x72>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a12      	ldr	r2, [pc, #72]	@ (800831c <TIM_OC5_SetConfig+0xb8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d109      	bne.n	80082ea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40012c00 	.word	0x40012c00
 8008314:	40014000 	.word	0x40014000
 8008318:	40014400 	.word	0x40014400
 800831c:	40014800 	.word	0x40014800

08008320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a16      	ldr	r2, [pc, #88]	@ (80083d0 <TIM_OC6_SetConfig+0xb0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00b      	beq.n	8008394 <TIM_OC6_SetConfig+0x74>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <TIM_OC6_SetConfig+0xb4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d007      	beq.n	8008394 <TIM_OC6_SetConfig+0x74>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a14      	ldr	r2, [pc, #80]	@ (80083d8 <TIM_OC6_SetConfig+0xb8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_OC6_SetConfig+0x74>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a13      	ldr	r2, [pc, #76]	@ (80083dc <TIM_OC6_SetConfig+0xbc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d109      	bne.n	80083a8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800839a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	029b      	lsls	r3, r3, #10
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	621a      	str	r2, [r3, #32]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40014400 	.word	0x40014400
 80083dc:	40014800 	.word	0x40014800

080083e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800840a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 030a 	bic.w	r3, r3, #10
 800841c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	621a      	str	r2, [r3, #32]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800843e:	b480      	push	{r7}
 8008440:	b087      	sub	sp, #28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f023 0210 	bic.w	r2, r3, #16
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	031b      	lsls	r3, r3, #12
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800847a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f043 0307 	orr.w	r3, r3, #7
 80084c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	021a      	lsls	r2, r3, #8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	609a      	str	r2, [r3, #8]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2201      	movs	r2, #1
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1a      	ldr	r2, [r3, #32]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	43db      	mvns	r3, r3
 8008536:	401a      	ands	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1a      	ldr	r2, [r3, #32]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	fa01 f303 	lsl.w	r3, r1, r3
 800854c:	431a      	orrs	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008574:	2302      	movs	r3, #2
 8008576:	e054      	b.n	8008622 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a24      	ldr	r2, [pc, #144]	@ (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d108      	bne.n	80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a17      	ldr	r2, [pc, #92]	@ (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00e      	beq.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e0:	d009      	beq.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a13      	ldr	r2, [pc, #76]	@ (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a11      	ldr	r2, [pc, #68]	@ (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d10c      	bne.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	4313      	orrs	r3, r2
 8008606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40012c00 	.word	0x40012c00
 8008634:	40000400 	.word	0x40000400
 8008638:	40014000 	.word	0x40014000

0800863c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008654:	2302      	movs	r3, #2
 8008656:	e060      	b.n	800871a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	041b      	lsls	r3, r3, #16
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a14      	ldr	r2, [pc, #80]	@ (8008728 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d115      	bne.n	8008708 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	051b      	lsls	r3, r3, #20
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	40012c00 	.word	0x40012c00

0800872c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800877a:	2b84      	cmp	r3, #132	@ 0x84
 800877c:	d005      	beq.n	800878a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800877e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	3303      	adds	r3, #3
 8008788:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800878a:	68fb      	ldr	r3, [r7, #12]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800879c:	f000 fed0 	bl	8009540 <vTaskStartScheduler>
  
  return osOK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80087a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a8:	b089      	sub	sp, #36	@ 0x24
 80087aa:	af04      	add	r7, sp, #16
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d020      	beq.n	80087fa <osThreadCreate+0x54>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01c      	beq.n	80087fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685c      	ldr	r4, [r3, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691e      	ldr	r6, [r3, #16]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff ffc8 	bl	8008768 <makeFreeRtosPriority>
 80087d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	9100      	str	r1, [sp, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	4632      	mov	r2, r6
 80087ec:	4629      	mov	r1, r5
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fce2 	bl	80091b8 <xTaskCreateStatic>
 80087f4:	4603      	mov	r3, r0
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e01c      	b.n	8008834 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685c      	ldr	r4, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008806:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff ffaa 	bl	8008768 <makeFreeRtosPriority>
 8008814:	4602      	mov	r2, r0
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9200      	str	r2, [sp, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	4632      	mov	r2, r6
 8008822:	4629      	mov	r1, r5
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fd26 	bl	8009276 <xTaskCreate>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d001      	beq.n	8008834 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008834:	68fb      	ldr	r3, [r7, #12]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800883e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <osDelay+0x16>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	e000      	b.n	8008856 <osDelay+0x18>
 8008854:	2301      	movs	r3, #1
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fe3c 	bl	80094d4 <vTaskDelay>
  
  return osOK;
 800885c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08a      	sub	sp, #40	@ 0x28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008874:	f000 fec6 	bl	8009604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008878:	4b5a      	ldr	r3, [pc, #360]	@ (80089e4 <pvPortMalloc+0x17c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008880:	f000 f916 	bl	8008ab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008884:	4b58      	ldr	r3, [pc, #352]	@ (80089e8 <pvPortMalloc+0x180>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4013      	ands	r3, r2
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 8090 	bne.w	80089b2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01e      	beq.n	80088d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008898:	2208      	movs	r2, #8
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d015      	beq.n	80088d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f023 0307 	bic.w	r3, r3, #7
 80088b0:	3308      	adds	r3, #8
 80088b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d06a      	beq.n	80089b2 <pvPortMalloc+0x14a>
 80088dc:	4b43      	ldr	r3, [pc, #268]	@ (80089ec <pvPortMalloc+0x184>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d865      	bhi.n	80089b2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088e6:	4b42      	ldr	r3, [pc, #264]	@ (80089f0 <pvPortMalloc+0x188>)
 80088e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ea:	4b41      	ldr	r3, [pc, #260]	@ (80089f0 <pvPortMalloc+0x188>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088f0:	e004      	b.n	80088fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d903      	bls.n	800890e <pvPortMalloc+0xa6>
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f1      	bne.n	80088f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800890e:	4b35      	ldr	r3, [pc, #212]	@ (80089e4 <pvPortMalloc+0x17c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008914:	429a      	cmp	r2, r3
 8008916:	d04c      	beq.n	80089b2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2208      	movs	r2, #8
 800891e:	4413      	add	r3, r2
 8008920:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	2308      	movs	r3, #8
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	429a      	cmp	r2, r3
 8008938:	d920      	bls.n	800897c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800893a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <pvPortMalloc+0xfc>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	613b      	str	r3, [r7, #16]
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008976:	69b8      	ldr	r0, [r7, #24]
 8008978:	f000 f8fc 	bl	8008b74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800897c:	4b1b      	ldr	r3, [pc, #108]	@ (80089ec <pvPortMalloc+0x184>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	4a19      	ldr	r2, [pc, #100]	@ (80089ec <pvPortMalloc+0x184>)
 8008988:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800898a:	4b18      	ldr	r3, [pc, #96]	@ (80089ec <pvPortMalloc+0x184>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b19      	ldr	r3, [pc, #100]	@ (80089f4 <pvPortMalloc+0x18c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d203      	bcs.n	800899e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008996:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <pvPortMalloc+0x184>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a16      	ldr	r2, [pc, #88]	@ (80089f4 <pvPortMalloc+0x18c>)
 800899c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4b11      	ldr	r3, [pc, #68]	@ (80089e8 <pvPortMalloc+0x180>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	431a      	orrs	r2, r3
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089b2:	f000 fe35 	bl	8009620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <pvPortMalloc+0x170>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <pvPortMalloc+0x16c>
	return pvReturn;
 80089d8:	69fb      	ldr	r3, [r7, #28]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3728      	adds	r7, #40	@ 0x28
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	2000127c 	.word	0x2000127c
 80089e8:	20001288 	.word	0x20001288
 80089ec:	20001280 	.word	0x20001280
 80089f0:	20001274 	.word	0x20001274
 80089f4:	20001284 	.word	0x20001284

080089f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d04a      	beq.n	8008aa0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a0a:	2308      	movs	r3, #8
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4413      	add	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	4b22      	ldr	r3, [pc, #136]	@ (8008aa8 <vPortFree+0xb0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <vPortFree+0x46>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	60fb      	str	r3, [r7, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <vPortFree+0x66>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <vPortFree+0xb0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d019      	beq.n	8008aa0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d115      	bne.n	8008aa0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa8 <vPortFree+0xb0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	401a      	ands	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a84:	f000 fdbe 	bl	8009604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <vPortFree+0xb4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4413      	add	r3, r2
 8008a92:	4a06      	ldr	r2, [pc, #24]	@ (8008aac <vPortFree+0xb4>)
 8008a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a96:	6938      	ldr	r0, [r7, #16]
 8008a98:	f000 f86c 	bl	8008b74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a9c:	f000 fdc0 	bl	8009620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aa0:	bf00      	nop
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20001288 	.word	0x20001288
 8008aac:	20001280 	.word	0x20001280

08008ab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ab6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008aba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008abc:	4b27      	ldr	r3, [pc, #156]	@ (8008b5c <prvHeapInit+0xac>)
 8008abe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00c      	beq.n	8008ae4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3307      	adds	r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	4a1f      	ldr	r2, [pc, #124]	@ (8008b5c <prvHeapInit+0xac>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b60 <prvHeapInit+0xb0>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aee:	4b1c      	ldr	r3, [pc, #112]	@ (8008b60 <prvHeapInit+0xb0>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008afc:	2208      	movs	r2, #8
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0307 	bic.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b12:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2200      	movs	r2, #0
 8008b18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b1a:	4b12      	ldr	r3, [pc, #72]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b30:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b68 <prvHeapInit+0xb8>)
 8008b3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4a09      	ldr	r2, [pc, #36]	@ (8008b6c <prvHeapInit+0xbc>)
 8008b46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b48:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <prvHeapInit+0xc0>)
 8008b4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b4e:	601a      	str	r2, [r3, #0]
}
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20000674 	.word	0x20000674
 8008b60:	20001274 	.word	0x20001274
 8008b64:	2000127c 	.word	0x2000127c
 8008b68:	20001284 	.word	0x20001284
 8008b6c:	20001280 	.word	0x20001280
 8008b70:	20001288 	.word	0x20001288

08008b74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b7c:	4b28      	ldr	r3, [pc, #160]	@ (8008c20 <prvInsertBlockIntoFreeList+0xac>)
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e002      	b.n	8008b88 <prvInsertBlockIntoFreeList+0x14>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d8f7      	bhi.n	8008b82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d108      	bne.n	8008bb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	441a      	add	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d118      	bne.n	8008bfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <prvInsertBlockIntoFreeList+0xb0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d00d      	beq.n	8008bf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	441a      	add	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e008      	b.n	8008c04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <prvInsertBlockIntoFreeList+0xb0>)
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e003      	b.n	8008c04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d002      	beq.n	8008c12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20001274 	.word	0x20001274
 8008c24:	2000127c 	.word	0x2000127c

08008c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f103 0208 	add.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f103 0208 	add.w	r2, r3, #8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f103 0208 	add.w	r2, r3, #8
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	d103      	bne.n	8008cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e00c      	b.n	8008d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3308      	adds	r3, #8
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e002      	b.n	8008cf8 <vListInsert+0x2e>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d2f6      	bcs.n	8008cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6892      	ldr	r2, [r2, #8]
 8008d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6852      	ldr	r2, [r2, #4]
 8008d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d103      	bne.n	8008d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	1e5a      	subs	r2, r3, #1
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f023 0201 	bic.w	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8008df4 <pxPortInitialiseStack+0x64>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3b14      	subs	r3, #20
 8008dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f06f 0202 	mvn.w	r2, #2
 8008dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3b20      	subs	r3, #32
 8008de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008de6:	68fb      	ldr	r3, [r7, #12]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	08008df9 	.word	0x08008df9

08008df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e02:	4b13      	ldr	r3, [pc, #76]	@ (8008e50 <prvTaskExitError+0x58>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d00b      	beq.n	8008e24 <prvTaskExitError+0x2c>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	60fb      	str	r3, [r7, #12]
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <prvTaskExitError+0x28>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60bb      	str	r3, [r7, #8]
}
 8008e36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e38:	bf00      	nop
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0fc      	beq.n	8008e3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000024 	.word	0x20000024
	...

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	@ (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	4770      	bx	lr
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst2>:
 8008e80:	20001294 	.word	0x20001294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e88:	4808      	ldr	r0, [pc, #32]	@ (8008eac <prvPortStartFirstTask+0x24>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8814 	msr	CONTROL, r0
 8008e9a:	b662      	cpsie	i
 8008e9c:	b661      	cpsie	f
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	df00      	svc	0
 8008ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eaa:	bf00      	nop
 8008eac:	e000ed08 	.word	0xe000ed08

08008eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eb6:	4b47      	ldr	r3, [pc, #284]	@ (8008fd4 <xPortStartScheduler+0x124>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a47      	ldr	r2, [pc, #284]	@ (8008fd8 <xPortStartScheduler+0x128>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10b      	bne.n	8008ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd4 <xPortStartScheduler+0x124>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a3f      	ldr	r2, [pc, #252]	@ (8008fdc <xPortStartScheduler+0x12c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d10b      	bne.n	8008efa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	613b      	str	r3, [r7, #16]
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	e7fd      	b.n	8008ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008efa:	4b39      	ldr	r3, [pc, #228]	@ (8008fe0 <xPortStartScheduler+0x130>)
 8008efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	22ff      	movs	r2, #255	@ 0xff
 8008f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <xPortStartScheduler+0x134>)
 8008f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f22:	4b31      	ldr	r3, [pc, #196]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f24:	2207      	movs	r2, #7
 8008f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f28:	e009      	b.n	8008f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	4a2d      	ldr	r2, [pc, #180]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	2b80      	cmp	r3, #128	@ 0x80
 8008f48:	d0ef      	beq.n	8008f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f4a:	4b27      	ldr	r3, [pc, #156]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1c3 0307 	rsb	r3, r3, #7
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d00b      	beq.n	8008f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	e7fd      	b.n	8008f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	4a1c      	ldr	r2, [pc, #112]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f78:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f80:	4a19      	ldr	r2, [pc, #100]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f8c:	4b17      	ldr	r3, [pc, #92]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a16      	ldr	r2, [pc, #88]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f98:	4b14      	ldr	r3, [pc, #80]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fa4:	f000 f8da 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <xPortStartScheduler+0x140>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fae:	f000 f8f9 	bl	80091a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <xPortStartScheduler+0x144>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff4 <xPortStartScheduler+0x144>)
 8008fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fbe:	f7ff ff63 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fc2:	f000 fc89 	bl	80098d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008fc6:	f7ff ff17 	bl	8008df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000ed00 	.word	0xe000ed00
 8008fd8:	410fc271 	.word	0x410fc271
 8008fdc:	410fc270 	.word	0x410fc270
 8008fe0:	e000e400 	.word	0xe000e400
 8008fe4:	2000128c 	.word	0x2000128c
 8008fe8:	20001290 	.word	0x20001290
 8008fec:	e000ed20 	.word	0xe000ed20
 8008ff0:	20000024 	.word	0x20000024
 8008ff4:	e000ef34 	.word	0xe000ef34

08008ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
}
 8009010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009012:	4b10      	ldr	r3, [pc, #64]	@ (8009054 <vPortEnterCritical+0x5c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a0e      	ldr	r2, [pc, #56]	@ (8009054 <vPortEnterCritical+0x5c>)
 800901a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800901c:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <vPortEnterCritical+0x5c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d110      	bne.n	8009046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009024:	4b0c      	ldr	r3, [pc, #48]	@ (8009058 <vPortEnterCritical+0x60>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <vPortEnterCritical+0x4e>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	603b      	str	r3, [r7, #0]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vPortEnterCritical+0x4a>
	}
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000024 	.word	0x20000024
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009062:	4b12      	ldr	r3, [pc, #72]	@ (80090ac <vPortExitCritical+0x50>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <vPortExitCritical+0x26>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	607b      	str	r3, [r7, #4]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009082:	4b0a      	ldr	r3, [pc, #40]	@ (80090ac <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	4a08      	ldr	r2, [pc, #32]	@ (80090ac <vPortExitCritical+0x50>)
 800908a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800908c:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <vPortExitCritical+0x50>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <vPortExitCritical+0x44>
 8009094:	2300      	movs	r3, #0
 8009096:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800909e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000024 	.word	0x20000024

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f000 fbfa 	bl	80098d8 <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	20001294 	.word	0x20001294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f000 fb13 	bl	800975c <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <SysTick_Handler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	@ (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	@ (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000018 	.word	0x20000018
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091b2:	bf00      	nop
 80091b4:	e000ed88 	.word	0xe000ed88

080091b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08e      	sub	sp, #56	@ 0x38
 80091bc:	af04      	add	r7, sp, #16
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	623b      	str	r3, [r7, #32]
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	61fb      	str	r3, [r7, #28]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009202:	2354      	movs	r3, #84	@ 0x54
 8009204:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b54      	cmp	r3, #84	@ 0x54
 800920a:	d00b      	beq.n	8009224 <xTaskCreateStatic+0x6c>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	61bb      	str	r3, [r7, #24]
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	e7fd      	b.n	8009220 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009226:	2b00      	cmp	r3, #0
 8009228:	d01e      	beq.n	8009268 <xTaskCreateStatic+0xb0>
 800922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01b      	beq.n	8009268 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009238:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	2202      	movs	r2, #2
 800923e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	f107 0314 	add.w	r3, r7, #20
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f850 	bl	8009300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009260:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009262:	f000 f8cd 	bl	8009400 <prvAddNewTaskToReadyList>
 8009266:	e001      	b.n	800926c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800926c:	697b      	ldr	r3, [r7, #20]
	}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	@ 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009276:	b580      	push	{r7, lr}
 8009278:	b08c      	sub	sp, #48	@ 0x30
 800927a:	af04      	add	r7, sp, #16
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	603b      	str	r3, [r7, #0]
 8009282:	4613      	mov	r3, r2
 8009284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff faec 	bl	8008868 <pvPortMalloc>
 8009290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00e      	beq.n	80092b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009298:	2054      	movs	r0, #84	@ 0x54
 800929a:	f7ff fae5 	bl	8008868 <pvPortMalloc>
 800929e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80092ac:	e005      	b.n	80092ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092ae:	6978      	ldr	r0, [r7, #20]
 80092b0:	f7ff fba2 	bl	80089f8 <vPortFree>
 80092b4:	e001      	b.n	80092ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d017      	beq.n	80092f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092c8:	88fa      	ldrh	r2, [r7, #6]
 80092ca:	2300      	movs	r3, #0
 80092cc:	9303      	str	r3, [sp, #12]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	9302      	str	r3, [sp, #8]
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f80e 	bl	8009300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e4:	69f8      	ldr	r0, [r7, #28]
 80092e6:	f000 f88b 	bl	8009400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092ea:	2301      	movs	r3, #1
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e002      	b.n	80092f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092f0:	f04f 33ff 	mov.w	r3, #4294967295
 80092f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f6:	69bb      	ldr	r3, [r7, #24]
	}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009318:	3b01      	subs	r3, #1
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f023 0307 	bic.w	r3, r3, #7
 8009326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	617b      	str	r3, [r7, #20]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e012      	b.n	8009376 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	3334      	adds	r3, #52	@ 0x34
 8009360:	460a      	mov	r2, r1
 8009362:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d006      	beq.n	800937e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	2b0f      	cmp	r3, #15
 800937a:	d9e9      	bls.n	8009350 <prvInitialiseNewTask+0x50>
 800937c:	e000      	b.n	8009380 <prvInitialiseNewTask+0x80>
		{
			break;
 800937e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	2b06      	cmp	r3, #6
 800938c:	d901      	bls.n	8009392 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800938e:	2306      	movs	r3, #6
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009396:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800939c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	2200      	movs	r2, #0
 80093a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fc5d 	bl	8008c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	3318      	adds	r3, #24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7ff fc58 	bl	8008c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	f1c3 0207 	rsb	r2, r3, #7
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	68f9      	ldr	r1, [r7, #12]
 80093e0:	69b8      	ldr	r0, [r7, #24]
 80093e2:	f7ff fcd5 	bl	8008d90 <pxPortInitialiseStack>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093f8:	bf00      	nop
 80093fa:	3720      	adds	r7, #32
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009408:	f7ff fdf6 	bl	8008ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800940c:	4b2a      	ldr	r3, [pc, #168]	@ (80094b8 <prvAddNewTaskToReadyList+0xb8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a29      	ldr	r2, [pc, #164]	@ (80094b8 <prvAddNewTaskToReadyList+0xb8>)
 8009414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009416:	4b29      	ldr	r3, [pc, #164]	@ (80094bc <prvAddNewTaskToReadyList+0xbc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800941e:	4a27      	ldr	r2, [pc, #156]	@ (80094bc <prvAddNewTaskToReadyList+0xbc>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009424:	4b24      	ldr	r3, [pc, #144]	@ (80094b8 <prvAddNewTaskToReadyList+0xb8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d110      	bne.n	800944e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800942c:	f000 fac8 	bl	80099c0 <prvInitialiseTaskLists>
 8009430:	e00d      	b.n	800944e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009432:	4b23      	ldr	r3, [pc, #140]	@ (80094c0 <prvAddNewTaskToReadyList+0xc0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800943a:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <prvAddNewTaskToReadyList+0xbc>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d802      	bhi.n	800944e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009448:	4a1c      	ldr	r2, [pc, #112]	@ (80094bc <prvAddNewTaskToReadyList+0xbc>)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800944e:	4b1d      	ldr	r3, [pc, #116]	@ (80094c4 <prvAddNewTaskToReadyList+0xc4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a1b      	ldr	r2, [pc, #108]	@ (80094c4 <prvAddNewTaskToReadyList+0xc4>)
 8009456:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	2201      	movs	r2, #1
 800945e:	409a      	lsls	r2, r3
 8009460:	4b19      	ldr	r3, [pc, #100]	@ (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4313      	orrs	r3, r2
 8009466:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4a15      	ldr	r2, [pc, #84]	@ (80094cc <prvAddNewTaskToReadyList+0xcc>)
 8009478:	441a      	add	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3304      	adds	r3, #4
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f7ff fbfe 	bl	8008c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009486:	f7ff fde9 	bl	800905c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800948a:	4b0d      	ldr	r3, [pc, #52]	@ (80094c0 <prvAddNewTaskToReadyList+0xc0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009492:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvAddNewTaskToReadyList+0xbc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d207      	bcs.n	80094b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094a0:	4b0b      	ldr	r3, [pc, #44]	@ (80094d0 <prvAddNewTaskToReadyList+0xd0>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20001394 	.word	0x20001394
 80094bc:	20001294 	.word	0x20001294
 80094c0:	200013a0 	.word	0x200013a0
 80094c4:	200013b0 	.word	0x200013b0
 80094c8:	2000139c 	.word	0x2000139c
 80094cc:	20001298 	.word	0x20001298
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d018      	beq.n	8009518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094e6:	4b14      	ldr	r3, [pc, #80]	@ (8009538 <vTaskDelay+0x64>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <vTaskDelay+0x32>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60bb      	str	r3, [r7, #8]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009506:	f000 f87d 	bl	8009604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800950a:	2100      	movs	r1, #0
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fb1b 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009512:	f000 f885 	bl	8009620 <xTaskResumeAll>
 8009516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <vTaskDelay+0x68>)
 8009520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200013bc 	.word	0x200013bc
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800954e:	463a      	mov	r2, r7
 8009550:	1d39      	adds	r1, r7, #4
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f7f7 fc96 	bl	8000e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2300      	movs	r3, #0
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	460a      	mov	r2, r1
 800956e:	491f      	ldr	r1, [pc, #124]	@ (80095ec <vTaskStartScheduler+0xac>)
 8009570:	481f      	ldr	r0, [pc, #124]	@ (80095f0 <vTaskStartScheduler+0xb0>)
 8009572:	f7ff fe21 	bl	80091b8 <xTaskCreateStatic>
 8009576:	4603      	mov	r3, r0
 8009578:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <vTaskStartScheduler+0xb4>)
 800957a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800957c:	4b1d      	ldr	r3, [pc, #116]	@ (80095f4 <vTaskStartScheduler+0xb4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e001      	b.n	800958e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d116      	bne.n	80095c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	613b      	str	r3, [r7, #16]
}
 80095a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095a8:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <vTaskStartScheduler+0xb8>)
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295
 80095ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095b0:	4b12      	ldr	r3, [pc, #72]	@ (80095fc <vTaskStartScheduler+0xbc>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80095b6:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <vTaskStartScheduler+0xc0>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095bc:	f7ff fc78 	bl	8008eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095c0:	e00f      	b.n	80095e2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d10b      	bne.n	80095e2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	60fb      	str	r3, [r7, #12]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <vTaskStartScheduler+0x9e>
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	0800abf4 	.word	0x0800abf4
 80095f0:	08009991 	.word	0x08009991
 80095f4:	200013b8 	.word	0x200013b8
 80095f8:	200013b4 	.word	0x200013b4
 80095fc:	200013a0 	.word	0x200013a0
 8009600:	20001398 	.word	0x20001398

08009604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009608:	4b04      	ldr	r3, [pc, #16]	@ (800961c <vTaskSuspendAll+0x18>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	4a03      	ldr	r2, [pc, #12]	@ (800961c <vTaskSuspendAll+0x18>)
 8009610:	6013      	str	r3, [r2, #0]
}
 8009612:	bf00      	nop
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	200013bc 	.word	0x200013bc

08009620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800962e:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <xTaskResumeAll+0x118>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <xTaskResumeAll+0x2e>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	603b      	str	r3, [r7, #0]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800964e:	f7ff fcd3 	bl	8008ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009652:	4b39      	ldr	r3, [pc, #228]	@ (8009738 <xTaskResumeAll+0x118>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3b01      	subs	r3, #1
 8009658:	4a37      	ldr	r2, [pc, #220]	@ (8009738 <xTaskResumeAll+0x118>)
 800965a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965c:	4b36      	ldr	r3, [pc, #216]	@ (8009738 <xTaskResumeAll+0x118>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d161      	bne.n	8009728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009664:	4b35      	ldr	r3, [pc, #212]	@ (800973c <xTaskResumeAll+0x11c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05d      	beq.n	8009728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800966c:	e02e      	b.n	80096cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800966e:	4b34      	ldr	r3, [pc, #208]	@ (8009740 <xTaskResumeAll+0x120>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3318      	adds	r3, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fb5e 	bl	8008d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff fb59 	bl	8008d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968e:	2201      	movs	r2, #1
 8009690:	409a      	lsls	r2, r3
 8009692:	4b2c      	ldr	r3, [pc, #176]	@ (8009744 <xTaskResumeAll+0x124>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4313      	orrs	r3, r2
 8009698:	4a2a      	ldr	r2, [pc, #168]	@ (8009744 <xTaskResumeAll+0x124>)
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4a27      	ldr	r2, [pc, #156]	@ (8009748 <xTaskResumeAll+0x128>)
 80096aa:	441a      	add	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7ff fae5 	bl	8008c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096bc:	4b23      	ldr	r3, [pc, #140]	@ (800974c <xTaskResumeAll+0x12c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d302      	bcc.n	80096cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096c6:	4b22      	ldr	r3, [pc, #136]	@ (8009750 <xTaskResumeAll+0x130>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009740 <xTaskResumeAll+0x120>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1cc      	bne.n	800966e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096da:	f000 fa0f 	bl	8009afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096de:	4b1d      	ldr	r3, [pc, #116]	@ (8009754 <xTaskResumeAll+0x134>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d010      	beq.n	800970c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096ea:	f000 f837 	bl	800975c <xTaskIncrementTick>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80096f4:	4b16      	ldr	r3, [pc, #88]	@ (8009750 <xTaskResumeAll+0x130>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f1      	bne.n	80096ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009706:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <xTaskResumeAll+0x134>)
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800970c:	4b10      	ldr	r3, [pc, #64]	@ (8009750 <xTaskResumeAll+0x130>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d009      	beq.n	8009728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009714:	2301      	movs	r3, #1
 8009716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009718:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <xTaskResumeAll+0x138>)
 800971a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009728:	f7ff fc98 	bl	800905c <vPortExitCritical>

	return xAlreadyYielded;
 800972c:	68bb      	ldr	r3, [r7, #8]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200013bc 	.word	0x200013bc
 800973c:	20001394 	.word	0x20001394
 8009740:	20001354 	.word	0x20001354
 8009744:	2000139c 	.word	0x2000139c
 8009748:	20001298 	.word	0x20001298
 800974c:	20001294 	.word	0x20001294
 8009750:	200013a8 	.word	0x200013a8
 8009754:	200013a4 	.word	0x200013a4
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009766:	4b51      	ldr	r3, [pc, #324]	@ (80098ac <xTaskIncrementTick+0x150>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f040 808e 	bne.w	800988c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009770:	4b4f      	ldr	r3, [pc, #316]	@ (80098b0 <xTaskIncrementTick+0x154>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009778:	4a4d      	ldr	r2, [pc, #308]	@ (80098b0 <xTaskIncrementTick+0x154>)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d121      	bne.n	80097c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009784:	4b4b      	ldr	r3, [pc, #300]	@ (80098b4 <xTaskIncrementTick+0x158>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	603b      	str	r3, [r7, #0]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <xTaskIncrementTick+0x46>
 80097a6:	4b43      	ldr	r3, [pc, #268]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	4b42      	ldr	r3, [pc, #264]	@ (80098b8 <xTaskIncrementTick+0x15c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a40      	ldr	r2, [pc, #256]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	4a40      	ldr	r2, [pc, #256]	@ (80098b8 <xTaskIncrementTick+0x15c>)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	4b40      	ldr	r3, [pc, #256]	@ (80098bc <xTaskIncrementTick+0x160>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3301      	adds	r3, #1
 80097c0:	4a3e      	ldr	r2, [pc, #248]	@ (80098bc <xTaskIncrementTick+0x160>)
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	f000 f99a 	bl	8009afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c8:	4b3d      	ldr	r3, [pc, #244]	@ (80098c0 <xTaskIncrementTick+0x164>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d34d      	bcc.n	800986e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d2:	4b38      	ldr	r3, [pc, #224]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <xTaskIncrementTick+0x84>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <xTaskIncrementTick+0x86>
 80097e0:	2300      	movs	r3, #0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e6:	4b36      	ldr	r3, [pc, #216]	@ (80098c0 <xTaskIncrementTick+0x164>)
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	601a      	str	r2, [r3, #0]
					break;
 80097ee:	e03e      	b.n	800986e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097f0:	4b30      	ldr	r3, [pc, #192]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d203      	bcs.n	8009810 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009808:	4a2d      	ldr	r2, [pc, #180]	@ (80098c0 <xTaskIncrementTick+0x164>)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6013      	str	r3, [r2, #0]
						break;
 800980e:	e02e      	b.n	800986e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3304      	adds	r3, #4
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff fa91 	bl	8008d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3318      	adds	r3, #24
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff fa88 	bl	8008d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	2201      	movs	r2, #1
 8009832:	409a      	lsls	r2, r3
 8009834:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <xTaskIncrementTick+0x168>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4313      	orrs	r3, r2
 800983a:	4a22      	ldr	r2, [pc, #136]	@ (80098c4 <xTaskIncrementTick+0x168>)
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4a1f      	ldr	r2, [pc, #124]	@ (80098c8 <xTaskIncrementTick+0x16c>)
 800984c:	441a      	add	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	3304      	adds	r3, #4
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7ff fa14 	bl	8008c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985e:	4b1b      	ldr	r3, [pc, #108]	@ (80098cc <xTaskIncrementTick+0x170>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	429a      	cmp	r2, r3
 8009866:	d3b4      	bcc.n	80097d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800986c:	e7b1      	b.n	80097d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800986e:	4b17      	ldr	r3, [pc, #92]	@ (80098cc <xTaskIncrementTick+0x170>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009874:	4914      	ldr	r1, [pc, #80]	@ (80098c8 <xTaskIncrementTick+0x16c>)
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d907      	bls.n	8009896 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e004      	b.n	8009896 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800988c:	4b10      	ldr	r3, [pc, #64]	@ (80098d0 <xTaskIncrementTick+0x174>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	4a0f      	ldr	r2, [pc, #60]	@ (80098d0 <xTaskIncrementTick+0x174>)
 8009894:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009896:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <xTaskIncrementTick+0x178>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800989e:	2301      	movs	r3, #1
 80098a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80098a2:	697b      	ldr	r3, [r7, #20]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200013bc 	.word	0x200013bc
 80098b0:	20001398 	.word	0x20001398
 80098b4:	2000134c 	.word	0x2000134c
 80098b8:	20001350 	.word	0x20001350
 80098bc:	200013ac 	.word	0x200013ac
 80098c0:	200013b4 	.word	0x200013b4
 80098c4:	2000139c 	.word	0x2000139c
 80098c8:	20001298 	.word	0x20001298
 80098cc:	20001294 	.word	0x20001294
 80098d0:	200013a4 	.word	0x200013a4
 80098d4:	200013a8 	.word	0x200013a8

080098d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098de:	4b27      	ldr	r3, [pc, #156]	@ (800997c <vTaskSwitchContext+0xa4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098e6:	4b26      	ldr	r3, [pc, #152]	@ (8009980 <vTaskSwitchContext+0xa8>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098ec:	e040      	b.n	8009970 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80098ee:	4b24      	ldr	r3, [pc, #144]	@ (8009980 <vTaskSwitchContext+0xa8>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80098f4:	4b23      	ldr	r3, [pc, #140]	@ (8009984 <vTaskSwitchContext+0xac>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	fab3 f383 	clz	r3, r3
 8009900:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	f1c3 031f 	rsb	r3, r3, #31
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	491f      	ldr	r1, [pc, #124]	@ (8009988 <vTaskSwitchContext+0xb0>)
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <vTaskSwitchContext+0x5e>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	607b      	str	r3, [r7, #4]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <vTaskSwitchContext+0x5a>
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <vTaskSwitchContext+0xb0>)
 8009942:	4413      	add	r3, r2
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	605a      	str	r2, [r3, #4]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3308      	adds	r3, #8
 8009958:	429a      	cmp	r2, r3
 800995a:	d104      	bne.n	8009966 <vTaskSwitchContext+0x8e>
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	605a      	str	r2, [r3, #4]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	4a07      	ldr	r2, [pc, #28]	@ (800998c <vTaskSwitchContext+0xb4>)
 800996e:	6013      	str	r3, [r2, #0]
}
 8009970:	bf00      	nop
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	200013bc 	.word	0x200013bc
 8009980:	200013a8 	.word	0x200013a8
 8009984:	2000139c 	.word	0x2000139c
 8009988:	20001298 	.word	0x20001298
 800998c:	20001294 	.word	0x20001294

08009990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009998:	f000 f852 	bl	8009a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <prvIdleTask+0x28>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d9f9      	bls.n	8009998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099a4:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <prvIdleTask+0x2c>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099b4:	e7f0      	b.n	8009998 <prvIdleTask+0x8>
 80099b6:	bf00      	nop
 80099b8:	20001298 	.word	0x20001298
 80099bc:	e000ed04 	.word	0xe000ed04

080099c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099c6:	2300      	movs	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	e00c      	b.n	80099e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a12      	ldr	r2, [pc, #72]	@ (8009a20 <prvInitialiseTaskLists+0x60>)
 80099d8:	4413      	add	r3, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff f924 	bl	8008c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3301      	adds	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b06      	cmp	r3, #6
 80099ea:	d9ef      	bls.n	80099cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099ec:	480d      	ldr	r0, [pc, #52]	@ (8009a24 <prvInitialiseTaskLists+0x64>)
 80099ee:	f7ff f91b 	bl	8008c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099f2:	480d      	ldr	r0, [pc, #52]	@ (8009a28 <prvInitialiseTaskLists+0x68>)
 80099f4:	f7ff f918 	bl	8008c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f8:	480c      	ldr	r0, [pc, #48]	@ (8009a2c <prvInitialiseTaskLists+0x6c>)
 80099fa:	f7ff f915 	bl	8008c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099fe:	480c      	ldr	r0, [pc, #48]	@ (8009a30 <prvInitialiseTaskLists+0x70>)
 8009a00:	f7ff f912 	bl	8008c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a04:	480b      	ldr	r0, [pc, #44]	@ (8009a34 <prvInitialiseTaskLists+0x74>)
 8009a06:	f7ff f90f 	bl	8008c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a38 <prvInitialiseTaskLists+0x78>)
 8009a0c:	4a05      	ldr	r2, [pc, #20]	@ (8009a24 <prvInitialiseTaskLists+0x64>)
 8009a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <prvInitialiseTaskLists+0x7c>)
 8009a12:	4a05      	ldr	r2, [pc, #20]	@ (8009a28 <prvInitialiseTaskLists+0x68>)
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20001298 	.word	0x20001298
 8009a24:	20001324 	.word	0x20001324
 8009a28:	20001338 	.word	0x20001338
 8009a2c:	20001354 	.word	0x20001354
 8009a30:	20001368 	.word	0x20001368
 8009a34:	20001380 	.word	0x20001380
 8009a38:	2000134c 	.word	0x2000134c
 8009a3c:	20001350 	.word	0x20001350

08009a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a46:	e019      	b.n	8009a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a48:	f7ff fad6 	bl	8008ff8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a4c:	4b10      	ldr	r3, [pc, #64]	@ (8009a90 <prvCheckTasksWaitingTermination+0x50>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff f96f 	bl	8008d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	4a0b      	ldr	r2, [pc, #44]	@ (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a72:	f7ff faf3 	bl	800905c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f810 	bl	8009a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a7c:	4b06      	ldr	r3, [pc, #24]	@ (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e1      	bne.n	8009a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20001368 	.word	0x20001368
 8009a94:	20001394 	.word	0x20001394
 8009a98:	2000137c 	.word	0x2000137c

08009a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe ffa0 	bl	80089f8 <vPortFree>
				vPortFree( pxTCB );
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7fe ff9d 	bl	80089f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009abe:	e019      	b.n	8009af4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d103      	bne.n	8009ad2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fe ff94 	bl	80089f8 <vPortFree>
	}
 8009ad0:	e010      	b.n	8009af4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d00b      	beq.n	8009af4 <prvDeleteTCB+0x58>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	e7fd      	b.n	8009af0 <prvDeleteTCB+0x54>
	}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <prvResetNextTaskUnblockTime+0x14>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <prvResetNextTaskUnblockTime+0x16>
 8009b10:	2300      	movs	r3, #0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <prvResetNextTaskUnblockTime+0x48>)
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b1e:	e008      	b.n	8009b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b20:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <prvResetNextTaskUnblockTime+0x44>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4a05      	ldr	r2, [pc, #20]	@ (8009b44 <prvResetNextTaskUnblockTime+0x48>)
 8009b30:	6013      	str	r3, [r2, #0]
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	2000134c 	.word	0x2000134c
 8009b44:	200013b4 	.word	0x200013b4

08009b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b52:	4b29      	ldr	r3, [pc, #164]	@ (8009bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b58:	4b28      	ldr	r3, [pc, #160]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff f8ec 	bl	8008d3c <uxListRemove>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009b6a:	4b24      	ldr	r3, [pc, #144]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b70:	2201      	movs	r2, #1
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	43da      	mvns	r2, r3
 8009b78:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	4a20      	ldr	r2, [pc, #128]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d10a      	bne.n	8009ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b90:	4b1a      	ldr	r3, [pc, #104]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4619      	mov	r1, r3
 8009b98:	481a      	ldr	r0, [pc, #104]	@ (8009c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009b9a:	f7ff f872 	bl	8008c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b9e:	e026      	b.n	8009bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ba8:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d209      	bcs.n	8009bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bb8:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7ff f880 	bl	8008cca <vListInsert>
}
 8009bca:	e010      	b.n	8009bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7ff f876 	bl	8008cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d202      	bcs.n	8009bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009be8:	4a09      	ldr	r2, [pc, #36]	@ (8009c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6013      	str	r3, [r2, #0]
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20001398 	.word	0x20001398
 8009bfc:	20001294 	.word	0x20001294
 8009c00:	2000139c 	.word	0x2000139c
 8009c04:	20001380 	.word	0x20001380
 8009c08:	20001350 	.word	0x20001350
 8009c0c:	2000134c 	.word	0x2000134c
 8009c10:	200013b4 	.word	0x200013b4

08009c14 <memset>:
 8009c14:	4402      	add	r2, r0
 8009c16:	4603      	mov	r3, r0
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d100      	bne.n	8009c1e <memset+0xa>
 8009c1c:	4770      	bx	lr
 8009c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c22:	e7f9      	b.n	8009c18 <memset+0x4>

08009c24 <__errno>:
 8009c24:	4b01      	ldr	r3, [pc, #4]	@ (8009c2c <__errno+0x8>)
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20000028 	.word	0x20000028

08009c30 <__libc_init_array>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	4d0d      	ldr	r5, [pc, #52]	@ (8009c68 <__libc_init_array+0x38>)
 8009c34:	4c0d      	ldr	r4, [pc, #52]	@ (8009c6c <__libc_init_array+0x3c>)
 8009c36:	1b64      	subs	r4, r4, r5
 8009c38:	10a4      	asrs	r4, r4, #2
 8009c3a:	2600      	movs	r6, #0
 8009c3c:	42a6      	cmp	r6, r4
 8009c3e:	d109      	bne.n	8009c54 <__libc_init_array+0x24>
 8009c40:	4d0b      	ldr	r5, [pc, #44]	@ (8009c70 <__libc_init_array+0x40>)
 8009c42:	4c0c      	ldr	r4, [pc, #48]	@ (8009c74 <__libc_init_array+0x44>)
 8009c44:	f000 ff76 	bl	800ab34 <_init>
 8009c48:	1b64      	subs	r4, r4, r5
 8009c4a:	10a4      	asrs	r4, r4, #2
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	42a6      	cmp	r6, r4
 8009c50:	d105      	bne.n	8009c5e <__libc_init_array+0x2e>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c58:	4798      	blx	r3
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	e7ee      	b.n	8009c3c <__libc_init_array+0xc>
 8009c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c62:	4798      	blx	r3
 8009c64:	3601      	adds	r6, #1
 8009c66:	e7f2      	b.n	8009c4e <__libc_init_array+0x1e>
 8009c68:	0800ac78 	.word	0x0800ac78
 8009c6c:	0800ac78 	.word	0x0800ac78
 8009c70:	0800ac78 	.word	0x0800ac78
 8009c74:	0800ac7c 	.word	0x0800ac7c

08009c78 <pow>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	ed2d 8b02 	vpush	{d8}
 8009c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8009c82:	eef0 8a60 	vmov.f32	s17, s1
 8009c86:	ec55 4b11 	vmov	r4, r5, d1
 8009c8a:	f000 f871 	bl	8009d70 <__ieee754_pow>
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	ec57 6b10 	vmov	r6, r7, d0
 8009c9a:	f7f6 feef 	bl	8000a7c <__aeabi_dcmpun>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d13b      	bne.n	8009d1a <pow+0xa2>
 8009ca2:	ec51 0b18 	vmov	r0, r1, d8
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f7f6 feb5 	bl	8000a18 <__aeabi_dcmpeq>
 8009cae:	b1b8      	cbz	r0, 8009ce0 <pow+0x68>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f7f6 feae 	bl	8000a18 <__aeabi_dcmpeq>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d146      	bne.n	8009d4e <pow+0xd6>
 8009cc0:	ec45 4b10 	vmov	d0, r4, r5
 8009cc4:	f000 f848 	bl	8009d58 <finite>
 8009cc8:	b338      	cbz	r0, 8009d1a <pow+0xa2>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 feab 	bl	8000a2c <__aeabi_dcmplt>
 8009cd6:	b300      	cbz	r0, 8009d1a <pow+0xa2>
 8009cd8:	f7ff ffa4 	bl	8009c24 <__errno>
 8009cdc:	2322      	movs	r3, #34	@ 0x22
 8009cde:	e01b      	b.n	8009d18 <pow+0xa0>
 8009ce0:	ec47 6b10 	vmov	d0, r6, r7
 8009ce4:	f000 f838 	bl	8009d58 <finite>
 8009ce8:	b9e0      	cbnz	r0, 8009d24 <pow+0xac>
 8009cea:	eeb0 0a48 	vmov.f32	s0, s16
 8009cee:	eef0 0a68 	vmov.f32	s1, s17
 8009cf2:	f000 f831 	bl	8009d58 <finite>
 8009cf6:	b1a8      	cbz	r0, 8009d24 <pow+0xac>
 8009cf8:	ec45 4b10 	vmov	d0, r4, r5
 8009cfc:	f000 f82c 	bl	8009d58 <finite>
 8009d00:	b180      	cbz	r0, 8009d24 <pow+0xac>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 feb7 	bl	8000a7c <__aeabi_dcmpun>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d0e2      	beq.n	8009cd8 <pow+0x60>
 8009d12:	f7ff ff87 	bl	8009c24 <__errno>
 8009d16:	2321      	movs	r3, #33	@ 0x21
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	ecbd 8b02 	vpop	{d8}
 8009d1e:	ec47 6b10 	vmov	d0, r6, r7
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	2200      	movs	r2, #0
 8009d26:	2300      	movs	r3, #0
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fe74 	bl	8000a18 <__aeabi_dcmpeq>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d0f2      	beq.n	8009d1a <pow+0xa2>
 8009d34:	eeb0 0a48 	vmov.f32	s0, s16
 8009d38:	eef0 0a68 	vmov.f32	s1, s17
 8009d3c:	f000 f80c 	bl	8009d58 <finite>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d0ea      	beq.n	8009d1a <pow+0xa2>
 8009d44:	ec45 4b10 	vmov	d0, r4, r5
 8009d48:	f000 f806 	bl	8009d58 <finite>
 8009d4c:	e7c3      	b.n	8009cd6 <pow+0x5e>
 8009d4e:	4f01      	ldr	r7, [pc, #4]	@ (8009d54 <pow+0xdc>)
 8009d50:	2600      	movs	r6, #0
 8009d52:	e7e2      	b.n	8009d1a <pow+0xa2>
 8009d54:	3ff00000 	.word	0x3ff00000

08009d58 <finite>:
 8009d58:	b082      	sub	sp, #8
 8009d5a:	ed8d 0b00 	vstr	d0, [sp]
 8009d5e:	9801      	ldr	r0, [sp, #4]
 8009d60:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009d64:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009d68:	0fc0      	lsrs	r0, r0, #31
 8009d6a:	b002      	add	sp, #8
 8009d6c:	4770      	bx	lr
	...

08009d70 <__ieee754_pow>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	b091      	sub	sp, #68	@ 0x44
 8009d76:	ed8d 1b00 	vstr	d1, [sp]
 8009d7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009d7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009d82:	ea5a 0001 	orrs.w	r0, sl, r1
 8009d86:	ec57 6b10 	vmov	r6, r7, d0
 8009d8a:	d113      	bne.n	8009db4 <__ieee754_pow+0x44>
 8009d8c:	19b3      	adds	r3, r6, r6
 8009d8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009d92:	4152      	adcs	r2, r2
 8009d94:	4298      	cmp	r0, r3
 8009d96:	4b9a      	ldr	r3, [pc, #616]	@ (800a000 <__ieee754_pow+0x290>)
 8009d98:	4193      	sbcs	r3, r2
 8009d9a:	f080 84ee 	bcs.w	800a77a <__ieee754_pow+0xa0a>
 8009d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 fa19 	bl	80001dc <__adddf3>
 8009daa:	ec41 0b10 	vmov	d0, r0, r1
 8009dae:	b011      	add	sp, #68	@ 0x44
 8009db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db4:	4a93      	ldr	r2, [pc, #588]	@ (800a004 <__ieee754_pow+0x294>)
 8009db6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009dba:	4295      	cmp	r5, r2
 8009dbc:	46b8      	mov	r8, r7
 8009dbe:	4633      	mov	r3, r6
 8009dc0:	d80a      	bhi.n	8009dd8 <__ieee754_pow+0x68>
 8009dc2:	d104      	bne.n	8009dce <__ieee754_pow+0x5e>
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	d1ea      	bne.n	8009d9e <__ieee754_pow+0x2e>
 8009dc8:	45aa      	cmp	sl, r5
 8009dca:	d8e8      	bhi.n	8009d9e <__ieee754_pow+0x2e>
 8009dcc:	e001      	b.n	8009dd2 <__ieee754_pow+0x62>
 8009dce:	4592      	cmp	sl, r2
 8009dd0:	d802      	bhi.n	8009dd8 <__ieee754_pow+0x68>
 8009dd2:	4592      	cmp	sl, r2
 8009dd4:	d10f      	bne.n	8009df6 <__ieee754_pow+0x86>
 8009dd6:	b171      	cbz	r1, 8009df6 <__ieee754_pow+0x86>
 8009dd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009ddc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009de0:	ea58 0803 	orrs.w	r8, r8, r3
 8009de4:	d1db      	bne.n	8009d9e <__ieee754_pow+0x2e>
 8009de6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dea:	18db      	adds	r3, r3, r3
 8009dec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009df0:	4152      	adcs	r2, r2
 8009df2:	4598      	cmp	r8, r3
 8009df4:	e7cf      	b.n	8009d96 <__ieee754_pow+0x26>
 8009df6:	f1b8 0f00 	cmp.w	r8, #0
 8009dfa:	46ab      	mov	fp, r5
 8009dfc:	da43      	bge.n	8009e86 <__ieee754_pow+0x116>
 8009dfe:	4a82      	ldr	r2, [pc, #520]	@ (800a008 <__ieee754_pow+0x298>)
 8009e00:	4592      	cmp	sl, r2
 8009e02:	d856      	bhi.n	8009eb2 <__ieee754_pow+0x142>
 8009e04:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009e08:	4592      	cmp	sl, r2
 8009e0a:	f240 84c5 	bls.w	800a798 <__ieee754_pow+0xa28>
 8009e0e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009e12:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009e16:	2a14      	cmp	r2, #20
 8009e18:	dd18      	ble.n	8009e4c <__ieee754_pow+0xdc>
 8009e1a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009e1e:	fa21 f402 	lsr.w	r4, r1, r2
 8009e22:	fa04 f202 	lsl.w	r2, r4, r2
 8009e26:	428a      	cmp	r2, r1
 8009e28:	f040 84b6 	bne.w	800a798 <__ieee754_pow+0xa28>
 8009e2c:	f004 0401 	and.w	r4, r4, #1
 8009e30:	f1c4 0402 	rsb	r4, r4, #2
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d159      	bne.n	8009eec <__ieee754_pow+0x17c>
 8009e38:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009e3c:	d148      	bne.n	8009ed0 <__ieee754_pow+0x160>
 8009e3e:	4632      	mov	r2, r6
 8009e40:	463b      	mov	r3, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fb7f 	bl	8000548 <__aeabi_dmul>
 8009e4a:	e7ae      	b.n	8009daa <__ieee754_pow+0x3a>
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	d14c      	bne.n	8009eea <__ieee754_pow+0x17a>
 8009e50:	f1c2 0214 	rsb	r2, r2, #20
 8009e54:	fa4a f402 	asr.w	r4, sl, r2
 8009e58:	fa04 f202 	lsl.w	r2, r4, r2
 8009e5c:	4552      	cmp	r2, sl
 8009e5e:	f040 8498 	bne.w	800a792 <__ieee754_pow+0xa22>
 8009e62:	f004 0401 	and.w	r4, r4, #1
 8009e66:	f1c4 0402 	rsb	r4, r4, #2
 8009e6a:	4a68      	ldr	r2, [pc, #416]	@ (800a00c <__ieee754_pow+0x29c>)
 8009e6c:	4592      	cmp	sl, r2
 8009e6e:	d1e3      	bne.n	8009e38 <__ieee754_pow+0xc8>
 8009e70:	f1b9 0f00 	cmp.w	r9, #0
 8009e74:	f280 8489 	bge.w	800a78a <__ieee754_pow+0xa1a>
 8009e78:	4964      	ldr	r1, [pc, #400]	@ (800a00c <__ieee754_pow+0x29c>)
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	463b      	mov	r3, r7
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f7f6 fc8c 	bl	800079c <__aeabi_ddiv>
 8009e84:	e791      	b.n	8009daa <__ieee754_pow+0x3a>
 8009e86:	2400      	movs	r4, #0
 8009e88:	bb81      	cbnz	r1, 8009eec <__ieee754_pow+0x17c>
 8009e8a:	4a5e      	ldr	r2, [pc, #376]	@ (800a004 <__ieee754_pow+0x294>)
 8009e8c:	4592      	cmp	sl, r2
 8009e8e:	d1ec      	bne.n	8009e6a <__ieee754_pow+0xfa>
 8009e90:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009e94:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	f000 846e 	beq.w	800a77a <__ieee754_pow+0xa0a>
 8009e9e:	4b5c      	ldr	r3, [pc, #368]	@ (800a010 <__ieee754_pow+0x2a0>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d908      	bls.n	8009eb6 <__ieee754_pow+0x146>
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	f280 846b 	bge.w	800a782 <__ieee754_pow+0xa12>
 8009eac:	2000      	movs	r0, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	e77b      	b.n	8009daa <__ieee754_pow+0x3a>
 8009eb2:	2402      	movs	r4, #2
 8009eb4:	e7e8      	b.n	8009e88 <__ieee754_pow+0x118>
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	f04f 0000 	mov.w	r0, #0
 8009ebe:	f04f 0100 	mov.w	r1, #0
 8009ec2:	f6bf af72 	bge.w	8009daa <__ieee754_pow+0x3a>
 8009ec6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009eca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009ece:	e76c      	b.n	8009daa <__ieee754_pow+0x3a>
 8009ed0:	4a50      	ldr	r2, [pc, #320]	@ (800a014 <__ieee754_pow+0x2a4>)
 8009ed2:	4591      	cmp	r9, r2
 8009ed4:	d10a      	bne.n	8009eec <__ieee754_pow+0x17c>
 8009ed6:	f1b8 0f00 	cmp.w	r8, #0
 8009eda:	db07      	blt.n	8009eec <__ieee754_pow+0x17c>
 8009edc:	ec47 6b10 	vmov	d0, r6, r7
 8009ee0:	b011      	add	sp, #68	@ 0x44
 8009ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee6:	f000 bd4f 	b.w	800a988 <__ieee754_sqrt>
 8009eea:	2400      	movs	r4, #0
 8009eec:	ec47 6b10 	vmov	d0, r6, r7
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	f000 fc87 	bl	800a804 <fabs>
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	ec51 0b10 	vmov	r0, r1, d0
 8009efc:	bb43      	cbnz	r3, 8009f50 <__ieee754_pow+0x1e0>
 8009efe:	4b43      	ldr	r3, [pc, #268]	@ (800a00c <__ieee754_pow+0x29c>)
 8009f00:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d000      	beq.n	8009f0a <__ieee754_pow+0x19a>
 8009f08:	bb15      	cbnz	r5, 8009f50 <__ieee754_pow+0x1e0>
 8009f0a:	f1b9 0f00 	cmp.w	r9, #0
 8009f0e:	da05      	bge.n	8009f1c <__ieee754_pow+0x1ac>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	2000      	movs	r0, #0
 8009f16:	493d      	ldr	r1, [pc, #244]	@ (800a00c <__ieee754_pow+0x29c>)
 8009f18:	f7f6 fc40 	bl	800079c <__aeabi_ddiv>
 8009f1c:	f1b8 0f00 	cmp.w	r8, #0
 8009f20:	f6bf af43 	bge.w	8009daa <__ieee754_pow+0x3a>
 8009f24:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009f28:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009f2c:	4325      	orrs	r5, r4
 8009f2e:	d108      	bne.n	8009f42 <__ieee754_pow+0x1d2>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4610      	mov	r0, r2
 8009f36:	4619      	mov	r1, r3
 8009f38:	f7f6 f94e 	bl	80001d8 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e79e      	b.n	8009e80 <__ieee754_pow+0x110>
 8009f42:	2c01      	cmp	r4, #1
 8009f44:	f47f af31 	bne.w	8009daa <__ieee754_pow+0x3a>
 8009f48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	e72c      	b.n	8009daa <__ieee754_pow+0x3a>
 8009f50:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009f54:	3b01      	subs	r3, #1
 8009f56:	ea53 0204 	orrs.w	r2, r3, r4
 8009f5a:	d102      	bne.n	8009f62 <__ieee754_pow+0x1f2>
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	463b      	mov	r3, r7
 8009f60:	e7e8      	b.n	8009f34 <__ieee754_pow+0x1c4>
 8009f62:	3c01      	subs	r4, #1
 8009f64:	431c      	orrs	r4, r3
 8009f66:	d016      	beq.n	8009f96 <__ieee754_pow+0x226>
 8009f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ff0 <__ieee754_pow+0x280>
 8009f6c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f74:	f240 8110 	bls.w	800a198 <__ieee754_pow+0x428>
 8009f78:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <__ieee754_pow+0x2a8>)
 8009f7a:	459a      	cmp	sl, r3
 8009f7c:	4b24      	ldr	r3, [pc, #144]	@ (800a010 <__ieee754_pow+0x2a0>)
 8009f7e:	d916      	bls.n	8009fae <__ieee754_pow+0x23e>
 8009f80:	429d      	cmp	r5, r3
 8009f82:	d80b      	bhi.n	8009f9c <__ieee754_pow+0x22c>
 8009f84:	f1b9 0f00 	cmp.w	r9, #0
 8009f88:	da0b      	bge.n	8009fa2 <__ieee754_pow+0x232>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	b011      	add	sp, #68	@ 0x44
 8009f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f92:	f000 bcf1 	b.w	800a978 <__math_oflow>
 8009f96:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009ff8 <__ieee754_pow+0x288>
 8009f9a:	e7e7      	b.n	8009f6c <__ieee754_pow+0x1fc>
 8009f9c:	f1b9 0f00 	cmp.w	r9, #0
 8009fa0:	dcf3      	bgt.n	8009f8a <__ieee754_pow+0x21a>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	b011      	add	sp, #68	@ 0x44
 8009fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	f000 bcdd 	b.w	800a968 <__math_uflow>
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d20c      	bcs.n	8009fcc <__ieee754_pow+0x25c>
 8009fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f7f6 fd37 	bl	8000a2c <__aeabi_dcmplt>
 8009fbe:	3800      	subs	r0, #0
 8009fc0:	bf18      	it	ne
 8009fc2:	2001      	movne	r0, #1
 8009fc4:	f1b9 0f00 	cmp.w	r9, #0
 8009fc8:	daec      	bge.n	8009fa4 <__ieee754_pow+0x234>
 8009fca:	e7df      	b.n	8009f8c <__ieee754_pow+0x21c>
 8009fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800a00c <__ieee754_pow+0x29c>)
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	d922      	bls.n	800a01c <__ieee754_pow+0x2ac>
 8009fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f7f6 fd26 	bl	8000a2c <__aeabi_dcmplt>
 8009fe0:	3800      	subs	r0, #0
 8009fe2:	bf18      	it	ne
 8009fe4:	2001      	movne	r0, #1
 8009fe6:	f1b9 0f00 	cmp.w	r9, #0
 8009fea:	dccf      	bgt.n	8009f8c <__ieee754_pow+0x21c>
 8009fec:	e7da      	b.n	8009fa4 <__ieee754_pow+0x234>
 8009fee:	bf00      	nop
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	bff00000 	.word	0xbff00000
 800a000:	fff00000 	.word	0xfff00000
 800a004:	7ff00000 	.word	0x7ff00000
 800a008:	433fffff 	.word	0x433fffff
 800a00c:	3ff00000 	.word	0x3ff00000
 800a010:	3fefffff 	.word	0x3fefffff
 800a014:	3fe00000 	.word	0x3fe00000
 800a018:	43f00000 	.word	0x43f00000
 800a01c:	4b5a      	ldr	r3, [pc, #360]	@ (800a188 <__ieee754_pow+0x418>)
 800a01e:	f7f6 f8db 	bl	80001d8 <__aeabi_dsub>
 800a022:	a351      	add	r3, pc, #324	@ (adr r3, 800a168 <__ieee754_pow+0x3f8>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	4604      	mov	r4, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	f7f6 fa8c 	bl	8000548 <__aeabi_dmul>
 800a030:	a34f      	add	r3, pc, #316	@ (adr r3, 800a170 <__ieee754_pow+0x400>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	4620      	mov	r0, r4
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7f6 fa83 	bl	8000548 <__aeabi_dmul>
 800a042:	4b52      	ldr	r3, [pc, #328]	@ (800a18c <__ieee754_pow+0x41c>)
 800a044:	4682      	mov	sl, r0
 800a046:	468b      	mov	fp, r1
 800a048:	2200      	movs	r2, #0
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7f6 fa7b 	bl	8000548 <__aeabi_dmul>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	a148      	add	r1, pc, #288	@ (adr r1, 800a178 <__ieee754_pow+0x408>)
 800a058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a05c:	f7f6 f8bc 	bl	80001d8 <__aeabi_dsub>
 800a060:	4622      	mov	r2, r4
 800a062:	462b      	mov	r3, r5
 800a064:	f7f6 fa70 	bl	8000548 <__aeabi_dmul>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	2000      	movs	r0, #0
 800a06e:	4948      	ldr	r1, [pc, #288]	@ (800a190 <__ieee754_pow+0x420>)
 800a070:	f7f6 f8b2 	bl	80001d8 <__aeabi_dsub>
 800a074:	4622      	mov	r2, r4
 800a076:	4680      	mov	r8, r0
 800a078:	4689      	mov	r9, r1
 800a07a:	462b      	mov	r3, r5
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 fa62 	bl	8000548 <__aeabi_dmul>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	f7f6 fa5c 	bl	8000548 <__aeabi_dmul>
 800a090:	a33b      	add	r3, pc, #236	@ (adr r3, 800a180 <__ieee754_pow+0x410>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 fa57 	bl	8000548 <__aeabi_dmul>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4650      	mov	r0, sl
 800a0a0:	4659      	mov	r1, fp
 800a0a2:	f7f6 f899 	bl	80001d8 <__aeabi_dsub>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f7f6 f893 	bl	80001dc <__adddf3>
 800a0b6:	2400      	movs	r4, #0
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	463b      	mov	r3, r7
 800a0bc:	4620      	mov	r0, r4
 800a0be:	460d      	mov	r5, r1
 800a0c0:	f7f6 f88a 	bl	80001d8 <__aeabi_dsub>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 f884 	bl	80001d8 <__aeabi_dsub>
 800a0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	465b      	mov	r3, fp
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ec:	f7f6 f874 	bl	80001d8 <__aeabi_dsub>
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	462b      	mov	r3, r5
 800a0f4:	f7f6 fa28 	bl	8000548 <__aeabi_dmul>
 800a0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	4689      	mov	r9, r1
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 fa20 	bl	8000548 <__aeabi_dmul>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 f864 	bl	80001dc <__adddf3>
 800a114:	465b      	mov	r3, fp
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	4652      	mov	r2, sl
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 fa12 	bl	8000548 <__aeabi_dmul>
 800a124:	460b      	mov	r3, r1
 800a126:	4602      	mov	r2, r0
 800a128:	4680      	mov	r8, r0
 800a12a:	4689      	mov	r9, r1
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 f854 	bl	80001dc <__adddf3>
 800a134:	4b17      	ldr	r3, [pc, #92]	@ (800a194 <__ieee754_pow+0x424>)
 800a136:	4299      	cmp	r1, r3
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	468b      	mov	fp, r1
 800a13e:	f340 820b 	ble.w	800a558 <__ieee754_pow+0x7e8>
 800a142:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a146:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a14a:	4303      	orrs	r3, r0
 800a14c:	f000 81ea 	beq.w	800a524 <__ieee754_pow+0x7b4>
 800a150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	f7f6 fc68 	bl	8000a2c <__aeabi_dcmplt>
 800a15c:	3800      	subs	r0, #0
 800a15e:	bf18      	it	ne
 800a160:	2001      	movne	r0, #1
 800a162:	e713      	b.n	8009f8c <__ieee754_pow+0x21c>
 800a164:	f3af 8000 	nop.w
 800a168:	60000000 	.word	0x60000000
 800a16c:	3ff71547 	.word	0x3ff71547
 800a170:	f85ddf44 	.word	0xf85ddf44
 800a174:	3e54ae0b 	.word	0x3e54ae0b
 800a178:	55555555 	.word	0x55555555
 800a17c:	3fd55555 	.word	0x3fd55555
 800a180:	652b82fe 	.word	0x652b82fe
 800a184:	3ff71547 	.word	0x3ff71547
 800a188:	3ff00000 	.word	0x3ff00000
 800a18c:	3fd00000 	.word	0x3fd00000
 800a190:	3fe00000 	.word	0x3fe00000
 800a194:	408fffff 	.word	0x408fffff
 800a198:	4bd5      	ldr	r3, [pc, #852]	@ (800a4f0 <__ieee754_pow+0x780>)
 800a19a:	ea08 0303 	and.w	r3, r8, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	b92b      	cbnz	r3, 800a1ae <__ieee754_pow+0x43e>
 800a1a2:	4bd4      	ldr	r3, [pc, #848]	@ (800a4f4 <__ieee754_pow+0x784>)
 800a1a4:	f7f6 f9d0 	bl	8000548 <__aeabi_dmul>
 800a1a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a1ac:	468b      	mov	fp, r1
 800a1ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a1b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a1b6:	4413      	add	r3, r2
 800a1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ba:	4bcf      	ldr	r3, [pc, #828]	@ (800a4f8 <__ieee754_pow+0x788>)
 800a1bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a1c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a1c4:	459b      	cmp	fp, r3
 800a1c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a1ca:	dd08      	ble.n	800a1de <__ieee754_pow+0x46e>
 800a1cc:	4bcb      	ldr	r3, [pc, #812]	@ (800a4fc <__ieee754_pow+0x78c>)
 800a1ce:	459b      	cmp	fp, r3
 800a1d0:	f340 81a5 	ble.w	800a51e <__ieee754_pow+0x7ae>
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a1de:	f04f 0a00 	mov.w	sl, #0
 800a1e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a1e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1e8:	4bc5      	ldr	r3, [pc, #788]	@ (800a500 <__ieee754_pow+0x790>)
 800a1ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1ee:	ed93 7b00 	vldr	d7, [r3]
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	ec53 2b17 	vmov	r2, r3, d7
 800a1f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a200:	f7f5 ffea 	bl	80001d8 <__aeabi_dsub>
 800a204:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a210:	f7f5 ffe4 	bl	80001dc <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	2000      	movs	r0, #0
 800a21a:	49ba      	ldr	r1, [pc, #744]	@ (800a504 <__ieee754_pow+0x794>)
 800a21c:	f7f6 fabe 	bl	800079c <__aeabi_ddiv>
 800a220:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 f98c 	bl	8000548 <__aeabi_dmul>
 800a230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a234:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a238:	106d      	asrs	r5, r5, #1
 800a23a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a23e:	f04f 0b00 	mov.w	fp, #0
 800a242:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a246:	4661      	mov	r1, ip
 800a248:	2200      	movs	r2, #0
 800a24a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a24e:	4658      	mov	r0, fp
 800a250:	46e1      	mov	r9, ip
 800a252:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a256:	4614      	mov	r4, r2
 800a258:	461d      	mov	r5, r3
 800a25a:	f7f6 f975 	bl	8000548 <__aeabi_dmul>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f5 ffb7 	bl	80001d8 <__aeabi_dsub>
 800a26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f5 ffaf 	bl	80001d8 <__aeabi_dsub>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a282:	f7f5 ffa9 	bl	80001d8 <__aeabi_dsub>
 800a286:	465a      	mov	r2, fp
 800a288:	464b      	mov	r3, r9
 800a28a:	f7f6 f95d 	bl	8000548 <__aeabi_dmul>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f5 ff9f 	bl	80001d8 <__aeabi_dsub>
 800a29a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a29e:	f7f6 f953 	bl	8000548 <__aeabi_dmul>
 800a2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f7f6 f94b 	bl	8000548 <__aeabi_dmul>
 800a2b2:	a37d      	add	r3, pc, #500	@ (adr r3, 800a4a8 <__ieee754_pow+0x738>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	f7f6 f944 	bl	8000548 <__aeabi_dmul>
 800a2c0:	a37b      	add	r3, pc, #492	@ (adr r3, 800a4b0 <__ieee754_pow+0x740>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f5 ff89 	bl	80001dc <__adddf3>
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	f7f6 f93b 	bl	8000548 <__aeabi_dmul>
 800a2d2:	a379      	add	r3, pc, #484	@ (adr r3, 800a4b8 <__ieee754_pow+0x748>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f5 ff80 	bl	80001dc <__adddf3>
 800a2dc:	4622      	mov	r2, r4
 800a2de:	462b      	mov	r3, r5
 800a2e0:	f7f6 f932 	bl	8000548 <__aeabi_dmul>
 800a2e4:	a376      	add	r3, pc, #472	@ (adr r3, 800a4c0 <__ieee754_pow+0x750>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f5 ff77 	bl	80001dc <__adddf3>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	f7f6 f929 	bl	8000548 <__aeabi_dmul>
 800a2f6:	a374      	add	r3, pc, #464	@ (adr r3, 800a4c8 <__ieee754_pow+0x758>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ff6e 	bl	80001dc <__adddf3>
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	f7f6 f920 	bl	8000548 <__aeabi_dmul>
 800a308:	a371      	add	r3, pc, #452	@ (adr r3, 800a4d0 <__ieee754_pow+0x760>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f5 ff65 	bl	80001dc <__adddf3>
 800a312:	4622      	mov	r2, r4
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	462b      	mov	r3, r5
 800a31a:	4620      	mov	r0, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7f6 f913 	bl	8000548 <__aeabi_dmul>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f6 f90d 	bl	8000548 <__aeabi_dmul>
 800a32e:	465a      	mov	r2, fp
 800a330:	4604      	mov	r4, r0
 800a332:	460d      	mov	r5, r1
 800a334:	464b      	mov	r3, r9
 800a336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a33a:	f7f5 ff4f 	bl	80001dc <__adddf3>
 800a33e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a342:	f7f6 f901 	bl	8000548 <__aeabi_dmul>
 800a346:	4622      	mov	r2, r4
 800a348:	462b      	mov	r3, r5
 800a34a:	f7f5 ff47 	bl	80001dc <__adddf3>
 800a34e:	465a      	mov	r2, fp
 800a350:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a354:	464b      	mov	r3, r9
 800a356:	4658      	mov	r0, fp
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f6 f8f5 	bl	8000548 <__aeabi_dmul>
 800a35e:	4b6a      	ldr	r3, [pc, #424]	@ (800a508 <__ieee754_pow+0x798>)
 800a360:	2200      	movs	r2, #0
 800a362:	4606      	mov	r6, r0
 800a364:	460f      	mov	r7, r1
 800a366:	f7f5 ff39 	bl	80001dc <__adddf3>
 800a36a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a36e:	f7f5 ff35 	bl	80001dc <__adddf3>
 800a372:	46d8      	mov	r8, fp
 800a374:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a378:	460d      	mov	r5, r1
 800a37a:	465a      	mov	r2, fp
 800a37c:	460b      	mov	r3, r1
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a386:	f7f6 f8df 	bl	8000548 <__aeabi_dmul>
 800a38a:	465c      	mov	r4, fp
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	4b5d      	ldr	r3, [pc, #372]	@ (800a508 <__ieee754_pow+0x798>)
 800a392:	2200      	movs	r2, #0
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f5 ff1e 	bl	80001d8 <__aeabi_dsub>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	f7f5 ff1a 	bl	80001d8 <__aeabi_dsub>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3ac:	f7f5 ff14 	bl	80001d8 <__aeabi_dsub>
 800a3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b4:	f7f6 f8c8 	bl	8000548 <__aeabi_dmul>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	462b      	mov	r3, r5
 800a3c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3c4:	f7f6 f8c0 	bl	8000548 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f5 ff04 	bl	80001dc <__adddf3>
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7f5 fefc 	bl	80001dc <__adddf3>
 800a3e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a3e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a4d8 <__ieee754_pow+0x768>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	4658      	mov	r0, fp
 800a3f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	f7f6 f8a7 	bl	8000548 <__aeabi_dmul>
 800a3fa:	465c      	mov	r4, fp
 800a3fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7f5 fee6 	bl	80001d8 <__aeabi_dsub>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f5 fee0 	bl	80001d8 <__aeabi_dsub>
 800a418:	a331      	add	r3, pc, #196	@ (adr r3, 800a4e0 <__ieee754_pow+0x770>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f6 f893 	bl	8000548 <__aeabi_dmul>
 800a422:	a331      	add	r3, pc, #196	@ (adr r3, 800a4e8 <__ieee754_pow+0x778>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f6 f88a 	bl	8000548 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4630      	mov	r0, r6
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f5 fece 	bl	80001dc <__adddf3>
 800a440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a442:	4b32      	ldr	r3, [pc, #200]	@ (800a50c <__ieee754_pow+0x79c>)
 800a444:	4413      	add	r3, r2
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 fec7 	bl	80001dc <__adddf3>
 800a44e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a452:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a454:	f7f6 f80e 	bl	8000474 <__aeabi_i2d>
 800a458:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a45a:	4b2d      	ldr	r3, [pc, #180]	@ (800a510 <__ieee754_pow+0x7a0>)
 800a45c:	4413      	add	r3, r2
 800a45e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a462:	4606      	mov	r6, r0
 800a464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a468:	460f      	mov	r7, r1
 800a46a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46e:	f7f5 feb5 	bl	80001dc <__adddf3>
 800a472:	4642      	mov	r2, r8
 800a474:	464b      	mov	r3, r9
 800a476:	f7f5 feb1 	bl	80001dc <__adddf3>
 800a47a:	4632      	mov	r2, r6
 800a47c:	463b      	mov	r3, r7
 800a47e:	f7f5 fead 	bl	80001dc <__adddf3>
 800a482:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a486:	4632      	mov	r2, r6
 800a488:	463b      	mov	r3, r7
 800a48a:	4658      	mov	r0, fp
 800a48c:	460d      	mov	r5, r1
 800a48e:	f7f5 fea3 	bl	80001d8 <__aeabi_dsub>
 800a492:	4642      	mov	r2, r8
 800a494:	464b      	mov	r3, r9
 800a496:	f7f5 fe9f 	bl	80001d8 <__aeabi_dsub>
 800a49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a49e:	f7f5 fe9b 	bl	80001d8 <__aeabi_dsub>
 800a4a2:	465c      	mov	r4, fp
 800a4a4:	e036      	b.n	800a514 <__ieee754_pow+0x7a4>
 800a4a6:	bf00      	nop
 800a4a8:	4a454eef 	.word	0x4a454eef
 800a4ac:	3fca7e28 	.word	0x3fca7e28
 800a4b0:	93c9db65 	.word	0x93c9db65
 800a4b4:	3fcd864a 	.word	0x3fcd864a
 800a4b8:	a91d4101 	.word	0xa91d4101
 800a4bc:	3fd17460 	.word	0x3fd17460
 800a4c0:	518f264d 	.word	0x518f264d
 800a4c4:	3fd55555 	.word	0x3fd55555
 800a4c8:	db6fabff 	.word	0xdb6fabff
 800a4cc:	3fdb6db6 	.word	0x3fdb6db6
 800a4d0:	33333303 	.word	0x33333303
 800a4d4:	3fe33333 	.word	0x3fe33333
 800a4d8:	e0000000 	.word	0xe0000000
 800a4dc:	3feec709 	.word	0x3feec709
 800a4e0:	dc3a03fd 	.word	0xdc3a03fd
 800a4e4:	3feec709 	.word	0x3feec709
 800a4e8:	145b01f5 	.word	0x145b01f5
 800a4ec:	be3e2fe0 	.word	0xbe3e2fe0
 800a4f0:	7ff00000 	.word	0x7ff00000
 800a4f4:	43400000 	.word	0x43400000
 800a4f8:	0003988e 	.word	0x0003988e
 800a4fc:	000bb679 	.word	0x000bb679
 800a500:	0800ac58 	.word	0x0800ac58
 800a504:	3ff00000 	.word	0x3ff00000
 800a508:	40080000 	.word	0x40080000
 800a50c:	0800ac38 	.word	0x0800ac38
 800a510:	0800ac48 	.word	0x0800ac48
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a51c:	e5d6      	b.n	800a0cc <__ieee754_pow+0x35c>
 800a51e:	f04f 0a01 	mov.w	sl, #1
 800a522:	e65e      	b.n	800a1e2 <__ieee754_pow+0x472>
 800a524:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a7fc <__ieee754_pow+0xa8c>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f5 fe55 	bl	80001dc <__adddf3>
 800a532:	4642      	mov	r2, r8
 800a534:	e9cd 0100 	strd	r0, r1, [sp]
 800a538:	464b      	mov	r3, r9
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7f5 fe4b 	bl	80001d8 <__aeabi_dsub>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54a:	f7f6 fa8d 	bl	8000a68 <__aeabi_dcmpgt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	f47f adfe 	bne.w	800a150 <__ieee754_pow+0x3e0>
 800a554:	4ba2      	ldr	r3, [pc, #648]	@ (800a7e0 <__ieee754_pow+0xa70>)
 800a556:	e022      	b.n	800a59e <__ieee754_pow+0x82e>
 800a558:	4ca2      	ldr	r4, [pc, #648]	@ (800a7e4 <__ieee754_pow+0xa74>)
 800a55a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a55e:	42a3      	cmp	r3, r4
 800a560:	d919      	bls.n	800a596 <__ieee754_pow+0x826>
 800a562:	4ba1      	ldr	r3, [pc, #644]	@ (800a7e8 <__ieee754_pow+0xa78>)
 800a564:	440b      	add	r3, r1
 800a566:	4303      	orrs	r3, r0
 800a568:	d009      	beq.n	800a57e <__ieee754_pow+0x80e>
 800a56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a56e:	2200      	movs	r2, #0
 800a570:	2300      	movs	r3, #0
 800a572:	f7f6 fa5b 	bl	8000a2c <__aeabi_dcmplt>
 800a576:	3800      	subs	r0, #0
 800a578:	bf18      	it	ne
 800a57a:	2001      	movne	r0, #1
 800a57c:	e512      	b.n	8009fa4 <__ieee754_pow+0x234>
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	f7f5 fe29 	bl	80001d8 <__aeabi_dsub>
 800a586:	4632      	mov	r2, r6
 800a588:	463b      	mov	r3, r7
 800a58a:	f7f6 fa63 	bl	8000a54 <__aeabi_dcmpge>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1eb      	bne.n	800a56a <__ieee754_pow+0x7fa>
 800a592:	4b96      	ldr	r3, [pc, #600]	@ (800a7ec <__ieee754_pow+0xa7c>)
 800a594:	e003      	b.n	800a59e <__ieee754_pow+0x82e>
 800a596:	4a96      	ldr	r2, [pc, #600]	@ (800a7f0 <__ieee754_pow+0xa80>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	f240 80e7 	bls.w	800a76c <__ieee754_pow+0x9fc>
 800a59e:	151b      	asrs	r3, r3, #20
 800a5a0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a5a4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a5a8:	fa4a fa03 	asr.w	sl, sl, r3
 800a5ac:	44da      	add	sl, fp
 800a5ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a5b2:	4890      	ldr	r0, [pc, #576]	@ (800a7f4 <__ieee754_pow+0xa84>)
 800a5b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a5b8:	4108      	asrs	r0, r1
 800a5ba:	ea00 030a 	and.w	r3, r0, sl
 800a5be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a5c2:	f1c1 0114 	rsb	r1, r1, #20
 800a5c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a5ca:	fa4a fa01 	asr.w	sl, sl, r1
 800a5ce:	f1bb 0f00 	cmp.w	fp, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	bfb8      	it	lt
 800a5dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5e0:	f7f5 fdfa 	bl	80001d8 <__aeabi_dsub>
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	f7f5 fdf4 	bl	80001dc <__adddf3>
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	a36a      	add	r3, pc, #424	@ (adr r3, 800a7a0 <__ieee754_pow+0xa30>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	460d      	mov	r5, r1
 800a600:	f7f5 ffa2 	bl	8000548 <__aeabi_dmul>
 800a604:	4642      	mov	r2, r8
 800a606:	e9cd 0100 	strd	r0, r1, [sp]
 800a60a:	464b      	mov	r3, r9
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fde2 	bl	80001d8 <__aeabi_dsub>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f5 fddc 	bl	80001d8 <__aeabi_dsub>
 800a620:	a361      	add	r3, pc, #388	@ (adr r3, 800a7a8 <__ieee754_pow+0xa38>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 ff8f 	bl	8000548 <__aeabi_dmul>
 800a62a:	a361      	add	r3, pc, #388	@ (adr r3, 800a7b0 <__ieee754_pow+0xa40>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 ff86 	bl	8000548 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4640      	mov	r0, r8
 800a642:	4649      	mov	r1, r9
 800a644:	f7f5 fdca 	bl	80001dc <__adddf3>
 800a648:	4604      	mov	r4, r0
 800a64a:	460d      	mov	r5, r1
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a654:	f7f5 fdc2 	bl	80001dc <__adddf3>
 800a658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a65c:	4680      	mov	r8, r0
 800a65e:	4689      	mov	r9, r1
 800a660:	f7f5 fdba 	bl	80001d8 <__aeabi_dsub>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4620      	mov	r0, r4
 800a66a:	4629      	mov	r1, r5
 800a66c:	f7f5 fdb4 	bl	80001d8 <__aeabi_dsub>
 800a670:	4642      	mov	r2, r8
 800a672:	4606      	mov	r6, r0
 800a674:	460f      	mov	r7, r1
 800a676:	464b      	mov	r3, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f5 ff64 	bl	8000548 <__aeabi_dmul>
 800a680:	a34d      	add	r3, pc, #308	@ (adr r3, 800a7b8 <__ieee754_pow+0xa48>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	4604      	mov	r4, r0
 800a688:	460d      	mov	r5, r1
 800a68a:	f7f5 ff5d 	bl	8000548 <__aeabi_dmul>
 800a68e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a7c0 <__ieee754_pow+0xa50>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fda0 	bl	80001d8 <__aeabi_dsub>
 800a698:	4622      	mov	r2, r4
 800a69a:	462b      	mov	r3, r5
 800a69c:	f7f5 ff54 	bl	8000548 <__aeabi_dmul>
 800a6a0:	a349      	add	r3, pc, #292	@ (adr r3, 800a7c8 <__ieee754_pow+0xa58>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fd99 	bl	80001dc <__adddf3>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	f7f5 ff4b 	bl	8000548 <__aeabi_dmul>
 800a6b2:	a347      	add	r3, pc, #284	@ (adr r3, 800a7d0 <__ieee754_pow+0xa60>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fd8e 	bl	80001d8 <__aeabi_dsub>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	462b      	mov	r3, r5
 800a6c0:	f7f5 ff42 	bl	8000548 <__aeabi_dmul>
 800a6c4:	a344      	add	r3, pc, #272	@ (adr r3, 800a7d8 <__ieee754_pow+0xa68>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f5 fd87 	bl	80001dc <__adddf3>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	f7f5 ff39 	bl	8000548 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 fd7b 	bl	80001d8 <__aeabi_dsub>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	f7f5 ff2b 	bl	8000548 <__aeabi_dmul>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a6f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 fd6a 	bl	80001d8 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70c:	f7f6 f846 	bl	800079c <__aeabi_ddiv>
 800a710:	4632      	mov	r2, r6
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	463b      	mov	r3, r7
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f5 ff14 	bl	8000548 <__aeabi_dmul>
 800a720:	4632      	mov	r2, r6
 800a722:	463b      	mov	r3, r7
 800a724:	f7f5 fd5a 	bl	80001dc <__adddf3>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 fd52 	bl	80001d8 <__aeabi_dsub>
 800a734:	4642      	mov	r2, r8
 800a736:	464b      	mov	r3, r9
 800a738:	f7f5 fd4e 	bl	80001d8 <__aeabi_dsub>
 800a73c:	460b      	mov	r3, r1
 800a73e:	4602      	mov	r2, r0
 800a740:	492d      	ldr	r1, [pc, #180]	@ (800a7f8 <__ieee754_pow+0xa88>)
 800a742:	2000      	movs	r0, #0
 800a744:	f7f5 fd48 	bl	80001d8 <__aeabi_dsub>
 800a748:	ec41 0b10 	vmov	d0, r0, r1
 800a74c:	ee10 3a90 	vmov	r3, s1
 800a750:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a758:	da0b      	bge.n	800a772 <__ieee754_pow+0xa02>
 800a75a:	4650      	mov	r0, sl
 800a75c:	f000 f85c 	bl	800a818 <scalbn>
 800a760:	ec51 0b10 	vmov	r0, r1, d0
 800a764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a768:	f7ff bb6d 	b.w	8009e46 <__ieee754_pow+0xd6>
 800a76c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a770:	e73a      	b.n	800a5e8 <__ieee754_pow+0x878>
 800a772:	ec51 0b10 	vmov	r0, r1, d0
 800a776:	4619      	mov	r1, r3
 800a778:	e7f4      	b.n	800a764 <__ieee754_pow+0x9f4>
 800a77a:	491f      	ldr	r1, [pc, #124]	@ (800a7f8 <__ieee754_pow+0xa88>)
 800a77c:	2000      	movs	r0, #0
 800a77e:	f7ff bb14 	b.w	8009daa <__ieee754_pow+0x3a>
 800a782:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a786:	f7ff bb10 	b.w	8009daa <__ieee754_pow+0x3a>
 800a78a:	4630      	mov	r0, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	f7ff bb0c 	b.w	8009daa <__ieee754_pow+0x3a>
 800a792:	460c      	mov	r4, r1
 800a794:	f7ff bb69 	b.w	8009e6a <__ieee754_pow+0xfa>
 800a798:	2400      	movs	r4, #0
 800a79a:	f7ff bb4b 	b.w	8009e34 <__ieee754_pow+0xc4>
 800a79e:	bf00      	nop
 800a7a0:	00000000 	.word	0x00000000
 800a7a4:	3fe62e43 	.word	0x3fe62e43
 800a7a8:	fefa39ef 	.word	0xfefa39ef
 800a7ac:	3fe62e42 	.word	0x3fe62e42
 800a7b0:	0ca86c39 	.word	0x0ca86c39
 800a7b4:	be205c61 	.word	0xbe205c61
 800a7b8:	72bea4d0 	.word	0x72bea4d0
 800a7bc:	3e663769 	.word	0x3e663769
 800a7c0:	c5d26bf1 	.word	0xc5d26bf1
 800a7c4:	3ebbbd41 	.word	0x3ebbbd41
 800a7c8:	af25de2c 	.word	0xaf25de2c
 800a7cc:	3f11566a 	.word	0x3f11566a
 800a7d0:	16bebd93 	.word	0x16bebd93
 800a7d4:	3f66c16c 	.word	0x3f66c16c
 800a7d8:	5555553e 	.word	0x5555553e
 800a7dc:	3fc55555 	.word	0x3fc55555
 800a7e0:	40900000 	.word	0x40900000
 800a7e4:	4090cbff 	.word	0x4090cbff
 800a7e8:	3f6f3400 	.word	0x3f6f3400
 800a7ec:	4090cc00 	.word	0x4090cc00
 800a7f0:	3fe00000 	.word	0x3fe00000
 800a7f4:	fff00000 	.word	0xfff00000
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	652b82fe 	.word	0x652b82fe
 800a800:	3c971547 	.word	0x3c971547

0800a804 <fabs>:
 800a804:	ec51 0b10 	vmov	r0, r1, d0
 800a808:	4602      	mov	r2, r0
 800a80a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a80e:	ec43 2b10 	vmov	d0, r2, r3
 800a812:	4770      	bx	lr
 800a814:	0000      	movs	r0, r0
	...

0800a818 <scalbn>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	ec55 4b10 	vmov	r4, r5, d0
 800a81e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a822:	4606      	mov	r6, r0
 800a824:	462b      	mov	r3, r5
 800a826:	b991      	cbnz	r1, 800a84e <scalbn+0x36>
 800a828:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a82c:	4323      	orrs	r3, r4
 800a82e:	d03b      	beq.n	800a8a8 <scalbn+0x90>
 800a830:	4b33      	ldr	r3, [pc, #204]	@ (800a900 <scalbn+0xe8>)
 800a832:	4620      	mov	r0, r4
 800a834:	4629      	mov	r1, r5
 800a836:	2200      	movs	r2, #0
 800a838:	f7f5 fe86 	bl	8000548 <__aeabi_dmul>
 800a83c:	4b31      	ldr	r3, [pc, #196]	@ (800a904 <scalbn+0xec>)
 800a83e:	429e      	cmp	r6, r3
 800a840:	4604      	mov	r4, r0
 800a842:	460d      	mov	r5, r1
 800a844:	da0f      	bge.n	800a866 <scalbn+0x4e>
 800a846:	a326      	add	r3, pc, #152	@ (adr r3, 800a8e0 <scalbn+0xc8>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	e01e      	b.n	800a88c <scalbn+0x74>
 800a84e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a852:	4291      	cmp	r1, r2
 800a854:	d10b      	bne.n	800a86e <scalbn+0x56>
 800a856:	4622      	mov	r2, r4
 800a858:	4620      	mov	r0, r4
 800a85a:	4629      	mov	r1, r5
 800a85c:	f7f5 fcbe 	bl	80001dc <__adddf3>
 800a860:	4604      	mov	r4, r0
 800a862:	460d      	mov	r5, r1
 800a864:	e020      	b.n	800a8a8 <scalbn+0x90>
 800a866:	460b      	mov	r3, r1
 800a868:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a86c:	3936      	subs	r1, #54	@ 0x36
 800a86e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a872:	4296      	cmp	r6, r2
 800a874:	dd0d      	ble.n	800a892 <scalbn+0x7a>
 800a876:	2d00      	cmp	r5, #0
 800a878:	a11b      	add	r1, pc, #108	@ (adr r1, 800a8e8 <scalbn+0xd0>)
 800a87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87e:	da02      	bge.n	800a886 <scalbn+0x6e>
 800a880:	a11b      	add	r1, pc, #108	@ (adr r1, 800a8f0 <scalbn+0xd8>)
 800a882:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a886:	a318      	add	r3, pc, #96	@ (adr r3, 800a8e8 <scalbn+0xd0>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f5 fe5c 	bl	8000548 <__aeabi_dmul>
 800a890:	e7e6      	b.n	800a860 <scalbn+0x48>
 800a892:	1872      	adds	r2, r6, r1
 800a894:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a898:	428a      	cmp	r2, r1
 800a89a:	dcec      	bgt.n	800a876 <scalbn+0x5e>
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	dd06      	ble.n	800a8ae <scalbn+0x96>
 800a8a0:	f36f 531e 	bfc	r3, #20, #11
 800a8a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8a8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a8b2:	da08      	bge.n	800a8c6 <scalbn+0xae>
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	a10a      	add	r1, pc, #40	@ (adr r1, 800a8e0 <scalbn+0xc8>)
 800a8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8bc:	dac3      	bge.n	800a846 <scalbn+0x2e>
 800a8be:	a10e      	add	r1, pc, #56	@ (adr r1, 800a8f8 <scalbn+0xe0>)
 800a8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c4:	e7bf      	b.n	800a846 <scalbn+0x2e>
 800a8c6:	3236      	adds	r2, #54	@ 0x36
 800a8c8:	f36f 531e 	bfc	r3, #20, #11
 800a8cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <scalbn+0xf0>)
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	e7d8      	b.n	800a88c <scalbn+0x74>
 800a8da:	bf00      	nop
 800a8dc:	f3af 8000 	nop.w
 800a8e0:	c2f8f359 	.word	0xc2f8f359
 800a8e4:	01a56e1f 	.word	0x01a56e1f
 800a8e8:	8800759c 	.word	0x8800759c
 800a8ec:	7e37e43c 	.word	0x7e37e43c
 800a8f0:	8800759c 	.word	0x8800759c
 800a8f4:	fe37e43c 	.word	0xfe37e43c
 800a8f8:	c2f8f359 	.word	0xc2f8f359
 800a8fc:	81a56e1f 	.word	0x81a56e1f
 800a900:	43500000 	.word	0x43500000
 800a904:	ffff3cb0 	.word	0xffff3cb0
 800a908:	3c900000 	.word	0x3c900000

0800a90c <with_errno>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	ed2d 8b02 	vpush	{d8}
 800a912:	eeb0 8a40 	vmov.f32	s16, s0
 800a916:	eef0 8a60 	vmov.f32	s17, s1
 800a91a:	4604      	mov	r4, r0
 800a91c:	f7ff f982 	bl	8009c24 <__errno>
 800a920:	eeb0 0a48 	vmov.f32	s0, s16
 800a924:	eef0 0a68 	vmov.f32	s1, s17
 800a928:	ecbd 8b02 	vpop	{d8}
 800a92c:	6004      	str	r4, [r0, #0]
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <xflow>:
 800a930:	4603      	mov	r3, r0
 800a932:	b507      	push	{r0, r1, r2, lr}
 800a934:	ec51 0b10 	vmov	r0, r1, d0
 800a938:	b183      	cbz	r3, 800a95c <xflow+0x2c>
 800a93a:	4602      	mov	r2, r0
 800a93c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a940:	e9cd 2300 	strd	r2, r3, [sp]
 800a944:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a948:	f7f5 fdfe 	bl	8000548 <__aeabi_dmul>
 800a94c:	ec41 0b10 	vmov	d0, r0, r1
 800a950:	2022      	movs	r0, #34	@ 0x22
 800a952:	b003      	add	sp, #12
 800a954:	f85d eb04 	ldr.w	lr, [sp], #4
 800a958:	f7ff bfd8 	b.w	800a90c <with_errno>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	e7ee      	b.n	800a940 <xflow+0x10>
 800a962:	0000      	movs	r0, r0
 800a964:	0000      	movs	r0, r0
	...

0800a968 <__math_uflow>:
 800a968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a970 <__math_uflow+0x8>
 800a96c:	f7ff bfe0 	b.w	800a930 <xflow>
 800a970:	00000000 	.word	0x00000000
 800a974:	10000000 	.word	0x10000000

0800a978 <__math_oflow>:
 800a978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a980 <__math_oflow+0x8>
 800a97c:	f7ff bfd8 	b.w	800a930 <xflow>
 800a980:	00000000 	.word	0x00000000
 800a984:	70000000 	.word	0x70000000

0800a988 <__ieee754_sqrt>:
 800a988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4a66      	ldr	r2, [pc, #408]	@ (800ab28 <__ieee754_sqrt+0x1a0>)
 800a98e:	ec55 4b10 	vmov	r4, r5, d0
 800a992:	43aa      	bics	r2, r5
 800a994:	462b      	mov	r3, r5
 800a996:	4621      	mov	r1, r4
 800a998:	d110      	bne.n	800a9bc <__ieee754_sqrt+0x34>
 800a99a:	4622      	mov	r2, r4
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fdd2 	bl	8000548 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	f7f5 fc16 	bl	80001dc <__adddf3>
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	ec45 4b10 	vmov	d0, r4, r5
 800a9b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	dc0e      	bgt.n	800a9de <__ieee754_sqrt+0x56>
 800a9c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a9c4:	4322      	orrs	r2, r4
 800a9c6:	d0f5      	beq.n	800a9b4 <__ieee754_sqrt+0x2c>
 800a9c8:	b19d      	cbz	r5, 800a9f2 <__ieee754_sqrt+0x6a>
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fc02 	bl	80001d8 <__aeabi_dsub>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	f7f5 fee0 	bl	800079c <__aeabi_ddiv>
 800a9dc:	e7e8      	b.n	800a9b0 <__ieee754_sqrt+0x28>
 800a9de:	152a      	asrs	r2, r5, #20
 800a9e0:	d115      	bne.n	800aa0e <__ieee754_sqrt+0x86>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e009      	b.n	800a9fa <__ieee754_sqrt+0x72>
 800a9e6:	0acb      	lsrs	r3, r1, #11
 800a9e8:	3a15      	subs	r2, #21
 800a9ea:	0549      	lsls	r1, r1, #21
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0fa      	beq.n	800a9e6 <__ieee754_sqrt+0x5e>
 800a9f0:	e7f7      	b.n	800a9e2 <__ieee754_sqrt+0x5a>
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	e7fa      	b.n	800a9ec <__ieee754_sqrt+0x64>
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	02dc      	lsls	r4, r3, #11
 800a9fc:	d5fb      	bpl.n	800a9f6 <__ieee754_sqrt+0x6e>
 800a9fe:	1e44      	subs	r4, r0, #1
 800aa00:	1b12      	subs	r2, r2, r4
 800aa02:	f1c0 0420 	rsb	r4, r0, #32
 800aa06:	fa21 f404 	lsr.w	r4, r1, r4
 800aa0a:	4323      	orrs	r3, r4
 800aa0c:	4081      	lsls	r1, r0
 800aa0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800aa16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa1a:	07d2      	lsls	r2, r2, #31
 800aa1c:	bf5c      	itt	pl
 800aa1e:	005b      	lslpl	r3, r3, #1
 800aa20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aa24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa28:	bf58      	it	pl
 800aa2a:	0049      	lslpl	r1, r1, #1
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aa32:	107f      	asrs	r7, r7, #1
 800aa34:	0049      	lsls	r1, r1, #1
 800aa36:	2016      	movs	r0, #22
 800aa38:	4632      	mov	r2, r6
 800aa3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aa3e:	1915      	adds	r5, r2, r4
 800aa40:	429d      	cmp	r5, r3
 800aa42:	bfde      	ittt	le
 800aa44:	192a      	addle	r2, r5, r4
 800aa46:	1b5b      	suble	r3, r3, r5
 800aa48:	1936      	addle	r6, r6, r4
 800aa4a:	0fcd      	lsrs	r5, r1, #31
 800aa4c:	3801      	subs	r0, #1
 800aa4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aa52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa5a:	d1f0      	bne.n	800aa3e <__ieee754_sqrt+0xb6>
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	2420      	movs	r4, #32
 800aa60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aa64:	4293      	cmp	r3, r2
 800aa66:	eb0c 0e00 	add.w	lr, ip, r0
 800aa6a:	dc02      	bgt.n	800aa72 <__ieee754_sqrt+0xea>
 800aa6c:	d113      	bne.n	800aa96 <__ieee754_sqrt+0x10e>
 800aa6e:	458e      	cmp	lr, r1
 800aa70:	d811      	bhi.n	800aa96 <__ieee754_sqrt+0x10e>
 800aa72:	f1be 0f00 	cmp.w	lr, #0
 800aa76:	eb0e 000c 	add.w	r0, lr, ip
 800aa7a:	da3f      	bge.n	800aafc <__ieee754_sqrt+0x174>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	db3d      	blt.n	800aafc <__ieee754_sqrt+0x174>
 800aa80:	f102 0801 	add.w	r8, r2, #1
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	458e      	cmp	lr, r1
 800aa88:	bf88      	it	hi
 800aa8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa8e:	eba1 010e 	sub.w	r1, r1, lr
 800aa92:	4465      	add	r5, ip
 800aa94:	4642      	mov	r2, r8
 800aa96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aa9a:	3c01      	subs	r4, #1
 800aa9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aaa0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aaa4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aaa8:	d1dc      	bne.n	800aa64 <__ieee754_sqrt+0xdc>
 800aaaa:	4319      	orrs	r1, r3
 800aaac:	d01b      	beq.n	800aae6 <__ieee754_sqrt+0x15e>
 800aaae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800ab2c <__ieee754_sqrt+0x1a4>
 800aab2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ab30 <__ieee754_sqrt+0x1a8>
 800aab6:	e9da 0100 	ldrd	r0, r1, [sl]
 800aaba:	e9db 2300 	ldrd	r2, r3, [fp]
 800aabe:	f7f5 fb8b 	bl	80001d8 <__aeabi_dsub>
 800aac2:	e9da 8900 	ldrd	r8, r9, [sl]
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 ffb7 	bl	8000a40 <__aeabi_dcmple>
 800aad2:	b140      	cbz	r0, 800aae6 <__ieee754_sqrt+0x15e>
 800aad4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aad8:	e9da 0100 	ldrd	r0, r1, [sl]
 800aadc:	e9db 2300 	ldrd	r2, r3, [fp]
 800aae0:	d10e      	bne.n	800ab00 <__ieee754_sqrt+0x178>
 800aae2:	3601      	adds	r6, #1
 800aae4:	4625      	mov	r5, r4
 800aae6:	1073      	asrs	r3, r6, #1
 800aae8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aaf0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800aaf4:	086b      	lsrs	r3, r5, #1
 800aaf6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800aafa:	e759      	b.n	800a9b0 <__ieee754_sqrt+0x28>
 800aafc:	4690      	mov	r8, r2
 800aafe:	e7c1      	b.n	800aa84 <__ieee754_sqrt+0xfc>
 800ab00:	f7f5 fb6c 	bl	80001dc <__adddf3>
 800ab04:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4649      	mov	r1, r9
 800ab10:	f7f5 ff8c 	bl	8000a2c <__aeabi_dcmplt>
 800ab14:	b120      	cbz	r0, 800ab20 <__ieee754_sqrt+0x198>
 800ab16:	1cab      	adds	r3, r5, #2
 800ab18:	bf08      	it	eq
 800ab1a:	3601      	addeq	r6, #1
 800ab1c:	3502      	adds	r5, #2
 800ab1e:	e7e2      	b.n	800aae6 <__ieee754_sqrt+0x15e>
 800ab20:	1c6b      	adds	r3, r5, #1
 800ab22:	f023 0501 	bic.w	r5, r3, #1
 800ab26:	e7de      	b.n	800aae6 <__ieee754_sqrt+0x15e>
 800ab28:	7ff00000 	.word	0x7ff00000
 800ab2c:	0800ac70 	.word	0x0800ac70
 800ab30:	0800ac68 	.word	0x0800ac68

0800ab34 <_init>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	bf00      	nop
 800ab38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3a:	bc08      	pop	{r3}
 800ab3c:	469e      	mov	lr, r3
 800ab3e:	4770      	bx	lr

0800ab40 <_fini>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr
